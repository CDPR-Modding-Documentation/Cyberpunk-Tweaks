package Items
using RTDB

RequiredItemStats : StatModifierGroup
{
	fk< StatModifier >[] statModifiers = 
	[
		{
			statType = "BaseStats.Quantity";
			modifierType = "Additive";
			value = 999999;
		} : ConstantStatModifier
	];
}

QualityRandomization : StatModifierGroup
{
	statModifiers += 
	[
		{
			statType = "BaseStats.RandomCurveInput";
			modifierType = "Additive";
			value = 0.f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.RandomCurveInput";
			modifierType = "Multiplier";
			id = "quality_curves";
			column = "power_level_to_random_range_mult";
			refStat = "BaseStats.PowerLevel";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Quality";
			modifierType = "Additive";
			id = "random_distributions";
			column = "quality_distribution";
			refStat = "BaseStats.RandomCurveInput";
		} : CurveStatModifier
	];
}

GenericItem : Item
{
	string friendlyName = "generic_item";
	fk< AttachmentSlot >[] placementSlots = 
	[
		"AttachmentSlots.Receiver"
	];
}

PlayerMaTppHead : Item
{
	bool isCustomizable = true;
	bool isCached = true;
	bool isSingleInstance = true;
	string friendlyName = "player_tpp_head";
	CName entityName = "player_ma_tpp_head";
	CName appearanceName = "TPP";
	CName[] tags = 
	[
		"Quest", "TppHead"
	];
	fk< AttachmentSlot >[] placementSlots = 
	[
		"AttachmentSlots.TppHead"
	];
	fk< ParentAttachmentType > parentAttachmentType = "ParentAttachmentType.Skinned";
	fk< ItemsFactoryAppearanceSuffixBase >[] appearanceSuffixes = [];
}

PlayerWaTppHead : Item
{
	bool isCustomizable = true;
	bool isCached = true;
	bool isSingleInstance = true;
	string friendlyName = "player_tpp_head";
	CName entityName = "player_wa_tpp_head";
	CName appearanceName = "TPP";
	CName[] tags = 
	[
		"Quest", "TppHead"
	];
	fk< AttachmentSlot >[] placementSlots = 
	[
		"AttachmentSlots.TppHead"
	];
	fk< ParentAttachmentType > parentAttachmentType = "ParentAttachmentType.Skinned";
	fk< ItemsFactoryAppearanceSuffixBase >[] appearanceSuffixes = [];
}

[ notQueryable ]
PlayerTattoo : HandsModule
{
	entityName = "player_tatoo";
}

[ notQueryable ]
YakuzaTattoo : PlayerTattoo
{
	buyPrice = [];
	sellPrice = [];
	displayName = "LocKey#78052";
	localizedDescription = "LocKey#78053";
	appearanceName = "a0_000__tattoo_yakuza_r_tattoo_yakuza_";
	iconPath = "icon_tattoo_tyger";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSmartLink";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40869";
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#52429";
			};
		}
	];
}

[ notQueryable ]
CasiusTattoo : PlayerTattoo
{
	displayName = "LocKey#78054";
	localizedDescription = "LocKey#78055";
	appearanceName = "a0_000__tattoo_casius_r_tattoo_yakuza_";
	iconPath = "icon_tattoo_cassius";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSmartLink";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40869";
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#52429";
			};
		}
	];
}

[ notQueryable ]
SilverhandTattoo : PlayerTattoo
{
	displayName = "LocKey#78056";
	localizedDescription = "LocKey#78057";
	appearanceName = "a0_000__tattoo_silverhand_r_tattoo_yakuza_";
	iconPath = "icon_tattoo_johnny";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSmartLink";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40869";
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#52429";
			};
		}
	];
}

CharacterCustomizationMaHead : PlayerMaTppHead
{
	string friendlyName = "character_customization_head";
	CName entityName = "player_ma_tpp_head";
	CName appearanceName = "character_customization";
}

CharacterCustomizationWaHead : PlayerWaTppHead
{
	string friendlyName = "character_customization_head";
	CName entityName = "player_wa_tpp_head";
	CName appearanceName = "character_customization";
}

PlayerFppHead : Item
{
	bool isCustomizable = true;
	bool isSingleInstance = true;
	bool isCached = true;
	string friendlyName = "player_fpp_head";
	CName entityName = "player_fpp_head";
	CName appearanceName = "FPP";
	CName[] tags = 
	[
		"Quest", "TppHead", "FppHead"
	];
	fk< AttachmentSlot >[] placementSlots = 
	[
		"AttachmentSlots.TppHead"
	];
	fk< ParentAttachmentType > parentAttachmentType = "ParentAttachmentType.Skinned";
	fk< ItemsFactoryAppearanceSuffixBase >[] appearanceSuffixes = [];
}

PlayerMaPhotomodeHead : PlayerMaTppHead
{
	CName appearanceName = "TPP_photomode";
}

PlayerWaPhotomodeHead : PlayerWaTppHead
{
	CName appearanceName = "TPP_photomode";
}

GenericItemRoot : Item
{
	string friendlyName = "generic_item_root";
	fk< AttachmentSlot >[] placementSlots = 
	[
		"AttachmentSlots.GenericItemRoot"
	];
	buyPrice = [];
	sellPrice = [];
}

GenericRootSlotItem : SlotItemPartListElement
{
	slot = "AttachmentSlots.GenericItemRoot";
	fk< ItemPartListElement >[] itemPartList = 
	[
		{
			item = "Items.GenericItemRoot";
		}
	];
}

Part : Item
{
	bool isSingleInstance = false;
	bool isPart = true;
	CName[] tags += 
	[
		"itemPart"
	];
	fk< ItemCategory > itemCategory = "ItemCategory.Part";
}

[ notQueryable ]
StartingWeaponGeneric : Preset_Unity_Default
{
}

[ notQueryable ]
StartingWeaponStreetKid : Preset_Knife_Default
{
}

[ notQueryable ]
StartingWeaponNomad : Preset_Baseball_Bat_Default
{
}

[ notQueryable ]
StartingWeaponCorpo : Preset_Knuckles_Default
{
}

