package Items
using RTDB, BaseStats, CyberwareAction, Perks, Prereqs, Effectors

EnhancedBloodVesselsCommon : CardiovascularSystemModule
{
	displayName = "LocKey#40742";
	localizedDescription = "LocKey#40743";
	iconPath = "cw_circulatory_enhancedbloodvessels";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 6;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthOutOfCombatRegenEnabled";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenRateAdd";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenEndThreshold";
					modifierType = "Additive";
					value = 20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					1
				];
			} : EnhancedBloodVesselUIData;
		}
	];
	CName cyberwareType = "EnhancedBlood";
	buyPrice += 
	[
		"Price.BloodVessels"
	];
	sellPrice += 
	[
		"Price.BloodVessels"
	];
}

EnhancedBloodVesselsUncommon : EnhancedBloodVesselsCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthOutOfCombatRegenEnabled";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenRateAdd";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenEndThreshold";
					modifierType = "Additive";
					value = 20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					2
				];
			} : EnhancedBloodVesselUIData;
		}
	];
}

EnhancedBloodVesselsRare : EnhancedBloodVesselsCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthOutOfCombatRegenEnabled";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenRateAdd";
					modifierType = "Additive";
					value = 4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenEndThreshold";
					modifierType = "Additive";
					value = 20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					4
				];
			} : EnhancedBloodVesselUIData;
		}
	];
}

EnhancedBloodVesselsEpic : EnhancedBloodVesselsCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthOutOfCombatRegenEnabled";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenRateAdd";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenEndThreshold";
					modifierType = "Additive";
					value = 20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : EnhancedBloodVesselUIData;
		}
	];
}

EnhancedBloodVesselsLegendary : EnhancedBloodVesselsCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthOutOfCombatRegenEnabled";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenRateAdd";
					modifierType = "Additive";
					value = 50f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HealthOutOfCombatRegenEndThreshold";
					modifierType = "Additive";
					value = 20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					50
				];
			} : EnhancedBloodVesselUIData;
		}
	];
}

IronLungsCommon : CardiovascularSystemModule
{
	displayName = "LocKey#3676";
	localizedDescription = "LocKey#3683";
	iconPath = "cw_circulatory_ironlungs";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.StaminaRegenRateMult";
					modifierType = "Additive";
					value = 0.05f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					5
				];
			} : IronLungsUIData;
		}
	];
	CName cyberwareType = "IronLungs";
	buyPrice += 
	[
		"Price.IronLungs"
	];
	sellPrice += 
	[
		"Price.IronLungs"
	];
}

IronLungsUncommon : IronLungsCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.StaminaRegenRateMult";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : IronLungsUIData;
		}
	];
}

IronLungsRare : IronLungsCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.StaminaRegenRateMult";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					15
				];
			} : IronLungsUIData;
		}
	];
}

IronLungsEpic : IronLungsCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.StaminaRegenRateMult";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					20
				];
			} : IronLungsUIData;
		}
	];
}

IronLungsLegendary : IronLungsCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.StaminaRegenRateMult";
					modifierType = "Additive";
					value = 0.25f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					25
				];
			} : IronLungsUIData;
		}
	];
}

BioConductorsRare : CardiovascularSystemModule
{
	displayName = "LocKey#40745";
	localizedDescription = "LocKey#40746";
	iconPath = "cw_circulatory_bioconductors";
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CyberwareCooldownReduction";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : BioConductorsUIData;
		}
	];
	CName cyberwareType = "BioConductors";
	buyPrice += 
	[
		"Price.BioConductors"
	];
	sellPrice += 
	[
		"Price.BioConductors"
	];
}

BioConductorsEpic : BioConductorsRare
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CyberwareCooldownReduction";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					20
				];
			} : BioConductorsUIData;
		}
	];
}

BioConductorsLegendary : BioConductorsRare
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CyberwareCooldownReduction";
					modifierType = "Additive";
					value = 0.3f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					30
				];
			} : BioConductorsUIData;
		}
	];
}

SecondHeart : CardiovascularSystemModule
{
	string friendlyName = "SecondHeart";
	displayName = "LocKey#3675";
	localizedDescription = "LocKey#3682";
	iconPath = "cw_circulatory_secondheart";
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100, 2
				];
			};
		} : GameplayLogicPackage
	];
	CName cyberwareType = "SecondHeart";
	buyPrice += 
	[
		"Price.SecondHeart"
	];
	sellPrice += 
	[
		"Price.SecondHeart"
	];
}

BloodPumpCommon : CardiovascularSystemModule
{
	string friendlyName = "BloodPump";
	displayName = "LocKey#3678";
	localizedDescription = "LocKey#3685";
	iconPath = "cw_circulatory_bloodpump";
	itemType = "ItemType.Cyb_Ability";
	quality = "Quality.Common";
	OnEquip = 
	[
		{
			UIData = 
			{
				intValues = 
				[
					50, 180
				];
			} : BloodPumpUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPumpCommon"
	];
	CName cyberwareType = "BloodPump";
	buyPrice += 
	[
		"Price.BloodPump"
	];
	sellPrice += 
	[
		"Price.BloodPump"
	];
}

BloodPumpUncommon : BloodPumpCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : BodyPrereq
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				intValues = 
				[
					60, 180
				];
			} : BloodPumpUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPumpUncommon"
	];
}

BloodPumpRare : BloodPumpCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : BodyPrereq
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				intValues = 
				[
					70, 90
				];
			} : BloodPumpUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPumpRare"
	];
}

BloodPumpEpic : BloodPumpCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 13;
		} : BodyPrereq
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				intValues = 
				[
					80, 90
				];
			} : BloodPumpUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPumpEpic"
	];
}

BloodPumpLegendary : BloodPumpCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : BodyPrereq
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				intValues = 
				[
					90, 30
				];
			} : BloodPumpUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPumpLegendary"
	];
}

HealthMonitorCommon : CardiovascularSystemModule
{
	string friendlyName = "HealthMonitor";
	displayName = "LocKey#3681";
	localizedDescription = "LocKey#3688";
	iconPath = "cw_circulatory_healthmonitor";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthMonitorCooldownDuration";
					modifierType = "Additive";
					value = 240f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector", "Items.HealthMonitorCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 30, 240
				];
			} : HealthMonitorUIData;
		}
	];
	CName cyberwareType = "HealthMonitor";
	buyPrice += 
	[
		"Price.HealthMonitor"
	];
	sellPrice += 
	[
		"Price.HealthMonitor"
	];
}

HealthMonitorUncommon : HealthMonitorCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthMonitorCooldownDuration";
					modifierType = "Additive";
					value = 240f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 40;
						} : StatPoolUpdate
					];
				} : HealthMonitorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 40;
						} : StatPoolUpdate
					];
				} : HealthMonitorSFXEffector, 
				"Items.HealthMonitorCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 40, 240
				];
			} : HealthMonitorUIData;
		}
	];
}

HealthMonitorRare : HealthMonitorCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthMonitorCooldownDuration";
					modifierType = "Additive";
					value = 180f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 50;
						} : StatPoolUpdate
					];
				} : HealthMonitorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 50;
						} : StatPoolUpdate
					];
				} : HealthMonitorSFXEffector, 
				"Items.HealthMonitorCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 50, 180
				];
			} : HealthMonitorUIData;
		}
	];
}

HealthMonitorEpic : HealthMonitorRare
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthMonitorCooldownDuration";
					modifierType = "Additive";
					value = 150f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 60;
						} : StatPoolUpdate
					];
				} : HealthMonitorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 60;
						} : StatPoolUpdate
					];
				} : HealthMonitorSFXEffector, 
				"Items.HealthMonitorCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 60, 150
				];
			} : HealthMonitorUIData;
		}
	];
}

HealthMonitorLegendary : HealthMonitorRare
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HealthMonitorCooldownDuration";
					modifierType = "Additive";
					value = 120f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
				} : HealthMonitorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
				} : HealthMonitorSFXEffector, 
				"Items.HealthMonitorCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 100, 120
				];
			} : HealthMonitorUIData;
		}
	];
}

MicroGeneratorCommon : CardiovascularSystemModule
{
	displayName = "LocKey#40760";
	localizedDescription = "LocKey#40761";
	iconPath = "cw_circulatory_microgenerator";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				"Items.MicroGeneratorEffector", "Items.MicroGeneratorSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 20
				];
			} : MicroGeneratorBasicUIData;
		}
	];
	CName cyberwareType = "MicroGenerator";
	buyPrice += 
	[
		"Price.MicroGenerator"
	];
	sellPrice += 
	[
		"Price.MicroGenerator"
	];
}

MicroGeneratorUncommon : MicroGeneratorCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					attackRecord = "Attacks.MicroGeneratorExplosionUncommon";
				} : MicroGeneratorEffector, 
				"Items.MicroGeneratorSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 30
				];
			} : MicroGeneratorBasicUIData;
		}
	];
}

MicroGeneratorRare : MicroGeneratorCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					attackRecord = "Attacks.MicroGeneratorExplosionRare";
				} : MicroGeneratorEffector, 
				"Items.MicroGeneratorSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 40
				];
			} : MicroGeneratorBasicUIData;
		}
	];
}

MicroGeneratorEpic : MicroGeneratorCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					attackRecord = "Attacks.MicroGeneratorExplosionEpic";
				} : MicroGeneratorEffector, 
				"Items.MicroGeneratorSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 40
				];
			} : MicroGeneratorAdvancedUIData;
		}
	];
}

MicroGeneratorLegendary : MicroGeneratorCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					attackRecord = "Attacks.MicroGeneratorExplosionLegendary";
				} : MicroGeneratorEffector, 
				"Items.MicroGeneratorSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					15, 50
				];
			} : MicroGeneratorAdvancedUIData;
		}
	];
}

StaminaRegenBoosterCommon : CardiovascularSystemModule
{
	displayName = "LocKey#40752";
	localizedDescription = "LocKey#40753";
	iconPath = "cw_circulatory_staminaregenbooster";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				"Items.StaminaRegenBoosterEffector", "Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : StaminaRegenBoosterUIData;
		}
	];
	CName cyberwareType = "StaminaRegenBooster";
	buyPrice += 
	[
		"Price.StaminaRegenBooster"
	];
	sellPrice += 
	[
		"Price.StaminaRegenBooster"
	];
}

StaminaRegenBoosterUncommon : StaminaRegenBoosterCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 20f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 20f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterSFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					20
				];
			} : StaminaRegenBoosterUIData;
		}
	];
}

StaminaRegenBoosterRare : StaminaRegenBoosterCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 30f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 30f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterSFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					30
				];
			} : StaminaRegenBoosterUIData;
		}
	];
}

StaminaRegenBoosterEpic : StaminaRegenBoosterCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 13;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 40f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 40f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterSFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					40
				];
			} : StaminaRegenBoosterUIData;
		}
	];
}

StaminaRegenBoosterLegendary : StaminaRegenBoosterCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : BodyPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 50f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 50f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterSFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					50
				];
			} : StaminaRegenBoosterUIData;
		}
	];
}

DischargeConnectorRare : CardiovascularSystemModule
{
	displayName = "LocKey#40755";
	localizedDescription = "LocKey#40756";
	iconPath = "cw_circulatory_dischargeconnector";
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				"Items.DischargeConnectorEffector", "Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					3
				];
			} : DischargeConnectorUIData;
		}
	];
	CName cyberwareType = "DischargeConnector";
	buyPrice += 
	[
		"Price.DischargeConnector"
	];
	sellPrice += 
	[
		"Price.DischargeConnector"
	];
}

DischargeConnectorEpic : DischargeConnectorRare
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorSFXEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorVFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					6
				];
			} : DischargeConnectorUIData;
		}
	];
}

DischargeConnectorLegendary : DischargeConnectorRare
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : TechnicalAbilityPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 10;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 10;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorSFXEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 10;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorVFXEffector
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : DischargeConnectorUIData;
		}
	];
}

TyrosineInjector : CardiovascularSystemModule
{
	string friendlyName = "TyrosineInjector";
	displayName = "LocKey#40757";
	localizedDescription = "LocKey#40758";
	iconPath = "cw_circulatory_tyrosineinjector";
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MinigameTimeLimitExtension";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "";
				localizedDescription = "LocKey#40759";
				intValues = 
				[
					100
				];
			};
		}
	];
	fk< ConstantStatModifier > price = 
	{
		statType = "BaseStats.Price";
		modifierType = "Additive";
		value = 125;
	} : ConstantStatModifier;
	CName cyberwareType = "TyrosineInjector";
	buyPrice += 
	[
		"Price.TyrosineInjector"
	];
	sellPrice += 
	[
		"Price.TyrosineInjector"
	];
}

EnhancedBloodVesselUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40740";
	intValues = 
	[
		20
	];
}

IronLungsUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40741";
	intValues = 
	[
		10
	];
}

BioConductorsUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40744";
}

HealthMonitorUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40748";
}

MicroGeneratorBasicUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40749";
}

MicroGeneratorAdvancedUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40750";
}

StaminaRegenBoosterUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40751";
}

DischargeConnectorUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40754";
}

BloodPumpUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40747";
}

HealthMonitorEffector : Effector
{
	effectorClassName = "ModifyStatPoolValueEffector";
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 15f;
				statPoolType = "Health";
				comparisonType = "LessOrEqual";
			} : StatPoolPrereq, 
			{
				valueToCheck = 0f;
				statPoolType = "Health";
				comparisonType = "NotEqual";
			} : StatPoolPrereq, 
			{
				fk< StatusEffect > statusEffect = "BaseStatusEffect.PlayerHealthMonitorCooldown";
			} : StatusEffectAbsentPrereq, 
			{
				fk< StatusEffect > statusEffect = "BaseStatusEffect.ForceKill";
			} : StatusEffectAbsentPrereq, 
			{
				stateName = "DeathLand";
				isInState = false;
			} : DetailedLocomotionPSMPrereq, 
			{
				stateName = "groundDeath";
				isInState = false;
			} : HighLevelPSMPrereq, 
			{
				stateName = "airDeath";
				isInState = false;
			} : HighLevelPSMPrereq, 
			{
				stateName = "swimDeath";
				isInState = false;
			} : HighLevelPSMPrereq
		];
	} : Prereqs.ANDPrereq;
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Health";
			statPoolValue = 30;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

HealthMonitorSFXEffector : PlaySFXEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 15f;
				statPoolType = "Health";
				comparisonType = "LessOrEqual";
			} : StatPoolPrereq, 
			{
				valueToCheck = 0f;
				statPoolType = "Health";
				comparisonType = "NotEqual";
			} : StatPoolPrereq, 
			{
				fk< StatusEffect > statusEffect = "BaseStatusEffect.PlayerHealthMonitorCooldown";
			} : StatusEffectAbsentPrereq, 
			{
				fk< StatusEffect > statusEffect = "BaseStatusEffect.ForceKill";
			} : StatusEffectAbsentPrereq, 
			{
				stateName = "DeathLand";
				isInState = false;
			} : DetailedLocomotionPSMPrereq
		];
	} : Prereqs.ANDPrereq;
	CName activationSFXName = "vfx_fullscreen_cyberware_heal_activate";
}

HealthMonitorCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 15f;
				statPoolType = "Health";
				comparisonType = "LessOrEqual";
			} : StatPoolPrereq, 
			{
				valueToCheck = 0f;
				statPoolType = "Health";
				comparisonType = "NotEqual";
			} : StatPoolPrereq, 
			{
				CName prereqClassName = "StatusEffectAbsentPrereq";
				fk< StatusEffect > statusEffect = "BaseStatusEffect.PlayerHealthMonitorCooldown";
			} : StatusEffectPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerHealthMonitorCooldown";
	removeWithEffector = false;
}

MicroGeneratorEffector : TriggerAttackEffector
{
	effectorClassName = "SimpleTriggerAttackEffect";
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 0f;
				statPoolType = "Health";
				comparisonType = "NotEqual";
			} : StatPoolPrereq, 
			{
				valueToCheck = 15f;
				statPoolType = "Health";
				comparisonType = "LessOrEqual";
			} : StatPoolPrereq, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier3";
				bool isInState = false;
			}, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier4";
				bool isInState = false;
			}, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier5";
				bool isInState = false;
			}
		];
	} : ANDPrereq;
	bool shouldDelay = true;
	attackRecord = "Attacks.MicroGeneratorExplosionCommon";
}

MicroGeneratorSFXEffector : PlaySFXEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 0f;
				statPoolType = "Health";
				comparisonType = "NotEqual";
			} : StatPoolPrereq, 
			{
				valueToCheck = 15f;
				statPoolType = "Health";
				comparisonType = "LessOrEqual";
			} : StatPoolPrereq, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier3";
				bool isInState = false;
			}, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier4";
				bool isInState = false;
			}, 
			{
				prereqClassName = "HighLevelPSMPrereq";
				string stateName = "SceneTier5";
				bool isInState = false;
			}
		];
	} : ANDPrereq;
	CName activationSFXName = "vfx_fullscreen_micro_generator_emp";
}

StaminaRegenBoosterEffector : Effector
{
	effectorClassName = "ModifyStatPoolValueEffector";
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Stamina";
			statPoolValue = 10f;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

StaminaRegenBoosterSFXEffector : PlaySFXEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	CName activationSFXName = "vfx_fullscreen_stamina_regen_activate";
	bool fireAndForget = true;
}

DischargeConnectorEffector : Effector
{
	effectorClassName = "ModifyStatPoolValueEffector";
	prereqRecord = 
	{
		conditions = 
		[
			{
				hitFlag = "WeaponFullyCharged";
				onlyOncePerShot = true;
			} : HitFlagHitPrereqCondition, 
			{
				statusEffect = "Defeated";
				checkType = "CheckType.Type";
				invert = true;
			} : StatusEffectPresentHitPrereqCondition, 
			{
				objectToCheck = "Target";
				statPoolToCompare = "Health";
				comparisonType = "NotEqual";
				valueToCheck = 0f;
			} : StatPoolHitPrereqCondition
		];
	} : Prereqs.ProcessHitTriggered;
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Health";
			statPoolValue = 3;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

DischargeConnectorSFXEffector : PlaySFXEffector
{
	prereqRecord = 
	{
		conditions = 
		[
			{
				hitFlag = "WeaponFullyCharged";
				onlyOncePerShot = true;
			} : HitFlagHitPrereqCondition
		];
	} : Prereqs.ProcessHitTriggered;
	CName activationSFXName = "vfx_fullscreen_discharge_connector_activate";
	bool fireAndForget = true;
}

DischargeConnectorVFXEffector : PlayVFXEffector
{
	prereqRecord = 
	{
		conditions = 
		[
			{
				hitFlag = "WeaponFullyCharged";
			} : HitFlagHitPrereqCondition
		];
	} : Prereqs.ProcessHitTriggered;
	CName vfxName = "p_discharge_connector";
	bool fireAndForget = true;
}

BloodPumpEffector : Effector
{
	prereqRecord = "Prereqs.AlwaysTruePrereq";
	effectorClassName = "ModifyStatPoolValueEffector";
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Health";
			statPoolValue = 60;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

