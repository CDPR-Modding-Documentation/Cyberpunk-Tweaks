package Items
using RTDB, BaseStats, Perks, Prereqs, Price, Variants, ModifierGroups, BaseStatusEffect, Effectors

[ notQueryable ]
AdvancedCardiovascularSystemModule : CardiovascularSystemModule
{
	usesVariants = true;
	blueprint = "Items.GenericShardableCyberwareBlueprint";
	slotPartListPreset = 
	[
		"Items.GenericItemRootPreset"
	];
	statModifiers += 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier
	];
}

AdvancedStaminaRegenBoosterCommon : AdvancedCardiovascularSystemModule
{
	displayName = "LocKey#40752";
	localizedDescription = "LocKey#40753";
	iconPath = "cw_circulatory_staminaregenbooster";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity14Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 10f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : StaminaRegenBoosterUIData;
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedStaminaRegenBoosterStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "StaminaRegenBooster";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterCommonPlus";
}

AdvancedStaminaRegenBoosterStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.MeleeDamagePercentBonus", "Modifiers.RamOnKill", "Modifiers.RamOnKillQualityToggle", "Modifiers.GrenadesChargesRegenMult", "Modifiers.GrenadesChargesRegenMultToggle"
	];
}

[ notQueryable ]
AdvancedStaminaRegenBoosterCommonPlus : AdvancedStaminaRegenBoosterCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 11f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					11
				];
			} : StaminaRegenBoosterUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterUncommon";
}

AdvancedStaminaRegenBoosterUncommon : AdvancedStaminaRegenBoosterCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 13f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					13
				];
			} : StaminaRegenBoosterUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterUncommonPlus";
}

[ notQueryable ]
AdvancedStaminaRegenBoosterUncommonPlus : AdvancedStaminaRegenBoosterCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 14f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					14
				];
			} : StaminaRegenBoosterUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterRare";
}

AdvancedStaminaRegenBoosterRare : AdvancedStaminaRegenBoosterCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 16f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					16
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterRarePlus";
}

[ notQueryable ]
AdvancedStaminaRegenBoosterRarePlus : AdvancedStaminaRegenBoosterCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 17f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					17
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterEpic";
}

AdvancedStaminaRegenBoosterEpic : AdvancedStaminaRegenBoosterCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 19f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					19
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterEpicPlus";
}

[ notQueryable ]
AdvancedStaminaRegenBoosterEpicPlus : AdvancedStaminaRegenBoosterCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 21f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					21
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterLegendary";
}

AdvancedStaminaRegenBoosterLegendary : AdvancedStaminaRegenBoosterCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 23f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					23
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterLegendaryPlus";
}

[ notQueryable ]
AdvancedStaminaRegenBoosterLegendaryPlus : AdvancedStaminaRegenBoosterCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 24f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					24
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedStaminaRegenBoosterLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedStaminaRegenBoosterLegendaryPlusPlus : AdvancedStaminaRegenBoosterCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 25f;
						} : StatPoolUpdate
					];
				} : Items.StaminaRegenBoosterEffector, 
				"Items.StaminaRegenBoosterSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					25
				];
			} : StaminaRegenBoosterUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

AdvancedBiomonitorCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "HealthMonitor";
	displayName = "LocKey#3681";
	localizedDescription = "LocKey#3688";
	iconPath = "cw_circulatory_healthmonitor";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity14Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.02f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.02f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.02f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 2f
				];
			} : HealthMonitorUIData;
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedBiomonitorStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "HealthMonitor";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorCommonPlus";
}

AdvancedBiomonitorStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.HealthRegenPercent", "Modifiers.HealingItemsChargesRegenMult", "Modifiers.HealingItemsChargesRegenMultQualityToggle", "Modifiers.Health", "Modifiers.HealthToggle"
	];
}

[ notQueryable ]
AdvancedBiomonitorCommonPlus : AdvancedBiomonitorCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.03f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.03f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.03f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 3f
				];
			} : HealthMonitorUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorUncommon";
}

AdvancedBiomonitorUncommon : AdvancedBiomonitorCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.05f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.05f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.05f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 5f
				];
			} : HealthMonitorUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorUncommonPlus";
}

[ notQueryable ]
AdvancedBiomonitorUncommonPlus : AdvancedBiomonitorCommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.06f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.06f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.06f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 6f
				];
			} : HealthMonitorUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorRare";
}

AdvancedBiomonitorRare : AdvancedBiomonitorCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.08f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.08f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.08f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 8f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorRarePlus";
}

[ notQueryable ]
AdvancedBiomonitorRarePlus : AdvancedBiomonitorCommon
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.09f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.09f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.09f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 9f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorEpic";
}

AdvancedBiomonitorEpic : AdvancedBiomonitorCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.11f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.11f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.11f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 11f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorEpicPlus";
}

[ notQueryable ]
AdvancedBiomonitorEpicPlus : AdvancedBiomonitorCommon
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.12f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.12f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.12f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 12f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorLegendary";
}

AdvancedBiomonitorLegendary : AdvancedBiomonitorCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.14f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 14f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorLegendaryPlus";
}

[ notQueryable ]
AdvancedBiomonitorLegendaryPlus : AdvancedBiomonitorCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 15f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "Items.AdvancedBiomonitorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedBiomonitorLegendaryPlusPlus : AdvancedBiomonitorCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "AdditiveMultiplier";
					value = 0.16f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				"Items.HealthMonitorEffector", "Items.HealthMonitorSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 16f
				];
			} : HealthMonitorUIData;
		}, 
		"Attunements.TechConsumableEffectiveness"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedBloodPumpCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "BloodPump";
	displayName = "LocKey#3678";
	localizedDescription = "LocKey#3685";
	iconPath = "cw_circulatory_bloodpump";
	itemType = "ItemType.Cyb_HealingAbility";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity15Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 35;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 7;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					35f, 7f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedBloodPumpStatsShard";
		} : StatsShardSlotPart
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	CName cyberwareType = "BloodPump";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpUncommon";
}

AdvancedBloodPumpStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.DamageOverTimePercentBonus", "Modifiers.BonusQuickHackDamage", "Modifiers.BonusQuickHackDamageQualityToggle", "Modifiers.CarryCapacity", "Modifiers.CarryCapacityToggle"
	];
}

AdvancedBloodPumpUncommon : AdvancedBloodPumpCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 45;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 9;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					45f, 9f, 6f
				];
				intValues = 
				[
					1
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpUncommonPlus";
}

[ notQueryable ]
AdvancedBloodPumpUncommonPlus : AdvancedBloodPumpUncommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 50;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 10;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 10f, 6f
				];
				intValues = 
				[
					1
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpRare";
}

AdvancedBloodPumpRare : AdvancedBloodPumpCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 60;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 12;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60f, 12f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpRarePlus";
}

[ notQueryable ]
AdvancedBloodPumpRarePlus : AdvancedBloodPumpUncommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 65;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 13;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					65f, 13f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpEpic";
}

AdvancedBloodPumpEpic : AdvancedBloodPumpCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 70;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 15;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					70f, 15f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpEpicPlus";
}

[ notQueryable ]
AdvancedBloodPumpEpicPlus : AdvancedBloodPumpUncommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 75;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 16;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					75f, 16f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpLegendary";
}

AdvancedBloodPumpLegendary : AdvancedBloodPumpCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 85;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 17;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					85f, 17f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpLegendaryPlus";
}

[ notQueryable ]
AdvancedBloodPumpLegendaryPlus : AdvancedBloodPumpUncommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 100;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 20;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					100f, 20f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "Items.AdvancedBloodPumpLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedBloodPumpLegendaryPlusPlus : AdvancedBloodPumpUncommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.InhalerBaseHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 110;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.InjectorBaseOverTheTimeHealing";
					modifierType = "Additive";
					refStat = "BaseStats.IsHealingItemEquipped";
					opSymbol = "*(1-x)";
					value = 23;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						statType = "IsHealingItemEquipped";
						valueToCheck = 1;
						comparisonType = "Less";
					} : StatPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.HealingItemsChargesRegenMult";
								refStat = "BaseStats.CyberwareCooldownReduction";
								modifierType = "Additive";
								opSymbol = "*";
								value = 1.0f;
							} : CombinedStatModifier
						];
					};
				} : ApplyStatGroupEffector
			];
			UIData = 
			{
				floatValues = 
				[
					110f, 23f, 6f
				];
			} : BloodPumpUIData;
		} : GameplayLogicPackage, 
		"Attunements.TechConsumableEffectiveness"
	];
	objectActions = 
	[
		"CyberwareAction.UseBloodPump"
	];
	nextUpgradeItem = "";
}

AdvancedDischargeConnectorRare : AdvancedCardiovascularSystemModule
{
	displayName = "LocKey#40755";
	localizedDescription = "LocKey#40756";
	iconPath = "cw_circulatory_dischargeconnector";
	quality = "Quality.Rare";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity14Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 1.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					1.5f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedDischargeConnectorStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "DischargeConnector";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorRarePlus";
}

AdvancedDischargeConnectorStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.ADSSpeedPercentBonus", "Modifiers.ADSSpeedPercentBonusQualityToggle", "Modifiers.RamOnKill", "Modifiers.RamOnKillToggle"
	];
}

[ notQueryable ]
AdvancedDischargeConnectorRarePlus : AdvancedDischargeConnectorRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 1.75;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					1.75f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorEpic";
}

AdvancedDischargeConnectorEpic : AdvancedDischargeConnectorRare
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 2.25;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					2.25f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorEpicPlus";
}

[ notQueryable ]
AdvancedDischargeConnectorEpicPlus : AdvancedDischargeConnectorRarePlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 2.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorLegendary";
}

AdvancedDischargeConnectorLegendary : AdvancedDischargeConnectorRare
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorLegendaryPlus";
}

[ notQueryable ]
AdvancedDischargeConnectorLegendaryPlus : AdvancedDischargeConnectorRarePlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3.25;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3.25f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedDischargeConnectorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedDischargeConnectorLegendaryPlusPlus : AdvancedDischargeConnectorRarePlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f
				];
			} : DischargeConnectorUIData;
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorRare : AdvancedDischargeConnectorRare
{
	displayName = "LocKey#94439";
	localizedDescription = "LocKey#40756";
	tags += 
	[
		"IllegalItem"
	];
	upgradeCostMult = 2.5f;
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	statModifiers = 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity40Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 2.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 2.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_discharge_connector_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorRarePlus : IconicDischargeConnectorRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 2.75;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 2.75;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					2.75f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorEpic";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorEpic : IconicDischargeConnectorRare
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3.25;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 3.25;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3.25f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorEpicPlus : IconicDischargeConnectorRare
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 3.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorLegendary : IconicDischargeConnectorRare
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 4.0;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 4.0;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					4f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorLegendaryPlus : IconicDischargeConnectorRare
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 4.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 4.5;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					4.5f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "Items.IconicDischargeConnectorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicDischargeConnectorLegendaryPlusPlus : IconicDischargeConnectorRare
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 5.0;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Stamina";
							statPoolValue = 5.0;
						} : StatPoolUpdate
					];
				} : Items.DischargeConnectorEffector, 
				"Items.DischargeConnectorSFXEffector", "Items.DischargeConnectorVFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					5.0f
				];
			} : IconicDischargeConnectorUIData;
		}, 
		"Attunements.TechInhalerBaseHealing"
	];
	nextUpgradeItem = "";
}

AdvancedSecondHeartEpic : AdvancedCardiovascularSystemModule
{
	string friendlyName = "SecondHeart";
	displayName = "LocKey#3675";
	localizedDescription = "LocKey#3682";
	iconPath = "cw_circulatory_secondheart";
	quality = "Quality.Epic";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity30Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SecondHeartCooldownDuration";
					modifierType = "Additive";
					value = 300f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					300
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedSecondHeartStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "SecondHeart";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedSecondHeartEpicPlus";
}

AdvancedSecondHeartStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.ExplosionDamagePercentBonus", "Modifiers.GrenadesChargesRegenMult", "Modifiers.GrenadesChargesRegenMultQualityToggle", "Modifiers.ExplosionResistance", "Modifiers.ExplosionResistanceToggle"
	];
}

AdvancedSecondHeartEpicPlus : AdvancedSecondHeartEpic
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SecondHeartCooldownDuration";
					modifierType = "Additive";
					value = 280f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					280
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedSecondHeartLegendary";
}

AdvancedSecondHeartLegendary : AdvancedSecondHeartEpic
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SecondHeartCooldownDuration";
					modifierType = "Additive";
					value = 240f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					240
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedSecondHeartLegendaryPlus";
}

[ notQueryable ]
AdvancedSecondHeartLegendaryPlus : AdvancedSecondHeartEpicPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SecondHeartCooldownDuration";
					modifierType = "Additive";
					value = 220f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					220
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedSecondHeartLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedSecondHeartLegendaryPlusPlus : AdvancedSecondHeartEpicPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasSecondHeart";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SecondHeartCooldownDuration";
					modifierType = "Additive";
					value = 200f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40762";
				intValues = 
				[
					100
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					200
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "";
}

AdvancedHealOnKillCommon : AdvancedCardiovascularSystemModule
{
	displayName = "LocKey#40782";
	localizedDescription = "LocKey#40783";
	iconPath = "cw_frontalcortex_healonkill";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Intelligence";
			refObject = "Player";
			opSymbol = "*";
			value = 0.05f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity10Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3f
				];
			} : HealOnKillUIData;
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedHealOnKillStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "HealOnKill";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillCommonPlus";
}

AdvancedHealOnKillStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.RamOnKill", "Modifiers.BonusRicochetDamage", "Modifiers.BonusRicochetDamageQualityToggle", "Modifiers.ReloadSpeedPercentBonus", "Modifiers.ReloadSpeedPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedHealOnKillCommonPlus : AdvancedHealOnKillCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3.25f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3.25f
				];
			} : HealOnKillUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillUncommon";
}

AdvancedHealOnKillUncommon : AdvancedHealOnKillCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 4f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					4f
				];
			} : HealOnKillUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillUncommonPlus";
}

[ notQueryable ]
AdvancedHealOnKillUncommonPlus : AdvancedHealOnKillCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 4.25f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					4.25f
				];
			} : HealOnKillUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillRare";
}

AdvancedHealOnKillRare : AdvancedHealOnKillCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 5f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					5f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillRarePlus";
}

[ notQueryable ]
AdvancedHealOnKillRarePlus : AdvancedHealOnKillCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 5.25f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					5.25f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillEpic";
}

AdvancedHealOnKillEpic : AdvancedHealOnKillCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					6f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillEpicPlus";
}

[ notQueryable ]
AdvancedHealOnKillEpicPlus : AdvancedHealOnKillCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6.25f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					6.25f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillLegendary";
}

AdvancedHealOnKillLegendary : AdvancedHealOnKillCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 7f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					7f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillLegendaryPlus";
}

[ notQueryable ]
AdvancedHealOnKillLegendaryPlus : AdvancedHealOnKillCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 7.25f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					7.25f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedHealOnKillLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedHealOnKillLegendaryPlusPlus : AdvancedHealOnKillCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 7.5f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					7.5f
				];
			} : HealOnKillUIData;
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "";
}

AdvancedCyberRotorsCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "CyberRotors";
	displayName = "LocKey#40858";
	localizedDescription = "LocKey#40859";
	iconPath = "cw_skeleton_cyberrotors";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.1f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					10f, 2f
				];
			} : CyberRotorsUIData;
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedCyberRotorsStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "CyberRotors";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsCommonPlus";
}

AdvancedCyberRotorsStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.MeleeDamagePercentBonus", "Modifiers.HealingItemsChargesRegenMult", "Modifiers.HealingItemsChargesRegenMultQualityToggle", "Modifiers.GrenadesChargesRegenMult", "Modifiers.GrenadesChargesRegenMultToggle"
	];
}

[ notQueryable ]
AdvancedCyberRotorsCommonPlus : AdvancedCyberRotorsCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.11f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					11f, 2f
				];
			} : CyberRotorsUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsUncommon";
}

AdvancedCyberRotorsUncommon : AdvancedCyberRotorsCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.13f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					13f, 2f
				];
			} : CyberRotorsUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsUncommonPlus";
}

[ notQueryable ]
AdvancedCyberRotorsUncommonPlus : AdvancedCyberRotorsCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.15f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					15f, 2f
				];
			} : CyberRotorsUIData;
		}
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsRare";
}

AdvancedCyberRotorsRare : AdvancedCyberRotorsCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.17f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					17f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsRarePlus";
}

[ notQueryable ]
AdvancedCyberRotorsRarePlus : AdvancedCyberRotorsCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.18f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					18f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsEpic";
}

AdvancedCyberRotorsEpic : AdvancedCyberRotorsCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.2f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					20f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsEpicPlus";
}

[ notQueryable ]
AdvancedCyberRotorsEpicPlus : AdvancedCyberRotorsCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.21f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					21f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsLegendary";
}

AdvancedCyberRotorsLegendary : AdvancedCyberRotorsCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.23f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					23f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsLegendaryPlus";
}

[ notQueryable ]
AdvancedCyberRotorsLegendaryPlus : AdvancedCyberRotorsCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.24f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					24f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedCyberRotorsLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedCyberRotorsLegendaryPlusPlus : AdvancedCyberRotorsCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.MeleeWeaponHeldPrereq";
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.AttackSpeed";
								modifierType = "AdditiveMultiplier";
								value = 0.25f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				floatValues = 
				[
					25f, 2f
				];
			} : CyberRotorsUIData;
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

AdvancedViralVenomBuffEffector : MultiplyDamage
{
	prereqRecord = 
	{
		conditions = 
		[
			{
				checkType = "CheckType.Tag";
				tagToCheck = "Poison";
			} : StatusEffectPresentHitPrereqCondition, 
			{
				targetType = "Player";
				invert = true;
			} : TargetTypeHitPrereqCondition
		];
	} : ProcessHitTriggered;
	value = 1.0f;
}

AdvancedViralVenomDebuffEffector : MultiplyDamage
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				conditions = 
				[
					{
						attackType = "Effect";
					} : AttackTypeHitPrereqCondition, 
					{
						damageType = "Chemical";
					} : DamageTypeHitPrereqCondition, 
					{
						targetType = "Player";
						invert = true;
					} : TargetTypeHitPrereqCondition
				];
			} : ProcessHitTriggered, 
			{
				conditions = 
				[
					{
						attackType = "Hack";
					} : AttackTypeHitPrereqCondition, 
					{
						damageType = "Chemical";
					} : DamageTypeHitPrereqCondition, 
					{
						targetType = "Player";
						invert = true;
					} : TargetTypeHitPrereqCondition
				];
			} : ProcessHitTriggered
		];
	} : ORPrereq;
	value = 0.1f;
}

[ notQueryable ]
AdvancedViralVenomCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "ViralVenom";
	displayName = "LocKey#90911";
	localizedDescription = "LocKey#90912";
	iconPath = "cw_nervoussystem_hardbeat";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity16Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.1f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 10f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedViralVenomStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ViralVenom";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedViralVenomUncommon";
}

AdvancedViralVenomStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.DamageOverTimeResistance", "Modifiers.HealthRegenPercent", "Modifiers.HealthRegenPercentQualityToggle", "Modifiers.HeadshotDamageMultiplier", "Modifiers.HeadshotDamageMultiplierToggle"
	];
}

[ notQueryable ]
AdvancedViralVenomUncommon : AdvancedViralVenomCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.125f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 12.5f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedViralVenomRare";
}

AdvancedViralVenomRare : AdvancedViralVenomCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 10f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomRarePlus";
}

[ notQueryable ]
AdvancedViralVenomRarePlus : AdvancedViralVenomRare
{
	quality = "Quality.RarePlus";
	statModifiers += 
	[
		{
			statType = "BaseStats.IsItemPlus";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.115f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 11.5f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomEpic";
}

AdvancedViralVenomEpic : AdvancedViralVenomCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.14f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 14f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomEpicPlus";
}

[ notQueryable ]
AdvancedViralVenomEpicPlus : AdvancedViralVenomRarePlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.155f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 15.5f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomLegendary";
}

AdvancedViralVenomLegendary : AdvancedViralVenomCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.18f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 18f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomLegendaryPlus";
}

[ notQueryable ]
AdvancedViralVenomLegendaryPlus : AdvancedViralVenomRarePlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.2f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 20f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedViralVenomLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedViralVenomLegendaryPlusPlus : AdvancedViralVenomRarePlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					value = 1.22f;
				} : AdvancedViralVenomBuffEffector, 
				"Items.AdvancedViralVenomDebuffEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#90913";
				floatValues = 
				[
					90f, 22f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

AdvancedCatchMeIfYouCanCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "CatchMeIfYouCan";
	displayName = "LocKey#85347";
	localizedDescription = "LocKey#85348";
	iconPath = "CatchMeIfYouCan";
	quality = "Quality.Common";
	upgradeCostMult = 0.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Intelligence";
			refObject = "Player";
			opSymbol = "*";
			value = 0.05f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity5Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 5;
					maxStacks = 15;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					5f, 15f
				];
			};
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedCatchMeIfYouCanStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "CatchMeIfYouCan";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanCommonPlus";
}

AdvancedCatchMeIfYouCanStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.VisibilityReduction", "Modifiers.VisibilityReductionQualityToggle", "Modifiers.HealingItemsEffectPercentBonus", "Modifiers.HealingItemsEffectPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedCatchMeIfYouCanCommonPlus : AdvancedCatchMeIfYouCanCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 7;
					maxStacks = 17;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					7f, 17f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanUncommon";
}

AdvancedCatchMeIfYouCanUncommon : AdvancedCatchMeIfYouCanCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 10;
					maxStacks = 20;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					10f, 20f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanUncommonPlus";
}

[ notQueryable ]
AdvancedCatchMeIfYouCanUncommonPlus : AdvancedCatchMeIfYouCanCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 12;
					maxStacks = 22;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					12f, 22f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanRare";
}

AdvancedCatchMeIfYouCanRare : AdvancedCatchMeIfYouCanCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 15;
					maxStacks = 25;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					15f, 25f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanRarePlus";
}

[ notQueryable ]
AdvancedCatchMeIfYouCanRarePlus : AdvancedCatchMeIfYouCanCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 17;
					maxStacks = 27;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					17f, 27f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanEpic";
}

AdvancedCatchMeIfYouCanEpic : AdvancedCatchMeIfYouCanCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 20;
					maxStacks = 30;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					20f, 30f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanEpicPlus";
}

[ notQueryable ]
AdvancedCatchMeIfYouCanEpicPlus : AdvancedCatchMeIfYouCanCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 22;
					maxStacks = 32;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					22f, 32f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanLegendary";
}

AdvancedCatchMeIfYouCanLegendary : AdvancedCatchMeIfYouCanCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 25;
					maxStacks = 35;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					25f, 35f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanLegendaryPlus";
}

[ notQueryable ]
AdvancedCatchMeIfYouCanLegendaryPlus : AdvancedCatchMeIfYouCanCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 27;
					maxStacks = 37;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					27f, 37f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "Items.AdvancedCatchMeIfYouCanLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedCatchMeIfYouCanLegendaryPlusPlus : AdvancedCatchMeIfYouCanCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Health";
					statusEffect = "BaseStatusEffect.CatchMeIfYouCanBuff";
					minStacks = 29;
					maxStacks = 39;
					statPoolStep = 2.5f;
					stepUsesPercent = true;
					startingThreshold = 25f;
					thresholdUsesPercent = true;
					inverted = true;
					roundUpwards = true;
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89008";
				intValues = 
				[
					25
				];
				floatValues = 
				[
					29f, 39f
				];
			};
		}, 
		"Attunements.IntelligenceAllDamage"
	];
	nextUpgradeItem = "";
}

AdvancedShockAbsorberCommon : AdvancedCardiovascularSystemModule
{
	string friendlyName = "EnergyStabiliser";
	displayName = "LocKey#93212";
	localizedDescription = "LocKey#93213";
	iconPath = "cw_skeleton_shockabsorber";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.07;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					7f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedShockAbsorberStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ShockAbsorber";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberCommonPlus";
}

AdvancedShockAbsorberStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.ReloadSpeedPercentBonus", "Modifiers.ADSSpeedPercentBonus", "Modifiers.ADSSpeedPercentBonusQualityToggle", "Modifiers.ExplosionResistance", "Modifiers.ExplosionResistanceToggle"
	];
}

[ notQueryable ]
AdvancedShockAbsorberCommonPlus : AdvancedShockAbsorberCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.08;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					8f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberUncommon";
}

AdvancedShockAbsorberUncommon : AdvancedShockAbsorberCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					10f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberUncommonPlus";
}

[ notQueryable ]
AdvancedShockAbsorberUncommonPlus : AdvancedShockAbsorberCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.11;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					11f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberRare";
}

AdvancedShockAbsorberRare : AdvancedShockAbsorberCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					13f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberRarePlus";
}

[ notQueryable ]
AdvancedShockAbsorberRarePlus : AdvancedShockAbsorberCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					14f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberEpic";
}

AdvancedShockAbsorberEpic : AdvancedShockAbsorberCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberEpicPlus";
}

[ notQueryable ]
AdvancedShockAbsorberEpicPlus : AdvancedShockAbsorberCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					16f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberLegendary";
}

AdvancedShockAbsorberLegendary : AdvancedShockAbsorberCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					18f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberLegendaryPlus";
}

[ notQueryable ]
AdvancedShockAbsorberLegendaryPlus : AdvancedShockAbsorberCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					19f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedShockAbsorberLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedShockAbsorberLegendaryPlusPlus : AdvancedShockAbsorberCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#89439";
				floatValues = 
				[
					20f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberRare : AdvancedShockAbsorberRare
{
	displayName = "LocKey#94435";
	localizedDescription = "LocKey#93213";
	tags += 
	[
		"IllegalItem"
	];
	upgradeCostMult = 2.0f;
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	statModifiers = 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier
	];
	variants = 
	[
		"Variants.Humanity40Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					13f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_shock_absorber_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	nextUpgradeItem = "Items.IconicShockAbsorberRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberRarePlus : IconicShockAbsorberRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.14f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					14f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "Items.IconicShockAbsorberEpic";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberEpic : IconicShockAbsorberRare
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "Items.IconicShockAbsorberEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberEpicPlus : IconicShockAbsorberRare
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					16f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "Items.IconicShockAbsorberLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberLegendary : IconicShockAbsorberRare
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.18f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					18f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "Items.IconicShockAbsorberLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberLegendaryPlus : IconicShockAbsorberRare
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					19f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "Items.IconicShockAbsorberLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicShockAbsorberLegendaryPlusPlus : IconicShockAbsorberRare
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.AxeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.BatonStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ChainswordStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.FistsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KatanaStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KnifeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MacheteStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MantisBladesStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MonoWiresStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.StrongArmsStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandHammerStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBladeStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OneHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TwoHandBluntStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HandgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.LightMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.RevolverStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AssaultRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.PrecisionRifleStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SniperStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.DualShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.ShotgunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.SubMachinegunStaminaCostReduction";
					modifierType = "Additive";
					value = 0.20f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				localizedDescription = "LocKey#94514";
				floatValues = 
				[
					20f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IconicReflexesStaminaConsumption"
	];
	nextUpgradeItem = "";
}

