package Items
using RTDB, BaseStats, Perks, Prereqs, Price, Variants, ModifierGroups, Effectors, BaseStatusEffect, Attacks, Attunements, Modifiers

[ notQueryable ]
AdvancedIntegumentarySystemModule : IntegumentarySystemModule
{
	usesVariants = true;
	blueprint = "Items.GenericShardableCyberwareBlueprint";
	slotPartListPreset = 
	[
		"Items.GenericItemRootPreset"
	];
	statModifiers += 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier
	];
}

AdvancedProximityReducerCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "ProximityReducer";
	displayName = "LocKey#85311";
	localizedDescription = "LocKey#85312";
	iconPath = "cw_skeleton_proximityreducer";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 8.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity10CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.92f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					8f, 3f, 6f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedProximityReducerStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ProximityReducer";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedProximityReducerCommonPlus";
}

AdvancedProximityReducerStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.MeleeDamagePercentBonus", "Modifiers.MeleeResistance", "Modifiers.MeleeResistanceQualityToggle", "Modifiers.ExplosionResistance", "Modifiers.ExplosionResistanceToggle"
	];
}

[ notQueryable ]
AdvancedProximityReducer_Q001 : AdvancedProximityReducerCommon
{
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedProximityReducerCommonPlus : AdvancedProximityReducerCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.AdvancedProximityReducerUncommon";
}

AdvancedProximityReducerUncommon : AdvancedProximityReducerCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.89f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					11f, 3f, 6f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedProximityReducerUncommonPlus";
}

[ notQueryable ]
AdvancedProximityReducerUncommonPlus : AdvancedProximityReducerUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedProximityReducerRare";
}

AdvancedProximityReducerRare : AdvancedProximityReducerCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.86f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					14f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedProximityReducerRarePlus";
}

[ notQueryable ]
AdvancedProximityReducerRarePlus : AdvancedProximityReducerRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedProximityReducerEpic";
}

AdvancedProximityReducerEpic : AdvancedProximityReducerCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.83f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					17f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedProximityReducerEpicPlus";
}

[ notQueryable ]
AdvancedProximityReducerEpicPlus : AdvancedProximityReducerEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedProximityReducerLegendary";
}

AdvancedProximityReducerLegendary : AdvancedProximityReducerCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.8f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					20f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.AdvancedProximityReducerLegendaryPlus";
}

[ notQueryable ]
AdvancedProximityReducerLegendaryPlus : AdvancedProximityReducerLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedProximityReducerLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedProximityReducerLegendaryPlusPlus : AdvancedProximityReducerLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedProximityReducerEpic : AdvancedProximityReducerEpic
{
	displayName = "LocKey#94430";
	localizedDescription = "LocKey#85312";
	tags += 
	[
		"IllegalItem"
	];
	quality = "Quality.Epic";
	upgradeCostMult = 2.0f;
	statModifiers = 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 30.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier
	];
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	variants = 
	[
		"Variants.Humanity30CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.66f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					34f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_proximity_reducer_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	nextUpgradeItem = "Items.IconicAdvancedProximityReducerEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedProximityReducerEpicPlus : IconicAdvancedProximityReducerEpic
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.64f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					36f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.IconicAdvancedProximityReducerLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedProximityReducerLegendary : AdvancedProximityReducerLegendary
{
	displayName = "LocKey#94430";
	localizedDescription = "LocKey#85312";
	quality = "Quality.Legendary";
	upgradeCostMult = 2.0f;
	statModifiers = 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 30.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier
	];
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	variants = 
	[
		"Variants.Humanity30CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.6f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					40f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_proximity_reducer_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	nextUpgradeItem = "Items.IconicAdvancedProximityReducerLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedProximityReducerLegendaryPlus : IconicAdvancedProximityReducerLegendary
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.58f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					42f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "Items.IconicAdvancedProximityReducerLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedProximityReducerLegendaryPlusPlus : IconicAdvancedProximityReducerLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					percentMult = 0.55f;
					minDistance = 3f;
					maxDistance = 6f;
					improveWithDistance = false;
				} : ModifyDamageWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#88875";
				floatValues = 
				[
					45f, 3f, 6f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyHealth"
	];
	nextUpgradeItem = "";
}

AdvancedSuddenAidCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "SuddenAid";
	displayName = "LocKey#85313";
	localizedDescription = "LocKey#85314";
	iconPath = "cw_skeleton_suddenaid";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 17.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 10.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 10.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						checkType = "CheckType.Tag";
						tagToCheck = "SuddenAidCooldown";
					} : Prereqs.StatusEffectAbsentPrereq;
					effectorToApply = 
					{
						prereqRecord = 
						{
							valueToCheck = 35;
							timeFrame = 3;
						} : Prereqs.HealthLostOverTimePrereq;
						statusEffect = 
						{
							packages += 
							[
								{
									stats = 
									[
										{
											statType = "BaseStats.MitigationChance";
											modifierType = "Additive";
											value = 30f;
										} : ConstantStatModifier
									];
								} : GameplayLogicPackage
							];
						} : BaseStatusEffect.SuddenAidBuff;
						removeWithEffector = false;
						removeAfterActionCall = true;
					} : ApplyStatusEffectEffector;
				} : ApplyEffectorOnPlayer
			];
			UIData = 
			{
				localizedDescription = "LocKey#88788";
				floatValues = 
				[
					35f, 3f, 30f, 4f
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedSuddenAidStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "SuddenAid";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedSuddenAidCommonPlus";
}

AdvancedSuddenAidStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.HealingItemsEffectPercentBonus", "Modifiers.HealthRegenPercent", "Modifiers.HealthRegenPercentQualityToggle", "Modifiers.HealingItemsChargesRegenMult", "Modifiers.HealingItemsChargesRegenMultToggle"
	];
}

[ notQueryable ]
AdvancedSuddenAidCommonPlus : AdvancedSuddenAidCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.AdvancedSuddenAidUncommon";
}

AdvancedSuddenAidUncommon : AdvancedSuddenAidCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						checkType = "CheckType.Tag";
						tagToCheck = "SuddenAidCooldown";
					} : Prereqs.StatusEffectAbsentPrereq;
					effectorToApply = 
					{
						prereqRecord = 
						{
							valueToCheck = 35;
							timeFrame = 3;
						} : Prereqs.HealthLostOverTimePrereq;
						statusEffect = 
						{
							packages += 
							[
								{
									stats = 
									[
										{
											statType = "BaseStats.MitigationChance";
											modifierType = "Additive";
											value = 35f;
										} : ConstantStatModifier
									];
								} : GameplayLogicPackage
							];
						} : BaseStatusEffect.SuddenAidBuff;
						removeWithEffector = false;
						removeAfterActionCall = true;
					} : ApplyStatusEffectEffector;
				} : ApplyEffectorOnPlayer
			];
			UIData = 
			{
				localizedDescription = "LocKey#88788";
				floatValues = 
				[
					35f, 3f, 35f, 4f
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedSuddenAidUncommonPlus";
}

[ notQueryable ]
AdvancedSuddenAidUncommonPlus : AdvancedSuddenAidUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedSuddenAidRare";
}

AdvancedSuddenAidRare : AdvancedSuddenAidCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						checkType = "CheckType.Tag";
						tagToCheck = "SuddenAidCooldown";
					} : Prereqs.StatusEffectAbsentPrereq;
					effectorToApply = 
					{
						prereqRecord = 
						{
							valueToCheck = 35;
							timeFrame = 3;
						} : Prereqs.HealthLostOverTimePrereq;
						statusEffect = 
						{
							packages += 
							[
								{
									stats = 
									[
										{
											statType = "BaseStats.MitigationChance";
											modifierType = "Additive";
											value = 40f;
										} : ConstantStatModifier
									];
								} : GameplayLogicPackage
							];
						} : BaseStatusEffect.SuddenAidBuff;
						removeWithEffector = false;
						removeAfterActionCall = true;
					} : ApplyStatusEffectEffector;
				} : ApplyEffectorOnPlayer
			];
			UIData = 
			{
				localizedDescription = "LocKey#88788";
				floatValues = 
				[
					35f, 3f, 40f, 4f
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedSuddenAidRarePlus";
}

[ notQueryable ]
AdvancedSuddenAidRarePlus : AdvancedSuddenAidRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedSuddenAidEpic";
}

AdvancedSuddenAidEpic : AdvancedSuddenAidCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						checkType = "CheckType.Tag";
						tagToCheck = "SuddenAidCooldown";
					} : Prereqs.StatusEffectAbsentPrereq;
					effectorToApply = 
					{
						prereqRecord = 
						{
							valueToCheck = 35;
							timeFrame = 3;
						} : Prereqs.HealthLostOverTimePrereq;
						statusEffect = 
						{
							packages += 
							[
								{
									stats = 
									[
										{
											statType = "BaseStats.MitigationChance";
											modifierType = "Additive";
											value = 45f;
										} : ConstantStatModifier
									];
								} : GameplayLogicPackage
							];
						} : BaseStatusEffect.SuddenAidBuff;
						removeWithEffector = false;
						removeAfterActionCall = true;
					} : ApplyStatusEffectEffector;
				} : ApplyEffectorOnPlayer
			];
			UIData = 
			{
				localizedDescription = "LocKey#88788";
				floatValues = 
				[
					35f, 3f, 45f, 4f
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedSuddenAidEpicPlus";
}

[ notQueryable ]
AdvancedSuddenAidEpicPlus : AdvancedSuddenAidEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedSuddenAidLegendary";
}

AdvancedSuddenAidLegendary : AdvancedSuddenAidCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						checkType = "CheckType.Tag";
						tagToCheck = "SuddenAidCooldown";
					} : Prereqs.StatusEffectAbsentPrereq;
					effectorToApply = 
					{
						prereqRecord = 
						{
							valueToCheck = 35;
							timeFrame = 3;
						} : Prereqs.HealthLostOverTimePrereq;
						statusEffect = 
						{
							packages += 
							[
								{
									stats = 
									[
										{
											statType = "BaseStats.MitigationChance";
											modifierType = "Additive";
											value = 50f;
										} : ConstantStatModifier
									];
								} : GameplayLogicPackage
							];
						} : BaseStatusEffect.SuddenAidBuff;
						removeWithEffector = false;
						removeAfterActionCall = true;
					} : ApplyStatusEffectEffector;
				} : ApplyEffectorOnPlayer
			];
			UIData = 
			{
				localizedDescription = "LocKey#88788";
				floatValues = 
				[
					35f, 3f, 50f, 4f
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedSuddenAidLegendaryPlus";
}

[ notQueryable ]
AdvancedSuddenAidLegendaryPlus : AdvancedSuddenAidLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedSuddenAidLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedSuddenAidLegendaryPlusPlus : AdvancedSuddenAidLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedBloodDepleterCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "BloodDepleter";
	displayName = "LocKey#85315";
	localizedDescription = "LocKey#85316";
	iconPath = "cw_nervoussystem_painducer";
	quality = "Quality.Common";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 42.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 24.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 24.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity30CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Effect";
								invert = true;
							} : Prereqs.AttackTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					operationType = "Multiply";
					value = 0.75f;
				} : ModifyDamageEffector, 
				{
					damageConversion = 0.25f;
				} : Effectors.ConvertDamageToDoTEffector, 
				"Effectors.ApplyAccumulatedDoTEffector"
			];
			UIData = 
			{
				localizedDescription = "LocKey#88970";
				floatValues = 
				[
					25f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyDOTReduce"
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedBloodDepleterStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "BloodDepleter";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedBloodDepleterUncommon";
}

AdvancedBloodDepleterStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.HealingItemsEffectPercentBonus", "Modifiers.PercentDamageReductionFromPoisonedEnemies", "Modifiers.PercentDamageReductionFromPoisonedEnemiesQualityToggle", "Modifiers.Armor", "Modifiers.ArmorToggle"
	];
}

[ notQueryable ]
AdvancedBloodDepleterUncommon : AdvancedBloodDepleterCommon
{
	quality = "Quality.Uncommon";
	nextUpgradeItem = "Items.AdvancedBloodDepleterRare";
}

[ notQueryable ]
AdvancedBloodDepleterRare : AdvancedBloodDepleterCommon
{
	quality = "Quality.Rare";
	nextUpgradeItem = "Items.AdvancedBloodDepleterEpic";
}

AdvancedBloodDepleterEpic : AdvancedBloodDepleterCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Effect";
								invert = true;
							} : Prereqs.AttackTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					operationType = "Multiply";
					value = 0.75f;
				} : ModifyDamageEffector, 
				{
					damageConversion = 0.25f;
				} : Effectors.ConvertDamageToDoTEffector, 
				"Effectors.ApplyAccumulatedDoTEffector", {
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								conditions = 
								[
									{
										dotType = "AccumulatedDoT";
									} : DamageOverTimeTypeHitPrereqCondition
								];
							} : ProcessHitReceived, 
							{
								stateName = "InCombat";
								isInState = false;
							} : Prereqs.CombatPSMPrereq
						];
					} : ANDPrereq;
					hitFlag = "CannotKillPlayer";
				} : AddHitFlagToAttackEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88970";
				floatValues = 
				[
					25f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyDOTReduce"
	];
	nextUpgradeItem = "Items.AdvancedBloodDepleterEpicPlus";
}

[ notQueryable ]
AdvancedBloodDepleterEpicPlus : AdvancedBloodDepleterEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedBloodDepleterLegendary";
}

AdvancedBloodDepleterLegendary : AdvancedBloodDepleterEpic
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Effect";
								invert = true;
							} : Prereqs.AttackTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					operationType = "Multiply";
					value = 0.7f;
				} : ModifyDamageEffector, 
				{
					damageConversion = 0.3f;
				} : Effectors.ConvertDamageToDoTEffector, 
				"Effectors.ApplyAccumulatedDoTEffector", {
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								conditions = 
								[
									{
										dotType = "AccumulatedDoT";
									} : DamageOverTimeTypeHitPrereqCondition
								];
							} : ProcessHitReceived, 
							{
								stateName = "InCombat";
								isInState = false;
							} : Prereqs.CombatPSMPrereq
						];
					} : ANDPrereq;
					hitFlag = "CannotKillPlayer";
				} : AddHitFlagToAttackEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88970";
				floatValues = 
				[
					30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.BodyDOTReduce"
	];
	nextUpgradeItem = "Items.AdvancedBloodDepleterLegendaryPlus";
}

[ notQueryable ]
AdvancedBloodDepleterLegendaryPlus : AdvancedBloodDepleterLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedBloodDepleterLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedBloodDepleterLegendaryPlusPlus : AdvancedBloodDepleterLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

AdvancedWeirdTankyPlatingCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "WeirdTankyPlating";
	displayName = "LocKey#85317";
	localizedDescription = "LocKey#85318";
	iconPath = "cw_skeleton_weirdtankyplating";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 24.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 14.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 14.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity16CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					effectorClassName = "WeirdTankyPlatingEffector";
					float armorMultiplier = 0.16f;
				} : Effector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88971";
				floatValues = 
				[
					16f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedWeirdTankyPlatingStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "WeirdTankyPlating";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingUncommon";
}

AdvancedWeirdTankyPlatingStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.VisibilityReduction", "Modifiers.BonusRicochetDamage", "Modifiers.BonusRicochetDamageQualityToggle", "Modifiers.GrenadesChargesRegenMult", "Modifiers.GrenadesChargesRegenMultToggle"
	];
}

AdvancedWeirdTankyPlatingUncommon : AdvancedWeirdTankyPlatingCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					effectorClassName = "WeirdTankyPlatingEffector";
					float armorMultiplier = 0.2f;
				} : Effector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88971";
				floatValues = 
				[
					20f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingUncommonPlus";
}

[ notQueryable ]
AdvancedWeirdTankyPlatingUncommonPlus : AdvancedWeirdTankyPlatingUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingRare";
}

AdvancedWeirdTankyPlatingRare : AdvancedWeirdTankyPlatingCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					effectorClassName = "WeirdTankyPlatingEffector";
					float armorMultiplier = 0.24f;
				} : Effector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88971";
				floatValues = 
				[
					24f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.TechArmor"
	];
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingRarePlus";
}

[ notQueryable ]
AdvancedWeirdTankyPlatingRarePlus : AdvancedWeirdTankyPlatingRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingEpic";
}

AdvancedWeirdTankyPlatingEpic : AdvancedWeirdTankyPlatingCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					effectorClassName = "WeirdTankyPlatingEffector";
					float armorMultiplier = 0.28f;
				} : Effector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88971";
				floatValues = 
				[
					28f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.TechArmor"
	];
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingEpicPlus";
}

[ notQueryable ]
AdvancedWeirdTankyPlatingEpicPlus : AdvancedWeirdTankyPlatingEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingLegendary";
}

AdvancedWeirdTankyPlatingLegendary : AdvancedWeirdTankyPlatingCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					effectorClassName = "WeirdTankyPlatingEffector";
					float armorMultiplier = 0.32f;
				} : Effector
			];
			UIData = 
			{
				localizedDescription = "LocKey#88971";
				floatValues = 
				[
					32f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.TechArmor"
	];
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingLegendaryPlus";
}

[ notQueryable ]
AdvancedWeirdTankyPlatingLegendaryPlus : AdvancedWeirdTankyPlatingLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedWeirdTankyPlatingLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedWeirdTankyPlatingLegendaryPlusPlus : AdvancedWeirdTankyPlatingLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedNanoTechPlatesCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "NanoTechPlates";
	displayName = "LocKey#85323";
	localizedDescription = "LocKey#85324";
	iconPath = "cw_skeleton_nanotechplates";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 28.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 10.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 10.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity20CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88994";
				floatValues = 
				[
					3f, 100f, 1.3f, 3, 7
				];
			};
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					chanceToTrigger = 0.03f;
					float chanceIncrement = 1f;
					nanoPlatesStacks = 3;
					timeWindow = 7;
				} : NanoTechPlatesEffector, 
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								statusEffect = "BaseStatusEffect.DodgeBuff";
							} : StatusEffectPrereq, 
							{
								statusEffect = "BaseStatusEffect.PlayerExhausted";
							} : StatusEffectAbsentPrereq, 
							{
								statusEffect = "BaseStatusEffect.NanoTechPlatesUnavailableStatusEffect";
							} : StatusEffectAbsentPrereq
						];
					} : ANDPrereq;
					statusEffect = 
					{
						duration = 
						{
							statModifiers = 
							[
								{
									value = 1.3f;
								} : BaseDurationMod
							];
						};
					} : NanoTechPlatesMainEffect;
					removeWithEffector = false;
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedNanoTechPlatesStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "NanoTechPlates";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesUncommon";
}

AdvancedNanoTechPlatesStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.VisibilityReduction", "Modifiers.BonusRicochetDamage", "Modifiers.BonusRicochetDamageQualityToggle", "Modifiers.MeleeDamagePercentBonus", "Modifiers.MeleeDamagePercentBonusToggle"
	];
}

AdvancedNanoTechPlatesUncommon : AdvancedNanoTechPlatesCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88994";
				floatValues = 
				[
					4f, 100f, 1.4f, 3, 6.5
				];
			};
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					chanceToTrigger = 0.04f;
					float chanceIncrement = 1f;
					nanoPlatesStacks = 3;
					timeWindow = 6.5;
				} : NanoTechPlatesEffector, 
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								statusEffect = "BaseStatusEffect.DodgeBuff";
							} : StatusEffectPrereq, 
							{
								statusEffect = "BaseStatusEffect.PlayerExhausted";
							} : StatusEffectAbsentPrereq, 
							{
								statusEffect = "BaseStatusEffect.NanoTechPlatesUnavailableStatusEffect";
							} : StatusEffectAbsentPrereq
						];
					} : ANDPrereq;
					statusEffect = 
					{
						duration = 
						{
							statModifiers = 
							[
								{
									value = 1.4f;
								} : BaseDurationMod
							];
						};
					} : NanoTechPlatesMainEffect;
					removeWithEffector = false;
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesUncommonPlus";
}

[ notQueryable ]
AdvancedNanoTechPlatesUncommonPlus : AdvancedNanoTechPlatesUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesRare";
}

AdvancedNanoTechPlatesRare : AdvancedNanoTechPlatesCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88994";
				floatValues = 
				[
					5f, 100f, 1.5f, 3, 6
				];
			};
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					chanceToTrigger = 0.05f;
					float chanceIncrement = 1f;
					nanoPlatesStacks = 3;
					timeWindow = 6;
				} : NanoTechPlatesEffector, 
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								statusEffect = "BaseStatusEffect.DodgeBuff";
							} : StatusEffectPrereq, 
							{
								statusEffect = "BaseStatusEffect.PlayerExhausted";
							} : StatusEffectAbsentPrereq, 
							{
								statusEffect = "BaseStatusEffect.NanoTechPlatesUnavailableStatusEffect";
							} : StatusEffectAbsentPrereq
						];
					} : ANDPrereq;
					statusEffect = 
					{
						duration = 
						{
							statModifiers = 
							[
								{
									value = 1.5f;
								} : BaseDurationMod
							];
						};
					} : NanoTechPlatesMainEffect;
					removeWithEffector = false;
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesRarePlus";
}

[ notQueryable ]
AdvancedNanoTechPlatesRarePlus : AdvancedNanoTechPlatesRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesEpic";
}

AdvancedNanoTechPlatesEpic : AdvancedNanoTechPlatesCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88994";
				floatValues = 
				[
					6f, 100f, 1.6f, 3, 5.5
				];
			};
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					chanceToTrigger = 0.06f;
					float chanceIncrement = 1f;
					nanoPlatesStacks = 3;
					timeWindow = 5.5;
				} : NanoTechPlatesEffector, 
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								statusEffect = "BaseStatusEffect.DodgeBuff";
							} : StatusEffectPrereq, 
							{
								statusEffect = "BaseStatusEffect.PlayerExhausted";
							} : StatusEffectAbsentPrereq, 
							{
								statusEffect = "BaseStatusEffect.NanoTechPlatesUnavailableStatusEffect";
							} : StatusEffectAbsentPrereq
						];
					} : ANDPrereq;
					statusEffect = 
					{
						duration = 
						{
							statModifiers = 
							[
								{
									value = 1.6f;
								} : BaseDurationMod
							];
						};
					} : NanoTechPlatesMainEffect;
					removeWithEffector = false;
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesEpicPlus";
}

[ notQueryable ]
AdvancedNanoTechPlatesEpicPlus : AdvancedNanoTechPlatesEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesLegendary";
}

AdvancedNanoTechPlatesLegendary : AdvancedNanoTechPlatesCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88994";
				floatValues = 
				[
					7f, 100f, 1.7f, 3, 5
				];
			};
			effectors = 
			[
				{
					prereqRecord = 
					{
						conditions = 
						[
							{
								attackType = "Ranged";
							} : AttackTypeHitPrereqCondition, 
							{
								weaponType = "Ranged";
							} : WeaponTypeHitPrereqCondition
						];
					} : ProcessHitReceived;
					chanceToTrigger = 0.07f;
					float chanceIncrement = 1f;
					nanoPlatesStacks = 3;
					timeWindow = 5;
				} : NanoTechPlatesEffector, 
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							{
								statusEffect = "BaseStatusEffect.DodgeBuff";
							} : StatusEffectPrereq, 
							{
								statusEffect = "BaseStatusEffect.PlayerExhausted";
							} : StatusEffectAbsentPrereq, 
							{
								statusEffect = "BaseStatusEffect.NanoTechPlatesUnavailableStatusEffect";
							} : StatusEffectAbsentPrereq
						];
					} : ANDPrereq;
					statusEffect = 
					{
						duration = 
						{
							statModifiers = 
							[
								{
									value = 1.7f;
								} : BaseDurationMod
							];
						};
					} : NanoTechPlatesMainEffect;
					removeWithEffector = false;
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesLegendaryPlus";
}

[ notQueryable ]
AdvancedNanoTechPlatesLegendaryPlus : AdvancedNanoTechPlatesLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedNanoTechPlatesLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedNanoTechPlatesLegendaryPlusPlus : AdvancedNanoTechPlatesLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedPlatingGlitchCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "PlatingGlitch";
	displayName = "LocKey#85325";
	localizedDescription = "LocKey#85326";
	iconPath = "cw_skeleton_platingglitch";
	quality = "Quality.Common";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 24.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 14.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 14.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity20CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88993";
				floatValues = 
				[
					100f, 2f
				];
			};
			stats = 
			[
				{
					statType = "BaseStats.HasPlatingGlitch";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						prereqClassName = "StatusEffectRemovedPrereq";
						statusEffect = "BaseStatusEffect.KerenzikovPlayerBuff";
						checkType = "CheckType.Record";
						bool fireAndForget = true;
					} : StatusEffectPrereq;
					statusEffect = "BaseStatusEffect.PlatingGlitchBuffCommon";
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedPlatingGlitchStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "PlatingGlitch";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedPlatingGlitchUncommon";
}

AdvancedPlatingGlitchStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.RecoilPercentBonus", "Modifiers.DamageOverTimeResistance", "Modifiers.DamageOverTimeResistanceQualityToggle", "Modifiers.HeadshotDamageMultiplier", "Modifiers.HeadshotDamageMultiplierToggle"
	];
}

[ notQueryable ]
AdvancedPlatingGlitchUncommon : AdvancedPlatingGlitchCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88993";
				floatValues = 
				[
					100f, 2.5f
				];
			};
			stats = 
			[
				{
					statType = "BaseStats.HasPlatingGlitch";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						prereqClassName = "StatusEffectRemovedPrereq";
						statusEffect = "BaseStatusEffect.KerenzikovPlayerBuff";
						checkType = "CheckType.Record";
						bool fireAndForget = true;
					} : StatusEffectPrereq;
					statusEffect = "BaseStatusEffect.PlatingGlitchBuffUncommon";
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedPlatingGlitchRare";
}

AdvancedPlatingGlitchRare : AdvancedPlatingGlitchCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88993";
				floatValues = 
				[
					50f, 3f
				];
			};
			stats = 
			[
				{
					statType = "BaseStats.HasPlatingGlitch";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						prereqClassName = "StatusEffectRemovedPrereq";
						statusEffect = "BaseStatusEffect.KerenzikovPlayerBuff";
						checkType = "CheckType.Record";
						bool fireAndForget = true;
					} : StatusEffectPrereq;
					statusEffect = "BaseStatusEffect.PlatingGlitchBuffRare";
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedPlatingGlitchRarePlus";
}

[ notQueryable ]
AdvancedPlatingGlitchRarePlus : AdvancedPlatingGlitchRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedPlatingGlitchEpic";
}

AdvancedPlatingGlitchEpic : AdvancedPlatingGlitchCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88993";
				floatValues = 
				[
					70f, 3.5f
				];
			};
			stats = 
			[
				{
					statType = "BaseStats.HasPlatingGlitch";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						prereqClassName = "StatusEffectRemovedPrereq";
						statusEffect = "BaseStatusEffect.KerenzikovPlayerBuff";
						checkType = "CheckType.Record";
						bool fireAndForget = true;
					} : StatusEffectPrereq;
					statusEffect = "BaseStatusEffect.PlatingGlitchBuffEpic";
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedPlatingGlitchEpicPlus";
}

[ notQueryable ]
AdvancedPlatingGlitchEpicPlus : AdvancedPlatingGlitchEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedPlatingGlitchLegendary";
}

AdvancedPlatingGlitchLegendary : AdvancedPlatingGlitchCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#88993";
				floatValues = 
				[
					90f, 4f
				];
			};
			stats = 
			[
				{
					statType = "BaseStats.HasPlatingGlitch";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = 
					{
						prereqClassName = "StatusEffectRemovedPrereq";
						statusEffect = "BaseStatusEffect.KerenzikovPlayerBuff";
						checkType = "CheckType.Record";
						bool fireAndForget = true;
					} : StatusEffectPrereq;
					statusEffect = "BaseStatusEffect.PlatingGlitchBuffLegendary";
				} : ApplyStatusEffectEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedPlatingGlitchLegendaryPlus";
}

[ notQueryable ]
AdvancedPlatingGlitchLegendaryPlus : AdvancedPlatingGlitchLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedPlatingGlitchLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedPlatingGlitchLegendaryPlusPlus : AdvancedPlatingGlitchLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

AdvancedBoringPlatingCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "BoringPlating";
	displayName = "LocKey#40809";
	localizedDescription = "LocKey#85338";
	iconPath = "cw_integumentary_subdermalarmorcommon";
	quality = "Quality.Common";
	upgradeCostMult = 0.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 17.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 8.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 3.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedBoringPlatingStatsShard";
		} : StatsShardSlotPart
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#93622";
			};
		} : GameplayLogicPackage
	];
	variants = 
	[
		"Variants.Humanity5CostTinkererVariant"
	];
	CName cyberwareType = "BoringPlating";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingCommonPlus";
}

AdvancedBoringPlatingStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.VisibilityReduction", "Modifiers.VisibilityReductionQualityToggle", "Modifiers.MeleeResistance", "Modifiers.MeleeResistanceToggle"
	];
}

[ notQueryable ]
AdvancedBoringPlating_Q001 : AdvancedBoringPlatingCommon
{
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlatingCommonPlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.AdvancedBoringPlatingUncommon";
}

AdvancedBoringPlatingUncommon : AdvancedBoringPlatingCommon
{
	quality = "Quality.Uncommon";
	nextUpgradeItem = "Items.AdvancedBoringPlatingUncommonPlus";
}

[ notQueryable ]
AdvancedBoringPlatingUncommonPlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedBoringPlatingRare";
}

AdvancedBoringPlatingRare : AdvancedBoringPlatingCommon
{
	quality = "Quality.Rare";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingRarePlus";
}

[ notQueryable ]
AdvancedBoringPlatingRarePlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.RarePlus";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingEpic";
}

AdvancedBoringPlatingEpic : AdvancedBoringPlatingCommon
{
	quality = "Quality.Epic";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingEpicPlus";
}

[ notQueryable ]
AdvancedBoringPlatingEpicPlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.EpicPlus";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingLegendary";
}

AdvancedBoringPlatingLegendary : AdvancedBoringPlatingCommon
{
	quality = "Quality.Legendary";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingLegendaryPlus";
}

[ notQueryable ]
AdvancedBoringPlatingLegendaryPlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "Items.AdvancedBoringPlatingLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedBoringPlatingLegendaryPlusPlus : AdvancedBoringPlatingCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip += 
	[
		"Attunements.TechArmorNoLineBreak"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "Chiton";
	displayName = "LocKey#94437";
	localizedDescription = "LocKey#85338";
	iconPath = "cw_integumentary_subdermalarmor_iconic";
	tags += 
	[
		"IllegalItem"
	];
	quality = "Quality.Common";
	upgradeCostMult = 2.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 80.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 30.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 16.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Strength";
			refObject = "Player";
			opSymbol = "*";
			value = 10f;
		} : CombinedStatModifier
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedChitonStatsShard";
		} : StatsShardSlotPart
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#94488";
			};
		} : GameplayLogicPackage
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_chiton_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	variants = 
	[
		"Variants.Humanity50CostTinkererVariant"
	];
	CName cyberwareType = "Chiton";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonCommonPlus";
}

AdvancedChitonStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.HealthRegenPercent", "Modifiers.Health", "Modifiers.HealthQualityToggle", "Modifiers.ChemicalResistance", "Modifiers.ChemicalResistanceToggle"
	];
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonCommonPlus : IconicAdvancedChitonCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.IconicAdvancedChitonUncommon";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonUncommon : IconicAdvancedChitonCommon
{
	quality = "Quality.Uncommon";
	nextUpgradeItem = "Items.IconicAdvancedChitonUncommonPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonUncommonPlus : IconicAdvancedChitonCommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.IconicAdvancedChitonRare";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonRare : IconicAdvancedChitonCommon
{
	quality = "Quality.Rare";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonRarePlus : IconicAdvancedChitonCommon
{
	quality = "Quality.RarePlus";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonEpic";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonEpic : IconicAdvancedChitonCommon
{
	quality = "Quality.Epic";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonEpicPlus : IconicAdvancedChitonCommon
{
	quality = "Quality.EpicPlus";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonLegendary : IconicAdvancedChitonCommon
{
	quality = "Quality.Legendary";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonLegendaryPlus : IconicAdvancedChitonCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "Items.IconicAdvancedChitonLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedChitonLegendaryPlusPlus : IconicAdvancedChitonCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip += 
	[
		"Attunements.BodyHealthRegen"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_CommonPlus : AdvancedBoringPlatingCommonPlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_Uncommon : AdvancedBoringPlatingUncommon
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_UncommonPlus : AdvancedBoringPlatingUncommonPlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_Rare : AdvancedBoringPlatingRare
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_RarePlus : AdvancedBoringPlatingRarePlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_Epic : AdvancedBoringPlatingEpic
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_EpicPlus : AdvancedBoringPlatingEpicPlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_Legendary : AdvancedBoringPlatingLegendary
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedBoringPlating_Tutorial_LegendaryPlus : AdvancedBoringPlatingLegendaryPlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
[ EP1 ]
AdvancedBoringPlating_Tutorial_LegendaryPlusPlus : AdvancedBoringPlatingLegendaryPlusPlus
{
	tags += 
	[
		"MustBeWearableToPurchase"
	];
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

AdvancedChargeSystemCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "ChargeSystem";
	displayName = "LocKey#85339";
	localizedDescription = "LocKey#85340";
	iconPath = "cw_integumentary_extra";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 10.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 6.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 6.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity14CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90910";
				floatValues = 
				[
					6f, 30f
				];
			};
			effectors = 
			[
				{
					maxDistance = 6f;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 30;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.LimfaticNanoChargeSystemBuff;
				} : LimfaticNanoChargeSystemEffector
			];
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedChargeSystemStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ChargeSystem";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedChargeSystemCommonPlus";
}

AdvancedChargeSystemStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.StealthHitDamageBonus", "Modifiers.RamOnKill", "Modifiers.RamOnKillQualityToggle", "Modifiers.ExplosionDamagePercentBonus", "Modifiers.ExplosionDamagePercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedChargeSystem_Q001 : AdvancedChargeSystemCommon
{
	buyPrice += 
	[
		"Price.PostCyberwareTutorialPrice"
	];
	sellPrice = [];
}

[ notQueryable ]
AdvancedChargeSystemCommonPlus : AdvancedChargeSystemCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.AdvancedChargeSystemUncommon";
}

AdvancedChargeSystemUncommon : AdvancedChargeSystemCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90910";
				floatValues = 
				[
					6f, 45f
				];
			};
			effectors = 
			[
				{
					maxDistance = 6f;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 45;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.LimfaticNanoChargeSystemBuff;
				} : LimfaticNanoChargeSystemEffector
			];
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedChargeSystemUncommonPlus";
}

[ notQueryable ]
AdvancedChargeSystemUncommonPlus : AdvancedChargeSystemUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedChargeSystemRare";
}

AdvancedChargeSystemRare : AdvancedChargeSystemCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90910";
				floatValues = 
				[
					6f, 60f
				];
			};
			effectors = 
			[
				{
					maxDistance = 6f;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 60;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.LimfaticNanoChargeSystemBuff;
				} : LimfaticNanoChargeSystemEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedChargeSystemRarePlus";
}

[ notQueryable ]
AdvancedChargeSystemRarePlus : AdvancedChargeSystemRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedChargeSystemEpic";
}

AdvancedChargeSystemEpic : AdvancedChargeSystemCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90910";
				floatValues = 
				[
					6f, 75f
				];
			};
			effectors = 
			[
				{
					maxDistance = 6f;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 75;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.LimfaticNanoChargeSystemBuff;
				} : LimfaticNanoChargeSystemEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedChargeSystemEpicPlus";
}

[ notQueryable ]
AdvancedChargeSystemEpicPlus : AdvancedChargeSystemEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedChargeSystemLegendary";
}

AdvancedChargeSystemLegendary : AdvancedChargeSystemCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90910";
				floatValues = 
				[
					6f, 90f
				];
			};
			effectors = 
			[
				{
					maxDistance = 6f;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 90;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.LimfaticNanoChargeSystemBuff;
				} : LimfaticNanoChargeSystemEffector
			];
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedChargeSystemLegendaryPlus";
}

[ notQueryable ]
AdvancedChargeSystemLegendaryPlus : AdvancedChargeSystemLegendary
{
	quality = "Quality.LegendaryPlus";
	[ EP1 ]
	nextUpgradeItem = "Items.AdvancedChargeSystemLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedChargeSystemLegendaryPlusPlus : AdvancedChargeSystemLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedOpticalCamoCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "OpticalCamo";
	displayName = "LocKey#3702";
	localizedDescription = "LocKey#3710";
	iconPath = "cw_integumentary_opticalcamo";
	itemType = "ItemType.Cyb_Ability";
	float exitCombatDelay = 1.5;
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 10.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 5.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity20CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 75;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 3;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier
			];
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					4
				];
			};
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedOpticalCamoStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "OpticalCamo";
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoCommon"
	];
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoUncommon";
}

AdvancedOpticalCamoStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.VisibilityReduction", "Modifiers.StealthHitDamageBonus", "Modifiers.StealthHitDamageBonusQualityToggle", "Modifiers.DamageOverTimePercentBonus", "Modifiers.DamageOverTimePercentBonusToggle"
	];
}

AdvancedOpticalCamoUncommon : AdvancedOpticalCamoCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 70;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 4;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoRare";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					30, 4, 70
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					70
				];
			};
		} : GameplayLogicPackage
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoUncommon"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoUncommonPlus";
}

[ notQueryable ]
AdvancedOpticalCamoUncommonPlus : AdvancedOpticalCamoUncommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 70;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 4;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoRare";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					30, 4, 70
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					70
				];
			};
		} : GameplayLogicPackage
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoUncommon"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoRare";
}

AdvancedOpticalCamoRare : AdvancedOpticalCamoCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 60;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 5;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoRare";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					50, 5
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoRare"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoRarePlus";
}

[ notQueryable ]
AdvancedOpticalCamoRarePlus : AdvancedOpticalCamoRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 60;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 5;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoRare";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					50, 5
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoRare"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoEpic";
}

AdvancedOpticalCamoEpic : AdvancedOpticalCamoCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 55;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 6;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					70, 6
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					bool usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					55
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoEpic"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoEpicPlus";
}

[ notQueryable ]
AdvancedOpticalCamoEpicPlus : AdvancedOpticalCamoEpic
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 55;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 6;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					70, 6
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					bool usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					55
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoEpic"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoLegendary";
}

AdvancedOpticalCamoLegendary : AdvancedOpticalCamoCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 50;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 7;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoLegendary";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					90, 7
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					bool usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoLegendary"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoLegendaryPlus";
}

[ notQueryable ]
AdvancedOpticalCamoLegendaryPlus : AdvancedOpticalCamoLegendary
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 50;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 7;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoLegendary";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					90, 7
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					bool usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoLegendary"
	];
	nextUpgradeItem = "Items.AdvancedOpticalCamoLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedOpticalCamoLegendaryPlusPlus : AdvancedOpticalCamoLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.OpticalCamoRechargeDuration";
					modifierType = "Additive";
					value = 50;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoDuration";
					modifierType = "Additive";
					value = 7;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Additive";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoRechargeDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.OpticalCamoCharges";
					modifierType = "Multiplier";
					refObject = "Self";
					refStat = "BaseStats.OpticalCamoDuration";
					opSymbol = "*";
					value = 1f;
				} : CombinedStatModifier, 
				{
					statType = "BaseStats.HasOpticalCamoLegendary";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40818";
				intValues = 
				[
					90, 7
				];
			};
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.OpticalCamoCharges";
							statPoolValue = 100;
						} : StatPoolUpdate
					];
					bool usePercent = true;
				} : ModifyStatPoolValueEffector
			];
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#43472";
			};
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolOpticalDuration"
	];
	objectActions = 
	[
		"CyberwareAction.UseOpticalCamoLegendary"
	];
	nextUpgradeItem = "";
}

AdvancedElectroshockMechanismCommon : AdvancedIntegumentarySystemModule
{
	displayName = "LocKey#40802";
	localizedDescription = "LocKey#40803";
	iconPath = "cw_immunesystem_electroshockmechanism";
	quality = "Quality.Common";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 28.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 16.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 16.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity25CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.ElectroshockMechanismProcChance";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					attackRecord = "Attacks.ElectroshockMechanismExplosionCommon";
				} : ElectroshockMechanismEffector2
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#85667";
				intValues = 
				[
					10, 135
				];
			};
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedElectroshockMechanismStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ElectroshockMechanism";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismCommonPlus";
}

AdvancedElectroshockMechanismStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.ExplosionDamagePercentBonus", "Modifiers.ExplosionResistance", "Modifiers.ExplosionResistanceQualityToggle", "Modifiers.Armor", "Modifiers.ArmorToggle"
	];
}

[ notQueryable ]
AdvancedElectroshockMechanismCommonPlus : AdvancedElectroshockMechanismCommon
{
	quality = "Quality.CommonPlus";
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismUncommon";
}

AdvancedElectroshockMechanismUncommon : AdvancedElectroshockMechanismCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.ElectroshockMechanismProcChance";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					attackRecord = "Attacks.ElectroshockMechanismExplosionUncommon";
				} : ElectroshockMechanismEffector2
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#85667";
				intValues = 
				[
					10, 180
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismUncommonPlus";
}

[ notQueryable ]
AdvancedElectroshockMechanismUncommonPlus : AdvancedElectroshockMechanismUncommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismRare";
}

AdvancedElectroshockMechanismRare : AdvancedElectroshockMechanismCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.ElectroshockMechanismProcChance";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					attackRecord = "Attacks.ElectroshockMechanismExplosionRare";
				} : ElectroshockMechanismEffector2
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#85667";
				intValues = 
				[
					10, 270
				];
			};
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismRarePlus";
}

[ notQueryable ]
AdvancedElectroshockMechanismRarePlus : AdvancedElectroshockMechanismRare
{
	quality = "Quality.RarePlus";
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismEpic";
}

AdvancedElectroshockMechanismEpic : AdvancedElectroshockMechanismCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.ElectroshockMechanismProcChance";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					attackRecord = "Attacks.ElectroshockMechanismExplosionEpic";
				} : ElectroshockMechanismEffector2
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#85667";
				intValues = 
				[
					10, 370
				];
			};
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismEpicPlus";
}

[ notQueryable ]
AdvancedElectroshockMechanismEpicPlus : AdvancedElectroshockMechanismEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismLegendary";
}

AdvancedElectroshockMechanismLegendary : AdvancedElectroshockMechanismCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.ElectroshockMechanismProcChance";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					attackRecord = "Attacks.ElectroshockMechanismExplosionLegendary";
				} : ElectroshockMechanismEffector2
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#85667";
				intValues = 
				[
					10, 500
				];
			};
		}, 
		"Attunements.TechWeaponDamage"
	];
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismLegendaryPlus";
}

[ notQueryable ]
AdvancedElectroshockMechanismLegendaryPlus : AdvancedElectroshockMechanismLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedElectroshockMechanismLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedElectroshockMechanismLegendaryPlusPlus : AdvancedElectroshockMechanismLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

ElectroshockMechanismEffector2 : TriggerAttackByChanceEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				statusEffect = "GameplayRestriction.NoDangerousCyberware";
			} : Prereqs.StatusEffectAbsentPrereq, 
			{
				statusEffect = "GameplayRestriction.FistFight";
			} : Prereqs.StatusEffectAbsentPrereq, 
			{
				statusEffect = "BaseStatusEffect.ElectroshockMechanismCooldown";
			} : Prereqs.StatusEffectAbsentPrereq, 
			{
				conditions = 
				[
					{
						type = "Prereqs.HitFlag";
						string hitFlag = "DealNoDamage";
						bool invert = true;
					}, 
					{
						instigatorType = "Puppet";
					} : InstigatorTypeHitPrereqCondition
				];
			} : Prereqs.ProcessHitReceived
		];
	} : Prereqs.ANDPrereq;
	statForChance = "BaseStats.ElectroshockMechanismProcChance";
	attackRecord = "Attacks.ElectroshockMechanismExplosionCommon";
	selfStatusEffect = "BaseStatusEffect.ElectroshockMechanismCooldown";
}

[ notQueryable ]
AdvancedAdaptiveStemCellsCommon : AdvancedIntegumentarySystemModule
{
	displayName = "LocKey#85335";
	localizedDescription = "LocKey#85336";
	iconPath = "PainDistributor";
	quality = "Quality.Common";
	upgradeCostMult = 2.5f;
	equipPrereqs = 
	[
		{
			perkType = "Tech_Central_Perk_3_3";
			level = 1;
		} : PlayerIsNewPerkBoughtPrereq
	];
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 50.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 24.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 8.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper2";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper3";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper4";
			modifierType = "Additive";
			refStat = "BaseStats.TechnicalAbility";
			refObject = "Player";
			opSymbol = "*";
			value = 0.5f;
		} : CombinedStatModifier
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedAdaptiveStemCellsStatsShard";
		} : StatsShardSlotPart
	];
	variants = 
	[
		"Variants.Humanity10CostTinkererVariant"
	];
	statModifierGroups = [];
	CName cyberwareType = "AdaptiveStemCells";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "veryhigh_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsUncommon";
}

AdvancedAdaptiveStemCellsStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.CarryCapacity", "Modifiers.CarryCapacityQualityToggle", "Modifiers.HealthRegenPercent", "Modifiers.HealthRegenPercentToggle"
	];
}

AdvancedAdaptiveStemCellsUncommon : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.Uncommon";
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsUncommonPlus";
}

[ notQueryable ]
AdvancedAdaptiveStemCellsUncommonPlus : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.UncommonPlus";
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsRare";
}

AdvancedAdaptiveStemCellsRare : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsRarePlus";
}

[ notQueryable ]
AdvancedAdaptiveStemCellsRarePlus : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsEpic";
}

AdvancedAdaptiveStemCellsEpic : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsEpicPlus";
}

[ notQueryable ]
AdvancedAdaptiveStemCellsEpicPlus : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsLegendary";
}

AdvancedAdaptiveStemCellsLegendary : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsLegendaryPlus";
}

[ notQueryable ]
AdvancedAdaptiveStemCellsLegendaryPlus : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "Items.AdvancedAdaptiveStemCellsLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedAdaptiveStemCellsLegendaryPlusPlus : AdvancedAdaptiveStemCellsCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		"Attunements.TechMasterCyberware"
	];
	nextUpgradeItem = "";
}

AdvancedPainReductorEpic : AdvancedIntegumentarySystemModule
{
	string friendlyName = "PainReductor";
	displayName = "LocKey#40806";
	localizedDescription = "LocKey#40807";
	iconPath = "cw_skeleton_paineditor";
	quality = "Quality.Epic";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 28.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 20.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 20.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity35CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.PainEditorDamageReduction";
					modifierType = "Additive";
					value = 0.94f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					statForValue = "BaseStats.PainEditorDamageReduction";
				} : MultiplyDamage
			];
			UIData = 
			{
				iconPath = "";
				localizedDescription = "LocKey#40805";
				floatValues = 
				[
					6f
				];
			};
		}, 
		"Attunements.CoolDamageReduce"
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedPainReductorStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "PainReductor";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "max_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "max_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedPainReductorEpicPlus";
}

AdvancedPainReductorStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.DamageOverTimeResistance", "Modifiers.MitigationChance", "Modifiers.MitigationChanceQualityToggle", "Modifiers.CarryCapacity", "Modifiers.CarryCapacityToggle"
	];
}

[ notQueryable ]
AdvancedPainReductorEpicPlus : AdvancedPainReductorEpic
{
	quality = "Quality.EpicPlus";
	nextUpgradeItem = "Items.AdvancedPainReductorLegendary";
}

AdvancedPainReductorLegendary : AdvancedPainReductorEpic
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.PainEditorDamageReduction";
					modifierType = "Additive";
					value = 0.93f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					prereqRecord = "Prereqs.ProcessHitReceived";
					statForValue = "BaseStats.PainEditorDamageReduction";
				} : MultiplyDamage
			];
			UIData = 
			{
				iconPath = "";
				localizedDescription = "LocKey#40805";
				floatValues = 
				[
					7f
				];
			};
		}, 
		"Attunements.CoolDamageReduce"
	];
	nextUpgradeItem = "Items.AdvancedPainReductorLegendaryPlus";
}

[ notQueryable ]
AdvancedPainReductorLegendaryPlus : AdvancedPainReductorLegendary
{
	quality = "Quality.LegendaryPlus";
	nextUpgradeItem = "Items.AdvancedPainReductorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedPainReductorLegendaryPlusPlus : AdvancedPainReductorLegendary
{
	quality = "Quality.LegendaryPlusPlus";
	nextUpgradeItem = "";
}

AdvancedCogitoFrameCommon : AdvancedIntegumentarySystemModule
{
	string friendlyName = "CogitoFrame";
	displayName = "LocKey#95257";
	iconPath = "cw_integumentary_neuroactivearmor_capacitors";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			value = 18.0f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.Quality";
			opSymbol = "*";
			value = 9.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.Armor";
			modifierType = "Additive";
			refStat = "BaseStats.IsItemPlus";
			opSymbol = "*";
			value = 4.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Intelligence";
			refObject = "Player";
			opSymbol = "*";
			value = 2.0f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12CostTinkererVariant"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 3;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 40f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					2f, 200f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedCogitoFrameStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "CogitoFrame";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameCommonPlus";
}

AdvancedCogitoFrameStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.MeleeResistance", "Modifiers.MeleeResistanceQualityToggle", "Modifiers.HealingItemsEffectPercentBonus", "Modifiers.HealingItemsEffectPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedCogitoFrameCommonPlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 3;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 48f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					2f, 200f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameUncommon";
}

AdvancedCogitoFrameUncommon : AdvancedCogitoFrameCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 5;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 58f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					4f, 210f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameUncommonPlus";
}

[ notQueryable ]
AdvancedCogitoFrameUncommonPlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 5;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 69f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					4f, 210f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameRare";
}

AdvancedCogitoFrameRare : AdvancedCogitoFrameCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 7;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 84f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					6f, 220f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameRarePlus";
}

[ notQueryable ]
AdvancedCogitoFrameRarePlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 7;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 92f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					6f, 220f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameRarePlus";
}

AdvancedCogitoFrameEpic : AdvancedCogitoFrameCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 9;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 108f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					8f, 230f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameEpicPlus";
}

[ notQueryable ]
AdvancedCogitoFrameEpicPlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 9;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 117f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					8f, 230f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameLegendary";
}

AdvancedCogitoFrameLegendary : AdvancedCogitoFrameCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 11;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 134f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					10f, 240f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameLegendaryPlus";
}

[ notQueryable ]
AdvancedCogitoFrameLegendaryPlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 11;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 144f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					10f, 240f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "Items.AdvancedCogitoFrameLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedCogitoFrameLegendaryPlusPlus : AdvancedCogitoFrameCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPool = "BaseStatPools.Memory";
					thresholdUsesPercent = false;
					statPoolStep = 1f;
					minStacks = 0;
					maxStacks = 1;
					inverted = true;
					startingThreshold = 13;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.Armor";
										modifierType = "Additive";
										value = 160f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					};
				} : StatPoolBasedStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#95258";
				floatValues = 
				[
					12f, 250f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.IntArmor"
	];
	nextUpgradeItem = "";
}

