package Items
using RTDB, BaseStats, Perks, Prereqs, Effectors

[ notQueryable ]
AntiVirus : FrontalCortexModule
{
	string friendlyName = "Anti-Virus";
	displayName = "LocKey#3643";
	localizedDescription = "LocKey#3647";
	iconPath = "cw_frontalcortex_antivirus";
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.QuickhackShield";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.AntiVirusCooldownReduction";
					modifierType = "Additive";
					value = 30;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40768";
				intValues = 
				[
					45
				];
			};
		} : GameplayLogicPackage
	];
	CName cyberwareType = "AntiVirus";
	buyPrice += 
	[
		"Price.AntiVirus"
	];
	sellPrice += 
	[
		"Price.AntiVirus"
	];
	counterpart = "Items.AdvancedSelfIceRare";
}

[ notQueryable ]
LimbicSystemEnhancementCommon : FrontalCortexModule
{
	string friendlyName = "Limbic System Enhancement";
	displayName = "LocKey#40770";
	localizedDescription = "LocKey#40771";
	iconPath = "cw_frontalcortex_limbicsystemenhancement";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 6;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritChance";
					modifierType = "Additive";
					value = 2;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					2
				];
			} : LimbicSystemEnhancementUIData;
		}
	];
	CName cyberwareType = "LimbicSystemEnhancement";
	buyPrice += 
	[
		"Price.LimbicSystemEnhancement"
	];
	sellPrice += 
	[
		"Price.LimbicSystemEnhancement"
	];
	deprecated = true;
}

[ notQueryable ]
LimbicSystemEnhancementRare : LimbicSystemEnhancementCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 9;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritChance";
					modifierType = "Additive";
					value = 4;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					4
				];
			} : LimbicSystemEnhancementUIData;
		}
	];
}

[ notQueryable ]
LimbicSystemEnhancementLegendary : LimbicSystemEnhancementCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritChance";
					modifierType = "Additive";
					value = 7;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					7
				];
			} : LimbicSystemEnhancementUIData;
		}
	];
}

[ notQueryable ]
ImprovedPerceptionCommon : FrontalCortexModule
{
	displayName = "LocKey#40773";
	localizedDescription = "LocKey#40774";
	iconPath = "cw_frontalcortex_improvedperception";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 6;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritDamage";
					modifierType = "Additive";
					value = 6;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					6
				];
			} : ImprovedPerceptionUIData;
		}
	];
	CName cyberwareType = "ImprovedPerception";
	buyPrice += 
	[
		"Price.ImprovedPerception"
	];
	sellPrice += 
	[
		"Price.ImprovedPerception"
	];
	deprecated = true;
}

[ notQueryable ]
ImprovedPerceptionUncommon : ImprovedPerceptionCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritDamage";
					modifierType = "Additive";
					value = 12;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					12
				];
			} : ImprovedPerceptionUIData;
		}
	];
}

[ notQueryable ]
ImprovedPerceptionEpic : ImprovedPerceptionCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritDamage";
					modifierType = "Additive";
					value = 20;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					20
				];
			} : ImprovedPerceptionUIData;
		}
	];
}

[ notQueryable ]
ImprovedPerceptionLegendary : ImprovedPerceptionCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.CritDamage";
					modifierType = "Additive";
					value = 30;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					30
				];
			} : ImprovedPerceptionUIData;
		}
	];
}

[ notQueryable ]
BrainCapacityBoosterRare : FrontalCortexModule
{
	displayName = "LocKey#40776";
	localizedDescription = "LocKey#40777";
	iconPath = "cw_frontalcortex_braincapacitybooster";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : IntelligencePrereq
	];
	quality = "Quality.Rare";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.Memory";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					1
				];
			} : BrainCapacityBoosterUIData;
		}
	];
	CName cyberwareType = "BrainCapacityBooster";
	buyPrice += 
	[
		"Price.BrainCapacityBooster"
	];
	sellPrice += 
	[
		"Price.BrainCapacityBooster"
	];
	counterpart = "Items.AdvancedExDiskRare";
}

[ notQueryable ]
BrainCapacityBoosterEpic : BrainCapacityBoosterRare
{
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : IntelligencePrereq
	];
	quality = "Quality.Epic";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.Memory";
					modifierType = "Additive";
					value = 3;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					3
				];
			} : BrainCapacityBoosterUIData;
		}
	];
	counterpart = "Items.AdvancedExDiskRare";
}

[ notQueryable ]
BrainCapacityBoosterLegendary : BrainCapacityBoosterRare
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.Memory";
					modifierType = "Additive";
					value = 5;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					5
				];
			} : BrainCapacityBoosterUIData;
		}
	];
	counterpart = "Items.AdvancedExDiskRare";
}

[ notQueryable ]
FastAccessMemoryCommon : FrontalCortexModule
{
	displayName = "LocKey#40779";
	localizedDescription = "LocKey#40780";
	iconPath = "cw_frontalcortex_fastaccessmemory";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MemoryRegenRate";
					modifierType = "Additive";
					value = 0.05;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					0.05
				];
			} : FastAccessMemoryUIData;
		}
	];
	CName cyberwareType = "FastAccessMemory";
	buyPrice += 
	[
		"Price.FastAccessMemory"
	];
	sellPrice += 
	[
		"Price.FastAccessMemory"
	];
	counterpart = "Items.AdvancedRamUpgradeCommon";
}

[ notQueryable ]
FastAccessMemoryUncommon : FastAccessMemoryCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MemoryRegenRate";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					0.1
				];
			} : FastAccessMemoryUIData;
		}
	];
	counterpart = "Items.AdvancedRamUpgradeCommon";
}

[ notQueryable ]
FastAccessMemoryRare : FastAccessMemoryCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MemoryRegenRate";
					modifierType = "Additive";
					value = 0.15;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					0.15
				];
			} : FastAccessMemoryUIData;
		}
	];
	counterpart = "Items.AdvancedRamUpgradeCommon";
}

[ notQueryable ]
HealOnKillCommon : FrontalCortexModule
{
	displayName = "LocKey#40782";
	localizedDescription = "LocKey#40783";
	iconPath = "cw_frontalcortex_healonkill";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : ReflexesPrereq
	];
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				"Items.HealOnKillEffector", "Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					2f
				];
			} : HealOnKillUIData;
		}
	];
	CName cyberwareType = "HealOnKill";
	buyPrice += 
	[
		"Price.HealOnKill"
	];
	sellPrice += 
	[
		"Price.HealOnKill"
	];
	counterpart = "Items.AdvancedHealOnKillCommon";
}

[ notQueryable ]
HealOnKillUncommon : HealOnKillCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 3f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					3f
				];
			} : HealOnKillUIData;
		}
	];
	counterpart = "Items.AdvancedHealOnKillCommon";
}

[ notQueryable ]
HealOnKillEpic : HealOnKillCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 6f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					6f
				];
			} : HealOnKillUIData;
		}
	];
	counterpart = "Items.AdvancedHealOnKillCommon";
}

[ notQueryable ]
HealOnKillLegendary : HealOnKillCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Health";
							statPoolValue = 10f;
						} : StatPoolUpdate
					];
				} : Items.HealOnKillEffector, 
				"Items.HealOnKillSFXEffector"
			];
			UIData = 
			{
				floatValues = 
				[
					10f
				];
			} : HealOnKillUIData;
		}
	];
	counterpart = "Items.AdvancedHealOnKillCommon";
}

[ notQueryable ]
MemoryBoostCommon : FrontalCortexModule
{
	displayName = "LocKey#40785";
	localizedDescription = "LocKey#40786";
	iconPath = "cw_frontalcortex_memoryboost";
	equipPrereqs = 
	[
		{
			valueToCheck = 7;
		} : IntelligencePrereq
	];
	quality = "Quality.Common";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 1f;
						} : StatPoolUpdate
					];
				} : Items.MemoryBoostEffector, 
				"Items.MemoryBoostSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					1
				];
			} : MemoryBoostUIData;
		}
	];
	CName cyberwareType = "MemoryBoost";
	buyPrice += 
	[
		"Price.MemoryBoost"
	];
	sellPrice += 
	[
		"Price.MemoryBoost"
	];
	counterpart = "Items.AdvancedMemoryBoostUncommon";
}

[ notQueryable ]
MemoryBoostUncommon : MemoryBoostCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 9;
		} : IntelligencePrereq
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 2f;
						} : StatPoolUpdate
					];
				} : Items.MemoryBoostEffector, 
				"Items.MemoryBoostSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					2
				];
			} : MemoryBoostUIData;
		}
	];
	counterpart = "Items.AdvancedMemoryBoostUncommon";
}

[ notQueryable ]
MemoryBoostRare : MemoryBoostCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : IntelligencePrereq
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 3f;
						} : StatPoolUpdate
					];
				} : Items.MemoryBoostEffector, 
				"Items.MemoryBoostSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					3
				];
			} : MemoryBoostUIData;
		}
	];
	counterpart = "Items.AdvancedMemoryBoostUncommon";
}

[ notQueryable ]
MemoryBoostEpic : MemoryBoostCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : IntelligencePrereq
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 4f;
						} : StatPoolUpdate
					];
				} : Items.MemoryBoostEffector, 
				"Items.MemoryBoostSFXEffector"
			];
			UIData = 
			{
				intValues = 
				[
					4
				];
			} : MemoryBoostUIData;
		}
	];
	counterpart = "Items.AdvancedMemoryBoostUncommon";
}

[ notQueryable ]
MemoryReplenishmentEpic : FrontalCortexModule
{
	string friendlyName = "MemoryReplenishment";
	displayName = "LocKey#40788";
	localizedDescription = "LocKey#40789";
	iconPath = "cw_frontalcortex_memoryreplenishment";
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 20;
						} : StatPoolUpdate
					];
				} : MemoryReplenishmentEffector, 
				"Items.MemoryReplenishmentSFXEffector", "Items.MemoryReplenishmentCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					2, 20, 3
				];
			} : MemoryReplenishmentUIData;
		}
	];
	CName cyberwareType = "MemoryReplenishment";
	buyPrice += 
	[
		"Price.MemoryReplenishment"
	];
	sellPrice += 
	[
		"Price.MemoryReplenishment"
	];
	counterpart = "Items.AdvancedCamilloRamManagerEpic";
}

[ notQueryable ]
MemoryReplenishmentLegendary : MemoryReplenishmentEpic
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : IntelligencePrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statPoolUpdates = 
					[
						{
							statPoolType = "BaseStatPools.Memory";
							statPoolValue = 30;
						} : StatPoolUpdate
					];
				} : MemoryReplenishmentEffector, 
				"Items.MemoryReplenishmentSFXEffector", "Items.MemoryReplenishmentCooldownEffector"
			];
			UIData = 
			{
				intValues = 
				[
					2, 30, 3
				];
			} : MemoryReplenishmentUIData;
		}
	];
	fk< ConstantStatModifier > price = 
	{
		statType = "BaseStats.Price";
		modifierType = "Additive";
		value = 175;
	} : ConstantStatModifier;
	counterpart = "Items.AdvancedCamilloRamManagerEpic";
}

[ notQueryable ]
RoboticCoreCommon : FrontalCortexModule
{
	displayName = "LocKey#40791";
	localizedDescription = "LocKey#40792";
	iconPath = "cw_frontalcortex_roboticcore";
	quality = "Quality.Common";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : TechnicalAbilityPrereq
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.BonusDamageAgainstMechanicals";
					modifierType = "Additive";
					value = 0.1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					10
				];
			} : RoboticCoreUIData;
		}
	];
	CName cyberwareType = "RoboticCore";
	buyPrice += 
	[
		"Price.RoboticCore"
	];
	sellPrice += 
	[
		"Price.RoboticCore"
	];
	counterpart = "Items.AdvancedMechatronicCoreCommon";
}

[ notQueryable ]
RoboticCoreUncommon : RoboticCoreCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : TechnicalAbilityPrereq
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.BonusDamageAgainstMechanicals";
					modifierType = "Additive";
					value = 0.2;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					20
				];
			} : RoboticCoreUIData;
		}
	];
	counterpart = "Items.AdvancedMechatronicCoreCommon";
}

[ notQueryable ]
RoboticCoreRare : RoboticCoreCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : TechnicalAbilityPrereq
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.BonusDamageAgainstMechanicals";
					modifierType = "Additive";
					value = 0.3;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					30
				];
			} : RoboticCoreUIData;
		}
	];
	counterpart = "Items.AdvancedMechatronicCoreCommon";
}

[ notQueryable ]
RoboticCoreEpic : RoboticCoreCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : TechnicalAbilityPrereq
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.BonusDamageAgainstMechanicals";
					modifierType = "Additive";
					value = 0.4;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					40
				];
			} : RoboticCoreUIData;
		}
	];
	counterpart = "Items.AdvancedMechatronicCoreCommon";
}

[ notQueryable ]
RoboticCoreLegendary : RoboticCoreCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : TechnicalAbilityPrereq
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.BonusDamageAgainstMechanicals";
					modifierType = "Additive";
					value = 0.5;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					50
				];
			} : RoboticCoreUIData;
		}
	];
	counterpart = "Items.AdvancedMechatronicCoreCommon";
}

[ notQueryable ]
LimbicSystemEnhancementUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40769";
}

[ notQueryable ]
ImprovedPerceptionUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40772";
}

[ notQueryable ]
BrainCapacityBoosterUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40775";
}

[ notQueryable ]
FastAccessMemoryUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40778";
}

[ notQueryable ]
HealOnKillUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40781";
}

[ notQueryable ]
MemoryBoostUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40784";
}

[ notQueryable ]
MemoryReplenishmentUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40787";
}

[ notQueryable ]
RoboticCoreUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40790";
}

[ notQueryable ]
RestoreStatPoolOnKillEffector : ModifyStatPoolValueEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Health";
			statPoolValue = 2f;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

[ notQueryable ]
HealOnKillEffector : ModifyStatPoolValueEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Health";
			statPoolValue = 2f;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

[ notQueryable ]
HealOnKillSFXEffector : PlaySFXEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	CName activationSFXName = "vfx_fullscreen_heal_on_kill_activate";
}

[ notQueryable ]
MemoryBoostEffector : ModifyStatPoolValueEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Memory";
			statPoolValue = 1f;
		} : StatPoolUpdate
	];
	bool usePercent = false;
}

[ notQueryable ]
MemoryBoostSFXEffector : PlaySFXEffector
{
	prereqRecord = "Prereqs.AnyTakedownOrKill";
	CName activationSFXName = "vfx_fullscreen_memory_boost_activate";
}

[ notQueryable ]
MemoryReplenishmentEffector : ModifyStatPoolValueEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 20.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statPoolUpdates = 
	[
		{
			statPoolType = "BaseStatPools.Memory";
			statPoolValue = 50;
		} : StatPoolUpdate
	];
	bool usePercent = true;
}

[ notQueryable ]
MemoryReplenishmentSFXEffector : PlaySFXEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 20.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	CName activationSFXName = "vfx_fullscreen_memory_replenish";
}

[ notQueryable ]
MemoryReplenishmentCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 20.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentCooldown";
	removeWithEffector = false;
}

[ notQueryable ]
MemoryReplenishmentIconicEpicCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 10.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentIconicEpicCooldown";
	removeWithEffector = false;
}

[ notQueryable ]
MemoryReplenishmentIconicEpicPlusCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 10.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentIconicEpicPlusCooldown";
	removeWithEffector = false;
}

[ notQueryable ]
MemoryReplenishmentIconicLegendaryCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 10.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentIconicLegendaryCooldown";
	removeWithEffector = false;
}

[ notQueryable ]
MemoryReplenishmentIconicLegendaryPlusCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 10.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentIconicLegendaryPlusCooldown";
	removeWithEffector = false;
}

[ notQueryable ]
MemoryReplenishmentIconicLegendaryPlusPlusCooldownEffector : ApplyStatusEffectEffector
{
	prereqRecord = 
	{
		nestedPrereqs = 
		[
			{
				valueToCheck = 
				[
					{
						statType = "BaseStats.Memory";
						modifierType = "Additive";
						value = 10.0f;
					} : ConstantStatModifier
				];
				statPoolType = "Memory";
				comparisonType = "LessOrEqual";
				bool comparePercentage = true;
			} : StatPoolPrereq, 
			{
				checkType = "CheckType.Tag";
				tagToCheck = "PlayerMemoryReplenishmentCooldown";
			} : Prereqs.StatusEffectAbsentPrereq
		];
	} : Prereqs.ANDPrereq;
	statusEffect = "BaseStatusEffect.PlayerMemoryReplenishmentIconicLegendaryPlusPlusCooldown";
	removeWithEffector = false;
}

