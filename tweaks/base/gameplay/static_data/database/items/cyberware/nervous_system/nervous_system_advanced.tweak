package Items
using RTDB, BaseStats, Perks, Prereqs, Price, Variants, ModifierGroups, Effectors, Attacks, Attunements, BaseStatusEffect

[ notQueryable ]
AdvancedNervousSystemModule : NervousSystemModule
{
	usesVariants = true;
	blueprint = "Items.GenericShardableCyberwareBlueprint";
	slotPartListPreset = 
	[
		"Items.GenericItemRootPreset"
	];
	statModifiers += 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier
	];
}

[ notQueryable ]
AdvancedKerenzikovCommon : AdvancedNervousSystemModule
{
	displayName = "LocKey#40843";
	localizedDescription = "LocKey#40844";
	iconPath = "cw_nervoussystem_kerenzikov";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1.5f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					5
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedKerenzikovStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "Kerenzikov";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovUncommon";
}

AdvancedKerenzikovStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.ReloadSpeedPercentBonus", "Modifiers.RecoilPercentBonus", "Modifiers.RecoilPercentBonusQualityToggle", "Modifiers.HeadshotDamageMultiplier", "Modifiers.HeadshotDamageMultiplierToggle"
	];
}

AdvancedKerenzikovUncommon : AdvancedKerenzikovCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 8f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					8
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovUncommonPlus";
}

[ notQueryable ]
AdvancedKerenzikovUncommonPlus : AdvancedKerenzikovCommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 7.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					7.5f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovRare";
}

AdvancedKerenzikovRare : AdvancedKerenzikovCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 7.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					7.5f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovRarePlus";
}

[ notQueryable ]
AdvancedKerenzikovRarePlus : AdvancedKerenzikovUncommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 7f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					7
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovEpic";
}

AdvancedKerenzikovEpic : AdvancedKerenzikovCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 7f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					7
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovEpicPlus";
}

[ notQueryable ]
AdvancedKerenzikovEpicPlus : AdvancedKerenzikovUncommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 6.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6.5f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovLegendary";
}

AdvancedKerenzikovLegendary : AdvancedKerenzikovCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6.5f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovLegendaryPlus";
}

[ notQueryable ]
AdvancedKerenzikovLegendaryPlus : AdvancedKerenzikovUncommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 6f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedKerenzikovLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedKerenzikovLegendaryPlusPlus : AdvancedKerenzikovUncommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 6f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3.75f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 1.0f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3.75f, 60f
				];
			} : KerenzikovUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					6
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedSynapticAcceleratorCommon : AdvancedNervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40846";
	localizedDescription = "LocKey#40847";
	iconPath = "cw_nervoussystem_synapticaccelerator";
	quality = "Quality.Common";
	upgradeCostMult = 0.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity5Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffCommon";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 2f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedSynapticAcceleratorStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "SynapticAccelerator";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorCommonPlus";
}

AdvancedSynapticAcceleratorStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.VisibilityReduction", "Modifiers.StealthHitDamageBonus", "Modifiers.StealthHitDamageBonusQualityToggle", "Modifiers.BonusQuickHackDamage", "Modifiers.BonusQuickHackDamageToggle"
	];
}

[ notQueryable ]
AdvancedSynapticAcceleratorCommonPlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffUncommon";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 2.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorUncommon";
}

AdvancedSynapticAcceleratorUncommon : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffUncommon";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					20f, 2f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorUncommonPlus";
}

[ notQueryable ]
AdvancedSynapticAcceleratorUncommonPlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffUncommonPlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					20f, 2.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorRare";
}

AdvancedSynapticAcceleratorRare : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffRarePlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30f, 2.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorRarePlus";
}

[ notQueryable ]
AdvancedSynapticAcceleratorRarePlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffRarePlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30f, 3f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorEpic";
}

AdvancedSynapticAcceleratorEpic : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffEpic";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40f, 3f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorEpicPlus";
}

[ notQueryable ]
AdvancedSynapticAcceleratorEpicPlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffEpicPlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40f, 3.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorLegendary";
}

AdvancedSynapticAcceleratorLegendary : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffLegendary";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 3.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorLegendaryPlus";
}

[ notQueryable ]
AdvancedSynapticAcceleratorLegendaryPlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffLegendaryPlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 4f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedSynapticAcceleratorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedSynapticAcceleratorLegendaryPlusPlus : AdvancedSynapticAcceleratorCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffLegendaryPlusPlus";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 4.5f, 50f
				];
			} : SynapticAcceleratorUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

AdvancedReflexRecorderCommon : AdvancedNervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40849";
	localizedDescription = "LocKey#40850";
	iconPath = "cw_nervoussystem_reflexrecorder";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity5Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommon";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					20, 2, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					60
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedReflexRecorderStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ReflexRecorder";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderCommonPlus";
}

AdvancedReflexRecorderStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.Health", "Modifiers.ADSSpeedPercentBonus", "Modifiers.ADSSpeedPercentBonusQualityToggle", "Modifiers.RecoilPercentBonus", "Modifiers.RecoilPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedReflexRecorderCommonPlus : AdvancedReflexRecorderCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -5f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommonPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					20, 2.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					55
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderUncommon";
}

AdvancedReflexRecorderUncommon : AdvancedReflexRecorderCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -5f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffUncommon";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30, 2.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					55
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderUncommonPlus";
}

[ notQueryable ]
AdvancedReflexRecorderUncommonPlus : AdvancedReflexRecorderCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -5f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffUncommonPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30, 3, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					55
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderRare";
}

AdvancedReflexRecorderRare : AdvancedReflexRecorderCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffRare";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40, 3, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderRarePlus";
}

[ notQueryable ]
AdvancedReflexRecorderRarePlus : AdvancedReflexRecorderCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffRarePlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40, 3.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderEpic";
}

AdvancedReflexRecorderEpic : AdvancedReflexRecorderCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffEpic";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 3.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					45
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderEpicPlus";
}

[ notQueryable ]
AdvancedReflexRecorderEpicPlus : AdvancedReflexRecorderCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffEpicPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 4, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					45
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderLegendary";
}

AdvancedReflexRecorderLegendary : AdvancedReflexRecorderCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffLegendary";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					40
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderLegendaryPlus";
}

[ notQueryable ]
AdvancedReflexRecorderLegendaryPlus : AdvancedReflexRecorderCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffLegendaryPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					40
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedReflexRecorderLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedReflexRecorderLegendaryPlusPlus : AdvancedReflexRecorderCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -25f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffLegendaryPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4.5, 25
				];
			} : ReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					35
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderRare : AdvancedNervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#94431";
	localizedDescription = "LocKey#40850";
	iconPath = "cw_nervoussystem_reflexrecorder";
	tags += 
	[
		"IllegalItem"
	];
	quality = "Quality.Rare";
	upgradeCostMult = 2.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.25f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity35Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffRare";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40, 3
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_reflex_recorder_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedReflexRecorderStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "ReflexRecorder";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderRarePlus : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffRarePlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40, 3.5
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					50
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderEpic";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderEpic : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffEpic";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 3.5
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					45
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderEpicPlus : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffEpicPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 4
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					45
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderLegendary : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffLegendary";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					40
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderLegendaryPlus : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffLegendaryPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4.5
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					40
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "Items.IconicAdvancedReflexRecorderLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedReflexRecorderLegendaryPlusPlus : IconicAdvancedReflexRecorderRare
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -25f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderIconicPlayerBuffLegendaryPlus";
				} : Items.ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 4.5
				];
				intValues = 
				[
					25
				];
			} : IconicReflexRecorderUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#93182";
				floatValues = 
				[
					35
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolIconicReflexRecorderCooldown"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedNeoFiberCommon : AdvancedNervousSystemModule
{
	string friendlyName = "NeoFiber";
	displayName = "LocKey#40852";
	localizedDescription = "LocKey#40853";
	iconPath = "cw_nervoussystem_neofibre";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity14Cost"
	];
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 6f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					6f, 2f
				];
			} : NeoFiberUIData;
		} : GameplayLogicPackage, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedNeoFiberStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "NeoFiber";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberUncommon";
}

AdvancedNeoFiberStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.MeleeResistance", "Modifiers.BonusRicochetDamage", "Modifiers.BonusRicochetDamageQualityToggle", "Modifiers.RecoilPercentBonus", "Modifiers.RecoilPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedNeoFiberUncommon : AdvancedNeoFiberCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 7f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 4f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					7f, 4f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberRare";
}

AdvancedNeoFiberRare : AdvancedNeoFiberCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 8f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					8f, 5f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberRarePlus";
}

[ notQueryable ]
AdvancedNeoFiberRarePlus : AdvancedNeoFiberRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 8f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 6f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					8f, 6f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberEpic";
}

AdvancedNeoFiberEpic : AdvancedNeoFiberCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 9f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 7f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					9f, 7f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberEpicPlus";
}

[ notQueryable ]
AdvancedNeoFiberEpicPlus : AdvancedNeoFiberRarePlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 9f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 8f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					9f, 8f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberLegendary";
}

AdvancedNeoFiberLegendary : AdvancedNeoFiberCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 9f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					10f, 9f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberLegendaryPlus";
}

[ notQueryable ]
AdvancedNeoFiberLegendaryPlus : AdvancedNeoFiberRarePlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					10f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedNeoFiberLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedNeoFiberLegendaryPlusPlus : AdvancedNeoFiberRarePlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 11f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 11f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					11f, 11f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

AdvancedDetectorRushCommon : AdvancedNervousSystemModule
{
	string friendlyName = "DetectorRush";
	displayName = "LocKey#85327";
	localizedDescription = "LocKey#85328";
	iconPath = "DetectorRush";
	quality = "Quality.Common";
	upgradeCostMult = 0.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity6Cost"
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					20f, 3f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffCommon";
				} : DetectorRushEffector
			];
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedDetectorRushStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "DetectorRush";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushCommonPlus";
}

AdvancedDetectorRushStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.ExplosionDamagePercentBonus", "Modifiers.DamageOverTimePercentBonus", "Modifiers.DamageOverTimePercentBonusQualityToggle", "Modifiers.GrenadesChargesRegenMult", "Modifiers.GrenadesChargesRegenMultToggle"
	];
}

[ notQueryable ]
AdvancedDetectorRushCommonPlus : AdvancedDetectorRushCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					20f, 4f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffCommonPlus";
				} : DetectorRushEffector
			];
		}
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushUncommon";
}

AdvancedDetectorRushUncommon : AdvancedDetectorRushCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					25f, 4f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffUncommon";
				} : DetectorRushEffector
			];
		}
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushUncommonPlus";
}

[ notQueryable ]
AdvancedDetectorRushUncommonPlus : AdvancedDetectorRushCommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					25f, 5f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffUncommonPlus";
				} : DetectorRushEffector
			];
		}
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushRare";
}

AdvancedDetectorRushRare : AdvancedDetectorRushCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					30f, 5f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffRare";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushRarePlus";
}

[ notQueryable ]
AdvancedDetectorRushRarePlus : AdvancedDetectorRushCommon
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					30f, 6f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffRarePlus";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushEpic";
}

AdvancedDetectorRushEpic : AdvancedDetectorRushCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					35f, 6f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffEpic";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushEpicPlus";
}

[ notQueryable ]
AdvancedDetectorRushEpicPlus : AdvancedDetectorRushCommon
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					35f, 7f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffEpicPlus";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushLegendary";
}

AdvancedDetectorRushLegendary : AdvancedDetectorRushCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					40f, 7f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffLegendary";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushLegendaryPlus";
}

[ notQueryable ]
AdvancedDetectorRushLegendaryPlus : AdvancedDetectorRushCommon
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					40f, 8f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffLegendaryPlus";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedDetectorRushLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedDetectorRushLegendaryPlusPlus : AdvancedDetectorRushCommon
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					40f, 9f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffLegendaryPlusPlus";
				} : DetectorRushEffector
			];
		}, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushRare : AdvancedDetectorRushRare
{
	displayName = "LocKey#94424";
	localizedDescription = "LocKey#85328";
	tags += 
	[
		"IllegalItem"
	];
	upgradeCostMult = 1.5f;
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 1.5f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 1.5f;
		} : ConstantStatModifier
	];
	statModifiers = 
	[
		"Items.ItemArmorToArmor", {
			statType = "BaseStats.Protection";
			modifierType = "Additive";
			refStat = "BaseStats.Armor";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier, 
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 3.f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity20Cost"
	];
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					20f, 10f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffRare";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_detector_rush_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushRarePlus : IconicAdvancedDetectorRushRare
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					20f, 15f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffRarePlus";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushEpic";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushEpic : IconicAdvancedDetectorRushRare
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					25f, 20f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffEpic";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushEpicPlus : IconicAdvancedDetectorRushRare
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					25f, 25f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffEpicPlus";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushLegendary : IconicAdvancedDetectorRushRare
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					30f, 30f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffLegendary";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushLegendaryPlus : IconicAdvancedDetectorRushRare
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					30f, 35f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffLegendaryPlus";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "Items.IconicAdvancedDetectorRushLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedDetectorRushLegendaryPlusPlus : IconicAdvancedDetectorRushRare
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			UIData = 
			{
				localizedDescription = "LocKey#90250";
				floatValues = 
				[
					30f, 40f
				];
			};
			effectors = 
			[
				"Perks.MakeDetectorRushAvailable", {
					statusEffect = "BaseStatusEffect.IconicDetectorRushPlayerBuffLegendaryPlusPlus";
				} : DetectorRushEffector, 
				"Items.RemoveDetectorRushEffector"
			];
		}, 
		"Attunements.ReflexesDetectorRushIconicDuration"
	];
	nextUpgradeItem = "";
}

DetectorRushEffector : ApplyStatusEffectEffector
{
	prereqRecord = "Perks.CanUseDetectorRush";
	effectorClassName = "ApplyStatusEffectEffector";
	statusEffect = "BaseStatusEffect.DetectorRushPlayerBuffCommon";
	removeWithEffector = false;
}

RemoveDetectorRushEffector : RemoveStatusEffectsEffector
{
	prereqRecord = "Perks.IsPlayerOutOfCombatOrInStealthPSMState";
	effectTags = 
	[
		"DetectorRushBuff"
	];
}

AdvancedTroubleFinderCommon : AdvancedNervousSystemModule
{
	string friendlyName = "TroubleFinder";
	displayName = "LocKey#85329";
	localizedDescription = "LocKey#85330";
	iconPath = "TroubleFinder";
	quality = "Quality.Common";
	upgradeCostMult = 0.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity5Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffCommon";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					20f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedTroubleFinderStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "TroubleFinder";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "low_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderCommonPlus";
}

AdvancedTroubleFinderStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.CarryCapacity", "Modifiers.VisibilityReduction", "Modifiers.VisibilityReductionQualityToggle", "Modifiers.StealthHitDamageBonus", "Modifiers.StealthHitDamageBonusToggle"
	];
}

[ notQueryable ]
AdvancedTroubleFinderCommonPlus : AdvancedTroubleFinderCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffCommonPlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					23f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderUncommon";
}

AdvancedTroubleFinderUncommon : AdvancedTroubleFinderCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffUncommon";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					29f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderUncommonPlus";
}

[ notQueryable ]
AdvancedTroubleFinderUncommonPlus : AdvancedTroubleFinderCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffUncommonPlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					32f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderRare";
}

AdvancedTroubleFinderRare : AdvancedTroubleFinderCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffRare";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					38f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderRarePlus";
}

[ notQueryable ]
AdvancedTroubleFinderRarePlus : AdvancedTroubleFinderCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffRarePlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					41f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderEpic";
}

AdvancedTroubleFinderEpic : AdvancedTroubleFinderCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffEpic";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					47f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderEpicPlus";
}

[ notQueryable ]
AdvancedTroubleFinderEpicPlus : AdvancedTroubleFinderCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffEpicPlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					50f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderLegendary";
}

AdvancedTroubleFinderLegendary : AdvancedTroubleFinderCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffLegendary";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					56f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderLegendaryPlus";
}

[ notQueryable ]
AdvancedTroubleFinderLegendaryPlus : AdvancedTroubleFinderCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffLegendaryPlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					60f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTroubleFinderLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedTroubleFinderLegendaryPlusPlus : AdvancedTroubleFinderCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableTroubleFinder";
					statusEffect = "BaseStatusEffect.TroubleFinderPlayerBuffLegendaryPlusPlus";
					detectionStep = 5f;
					maxStacks = 16;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#89568";
				floatValues = 
				[
					64f, 80f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
AdvancedOilDispenserCommon : AdvancedNervousSystemModule
{
	string friendlyName = "OilDispenser";
	displayName = "LocKey#90917";
	localizedDescription = "LocKey#90920";
	iconPath = "cw_toxinmixer";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Reflexes";
			refObject = "Player";
			opSymbol = "*";
			value = 0.1f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity12Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 7.75f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					7.75f
				];
			};
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedOilDispenserStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "OilDispenser";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserCommonPlus";
}

AdvancedOilDispenserStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.MeleeResistance", "Modifiers.MeleeDamagePercentBonus", "Modifiers.MeleeDamagePercentBonusQualityToggle", "Modifiers.HealingItemsChargesRegenMult", "Modifiers.HealingItemsChargesRegenMultToggle"
	];
}

[ notQueryable ]
AdvancedOilDispenserCommonPlus : AdvancedOilDispenserCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 8.5f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					8.5f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserUncommon";
}

AdvancedOilDispenserUncommon : AdvancedOilDispenserCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 10f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					10f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserUncommonPlus";
}

[ notQueryable ]
AdvancedOilDispenserUncommonPlus : AdvancedOilDispenserUncommon
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 10.75f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					10.75f
				];
			};
		}
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserRare";
}

AdvancedOilDispenserRare : AdvancedOilDispenserCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 12.25f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					12.25f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserRarePlus";
}

[ notQueryable ]
AdvancedOilDispenserRarePlus : AdvancedOilDispenserUncommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 13f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					13f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserEpic";
}

AdvancedOilDispenserEpic : AdvancedOilDispenserCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 14.5f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					14.5f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserEpicPlus";
}

[ notQueryable ]
AdvancedOilDispenserEpicPlus : AdvancedOilDispenserUncommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 15.25f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					15.25f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserLegendary";
}

AdvancedOilDispenserLegendary : AdvancedOilDispenserCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 16.75f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					16.75f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserLegendaryPlus";
}

[ notQueryable ]
AdvancedOilDispenserLegendaryPlus : AdvancedOilDispenserUncommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 18f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					18f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "Items.AdvancedOilDispenserLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedOilDispenserLegendaryPlusPlus : AdvancedOilDispenserUncommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						nestedPrereqs = 
						[
							"Prereqs.BladeWeaponHeldPrereq", "Prereqs.ThrowableWeaponHeldPrereq"
						];
					} : ORPrereq;
					statGroup = 
					{
						statModifiers = 
						[
							{
								statType = "BaseStats.CritChance";
								modifierType = "Additive";
								value = 20f;
							} : ConstantStatModifier
						];
					};
				} : ApplyStatGroupOnWeapon
			];
			UIData = 
			{
				localizedDescription = "LocKey#90921";
				floatValues = 
				[
					20f
				];
			};
		}, 
		"Attunements.ReflexesCritChance"
	];
	nextUpgradeItem = "";
}

AdvancedVisualCortexSupportCommon : AdvancedNervousSystemModule
{
	displayName = "LocKey#40773";
	localizedDescription = "LocKey#40774";
	iconPath = "cw_frontalcortex_improvedperception";
	quality = "Quality.Common";
	upgradeCostMult = 1.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity20Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.16f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					16f, 30f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedVisualCortexSupportStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "VisualCortexSupport";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportCommonPlus";
}

AdvancedVisualCortexSupportStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.StealthHitDamageBonus", "Modifiers.RecoilPercentBonus", "Modifiers.RecoilPercentBonusQualityToggle", "Modifiers.ExplosionDamagePercentBonus", "Modifiers.ExplosionDamagePercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedVisualCortexSupportCommonPlus : AdvancedVisualCortexSupportCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.17f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					17f, 30f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportUncommon";
}

AdvancedVisualCortexSupportUncommon : AdvancedVisualCortexSupportCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.19f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					19f, 30f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportUncommonPlus";
}

[ notQueryable ]
AdvancedVisualCortexSupportUncommonPlus : AdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.20f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					20f, 30f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportRare";
}

AdvancedVisualCortexSupportRare : AdvancedVisualCortexSupportCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.22f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					22f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportRarePlus";
}

[ notQueryable ]
AdvancedVisualCortexSupportRarePlus : AdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.23f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					23f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportEpic";
}

AdvancedVisualCortexSupportEpic : AdvancedVisualCortexSupportCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.25f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					25f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportEpicPlus";
}

[ notQueryable ]
AdvancedVisualCortexSupportEpicPlus : AdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.26f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					26f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportLegendary";
}

AdvancedVisualCortexSupportLegendary : AdvancedVisualCortexSupportCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.28f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					28f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportLegendaryPlus";
}

[ notQueryable ]
AdvancedVisualCortexSupportLegendaryPlus : AdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.29f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					29f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedVisualCortexSupportLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedVisualCortexSupportLegendaryPlusPlus : AdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.30f;
					minDistance = 0f;
					maxDistance = 30f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					30f, 30f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportCommon : AdvancedNervousSystemModule
{
	displayName = "LocKey#94432";
	localizedDescription = "LocKey#40774";
	iconPath = "cw_frontalcortex_improvedperception";
	tags += 
	[
		"IllegalItem"
	];
	quality = "Quality.Common";
	upgradeCostMult = 2.5f;
	statModifiers += 
	[
		{
			statType = "BaseStats.IsItemIconic";
			modifierType = "Additive";
			value = 1f;
		} : ConstantStatModifier, 
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 1.0f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity40Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.5f;
					minDistance = 0f;
					maxDistance = 75f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					50f, 75f
				];
			};
		} : GameplayLogicPackage
	];
	OnLooted += 
	[
		{
			effectors = 
			[
				{
					prereqRecord = 
					{
						statusEffect = "BaseStatusEffect.JustLootedIconicCWFromAirdrop";
					} : StatusEffectPrereq;
					fact = "iconic_visual_cortex_support_airdropped";
					value = 1;
				} : SetFactEffector
			];
		}
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedVisualCortexSupportStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "VisualCortexSupport";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "high_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier, 
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			value = 2f;
		} : ConstantStatModifier
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportCommonPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportCommonPlus : IconicAdvancedVisualCortexSupportCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.55f;
					minDistance = 0f;
					maxDistance = 75f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					55f, 75f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportUncommon";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportUncommon : IconicAdvancedVisualCortexSupportCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.6f;
					minDistance = 0f;
					maxDistance = 80f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					60f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportUncommonPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportUncommonPlus : IconicAdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.65f;
					minDistance = 0f;
					maxDistance = 80f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					65f, 80f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportRare";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportRare : IconicAdvancedVisualCortexSupportCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.7f;
					minDistance = 0f;
					maxDistance = 85f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					70f, 85f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportRarePlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportRarePlus : IconicAdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.75f;
					minDistance = 0f;
					maxDistance = 85f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					75f, 85f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportEpic";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportEpic : IconicAdvancedVisualCortexSupportCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.8f;
					minDistance = 0f;
					maxDistance = 90f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					80f, 90f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportEpicPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportEpicPlus : IconicAdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.85f;
					minDistance = 0f;
					maxDistance = 90f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					85f, 90f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportLegendary";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportLegendary : IconicAdvancedVisualCortexSupportCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.9f;
					minDistance = 0f;
					maxDistance = 95f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					90f, 95f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportLegendaryPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportLegendaryPlus : IconicAdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 0.92f;
					minDistance = 0f;
					maxDistance = 95f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					92f, 95f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "Items.IconicAdvancedVisualCortexSupportLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
IconicAdvancedVisualCortexSupportLegendaryPlusPlus : IconicAdvancedVisualCortexSupportCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.PreProcessHitTriggered";
					critChanceBonus = 1f;
					minDistance = 0f;
					maxDistance = 100f;
				} : ModifyCritWithDistance
			];
			UIData = 
			{
				localizedDescription = "LocKey#91760";
				floatValues = 
				[
					100f, 100f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolCritDamage"
	];
	nextUpgradeItem = "";
}

AdvancedTyrosineInjectorCommon : AdvancedNervousSystemModule
{
	string friendlyName = "TyrosineInjector";
	displayName = "LocKey#40757";
	localizedDescription = "LocKey#40758";
	iconPath = "cw_painspliter";
	quality = "Quality.Common";
	upgradeCostMult = 1.0f;
	statModifiers += 
	[
		{
			statType = "BaseStats.AttunementHelper";
			modifierType = "Additive";
			refStat = "BaseStats.Cool";
			refObject = "Player";
			opSymbol = "*";
			value = 0.2f;
		} : CombinedStatModifier
	];
	variants = 
	[
		"Variants.Humanity8Cost"
	];
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.05f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.1f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					10f, 5f, 15f
				];
			};
		} : GameplayLogicPackage
	];
	slotPartListPreset += 
	[
		{
			itemPartPreset = "Items.AdvancedTyrosineInjectorStatsShard";
		} : StatsShardSlotPart
	];
	CName cyberwareType = "TyrosineInjector";
	buyPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	sellPrice += 
	[
		{
			statType = "BaseStats.Price";
			modifierType = "Multiplier";
			id = "cyberware_curves";
			column = "mid_humanity_to_price_mult";
			refStat = "BaseStats.Quality";
			refObject = "Item";
		} : CurveStatModifier
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorCommonPlus";
}

AdvancedTyrosineInjectorStatsShard : CyberwareStatsShardStatic
{
	statModifiers += 
	[
		"Modifiers.StealthHitDamageBonus", "Modifiers.ADSSpeedPercentBonus", "Modifiers.ADSSpeedPercentBonusQualityToggle", "Modifiers.ReloadSpeedPercentBonus", "Modifiers.ReloadSpeedPercentBonusToggle"
	];
}

[ notQueryable ]
AdvancedTyrosineInjectorCommonPlus : AdvancedTyrosineInjectorCommon
{
	quality = "Quality.CommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.06f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.1f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					10f, 6f, 15f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorUncommon";
}

AdvancedTyrosineInjectorUncommon : AdvancedTyrosineInjectorCommon
{
	quality = "Quality.Uncommon";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.06f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.125f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					12.5f, 6f, 15f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorUncommonPlus";
}

[ notQueryable ]
AdvancedTyrosineInjectorUncommonPlus : AdvancedTyrosineInjectorCommonPlus
{
	quality = "Quality.UncommonPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.07f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.125f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					12.5f, 7f, 15f
				];
			};
		} : GameplayLogicPackage
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorRare";
}

AdvancedTyrosineInjectorRare : AdvancedTyrosineInjectorCommon
{
	quality = "Quality.Rare";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.07f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.15f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					15f, 7f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorRarePlus";
}

[ notQueryable ]
AdvancedTyrosineInjectorRarePlus : AdvancedTyrosineInjectorCommonPlus
{
	quality = "Quality.RarePlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.08f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.15f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					15f, 8f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorEpic";
}

AdvancedTyrosineInjectorEpic : AdvancedTyrosineInjectorCommon
{
	quality = "Quality.Epic";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.08f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.175f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					17.5f, 8f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorEpicPlus";
}

[ notQueryable ]
AdvancedTyrosineInjectorEpicPlus : AdvancedTyrosineInjectorCommonPlus
{
	quality = "Quality.EpicPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.09f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.175f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					17.5f, 9f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorLegendary";
}

AdvancedTyrosineInjectorLegendary : AdvancedTyrosineInjectorCommon
{
	quality = "Quality.Legendary";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.09f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.2f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					20f, 9f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorLegendaryPlus";
}

[ notQueryable ]
AdvancedTyrosineInjectorLegendaryPlus : AdvancedTyrosineInjectorCommonPlus
{
	quality = "Quality.LegendaryPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.1f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.2f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					20f, 10f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "Items.AdvancedTyrosineInjectorLegendaryPlusPlus";
}

[ notQueryable ]
[ EP1 ]
AdvancedTyrosineInjectorLegendaryPlusPlus : AdvancedTyrosineInjectorCommonPlus
{
	quality = "Quality.LegendaryPlusPlus";
	OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Prereqs.AnyTakedown";
					removeWithEffector = false;
					statusEffect = 
					{
						packages = 
						[
							{
								stats = 
								[
									{
										statType = "BaseStats.MaxSpeed";
										modifierType = "AdditiveMultiplier";
										value = 0.11f;
									} : ConstantStatModifier, 
									{
										statType = "BaseStats.HeadshotDamageMultiplier";
										modifierType = "Additive";
										value = 0.21f;
									} : ConstantStatModifier
								];
							} : GameplayLogicPackage
						];
					} : BaseStatusEffect.TyrosineInjectorBuff;
				} : ApplyStatusEffectEffector
			];
			UIData = 
			{
				localizedDescription = "LocKey#91761";
				floatValues = 
				[
					21f, 11f, 15f
				];
			};
		} : GameplayLogicPackage, 
		"Attunements.CoolHeadshotDamage"
	];
	nextUpgradeItem = "";
}

