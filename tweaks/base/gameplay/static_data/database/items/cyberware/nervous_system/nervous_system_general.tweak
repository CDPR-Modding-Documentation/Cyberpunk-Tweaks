package Items
using RTDB, BaseStats, Perks, Prereqs

KerenzikovCommon : NervousSystemModule
{
	displayName = "LocKey#40843";
	localizedDescription = "LocKey#40844";
	iconPath = "cw_nervoussystem_kerenzikov";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanWeaponShootWhileSliding";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanShootWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1.5f, 50, 5
				];
			} : KerenzikovUIData;
		}
	];
	CName cyberwareType = "Kerenzikov";
	buyPrice += 
	[
		"Price.Kerenzikov"
	];
	sellPrice += 
	[
		"Price.Kerenzikov"
	];
}

KerenzikovUncommon : KerenzikovCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1.8f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanWeaponShootWhileSliding";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanShootWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1.8f, 60, 5
				];
			} : KerenzikovUIData;
		}
	];
}

KerenzikovRare : KerenzikovCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.30f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanWeaponShootWhileSliding";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanShootWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.0f, 70, 5
				];
			} : KerenzikovUIData;
		}
	];
}

KerenzikovEpic : KerenzikovCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanWeaponShootWhileSliding";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanShootWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f, 80, 5
				];
			} : KerenzikovUIData;
		}
	];
}

KerenzikovLegendary : KerenzikovCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.23f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanWeaponShootWhileSliding";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanShootWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f, 90, 5
				];
			} : KerenzikovUIData;
		}
	];
}

SynapticAcceleratorCommon : NervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40846";
	localizedDescription = "LocKey#40847";
	iconPath = "cw_nervoussystem_synapticaccelerator";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffCommon";
				} : SynapticAcceleratorEffector
			];
			UIData = 
			{
				floatValues = 
				[
					25, 2
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	CName cyberwareType = "SynapticAccelerator";
	buyPrice += 
	[
		"Price.SynapticAccelerator"
	];
	sellPrice += 
	[
		"Price.SynapticAccelerator"
	];
}

SynapticAcceleratorUncommon : SynapticAcceleratorCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffUncommon";
				} : SynapticAcceleratorEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30, 2
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
}

SynapticAcceleratorRare : SynapticAcceleratorCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffRare";
				} : SynapticAcceleratorEffector
			];
			UIData = 
			{
				floatValues = 
				[
					30, 3
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
}

SynapticAcceleratorEpic : SynapticAcceleratorCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationWhenEnteringCombatCooldownDuration";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffEpic";
				} : SynapticAcceleratorEffector
			];
			UIData = 
			{
				floatValues = 
				[
					40, 3
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
}

SynapticAcceleratorLegendary : SynapticAcceleratorCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 20;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationWhenEnteringCombatCooldownDuration";
					modifierType = "Additive";
					value = 0.15f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffLegendary";
				} : SynapticAcceleratorEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 4
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
}

ReflexRecorderCommon : NervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40849";
	localizedDescription = "LocKey#40850";
	iconPath = "cw_nervoussystem_reflexrecorder";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommon";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 2, 60
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
	CName cyberwareType = "ReflexRecorder";
	buyPrice += 
	[
		"Price.ReflexRecorder"
	];
	sellPrice += 
	[
		"Price.ReflexRecorder"
	];
}

ReflexRecorderUncommon : ReflexRecorderCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffUncommon";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 2.5, 60
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
}

ReflexRecorderRare : ReflexRecorderCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffRare";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					70, 3, 50
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
}

ReflexRecorderLegendary : ReflexRecorderCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffLegendary";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					80, 4, 40
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
}

NeoFiberCommon : NervousSystemModule
{
	string friendlyName = "NeoFiber";
	displayName = "LocKey#40852";
	localizedDescription = "LocKey#40853";
	iconPath = "cw_nervoussystem_neofibre";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					1, 10
				];
			} : NeoFiberUIData;
		}
	];
	CName cyberwareType = "NeoFiber";
	buyPrice += 
	[
		"Price.NeoFiber"
	];
	sellPrice += 
	[
		"Price.NeoFiber"
	];
}

NeoFiberUncommon : NeoFiberCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					2, 10
				];
			} : NeoFiberUIData;
		}
	];
}

NeoFiberRare : NeoFiberCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 3f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					3, 10
				];
			} : NeoFiberUIData;
		}
	];
}

NeoFiberEpic : NeoFiberCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					4, 10
				];
			} : NeoFiberUIData;
		}
	];
}

NeoFiberLegendary : NeoFiberCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				intValues = 
				[
					5, 10
				];
			} : NeoFiberUIData;
		}
	];
}

NervousSystemDischarge : NervousSystemModule
{
	string friendlyName = "JointLock";
	displayName = "LocKey#40861";
	localizedDescription = "LocKey#40862";
	iconPath = "cw_nervoussystem_nervoussystemdischarge";
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasDodgeAir";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40860";
			};
		} : GameplayLogicPackage
	];
	buyPrice += 
	[
		"Price.NervousSystemDischarge"
	];
	sellPrice += 
	[
		"Price.NervousSystemDischarge"
	];
}

ImprovedReactionUncommon : NervousSystemModule
{
	string friendlyName = "Endoskeleton";
	displayName = "LocKey#40855";
	localizedDescription = "LocKey#40856";
	iconPath = "cw_nervoussystem_improvedreaction";
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 0.5;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 0.5;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					0.5f
				];
			} : ImprovedReactionUIData;
		}
	];
	CName cyberwareType = "ImprovedReaction";
	buyPrice += 
	[
		"Price.ImprovedReaction"
	];
	sellPrice += 
	[
		"Price.ImprovedReaction"
	];
}

ImprovedReactionRare : ImprovedReactionUncommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1f
				];
			} : ImprovedReactionUIData;
		}
	];
}

ImprovedReactionEpic : ImprovedReactionUncommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 2;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2f
				];
			} : ImprovedReactionUIData;
		}
	];
}

NeoFiberUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#79835";
}

ImprovedReactionUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40854";
}

ReflexRecorderUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40848";
}

SynapticAcceleratorUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	intValues = 
	[
		60
	];
	localizedDescription = "LocKey#40845";
}

KerenzikovUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40842";
}

CyberRotorsUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40857";
}

SynapticAcceleratorEffector : ApplyStatusEffectEffector
{
	prereqRecord = "Perks.CanEnableSynapticAccelerator";
	effectorClassName = "ApplyStatusEffectEffector";
	statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffCommon";
}

ReflexRecorderEffector : ApplyStatusEffectEffector
{
	prereqRecord = "Perks.CanActivateReflexRecorder";
	effectorClassName = "ApplyStatusEffectEffector";
	statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommon";
}

