package Items
using RTDB, BaseStats, Perks, Prereqs

[ notQueryable ]
KerenzikovCommon : NervousSystemModule
{
	displayName = "LocKey#40843";
	localizedDescription = "LocKey#40844";
	iconPath = "cw_nervoussystem_kerenzikov";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.13f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1.5f, 50, 5
				];
			} : KerenzikovUIData;
		}
	];
	CName cyberwareType = "Kerenzikov";
	buyPrice += 
	[
		"Price.Kerenzikov"
	];
	sellPrice += 
	[
		"Price.Kerenzikov"
	];
	counterpart = "Items.AdvancedKerenzikovUncommon";
}

[ notQueryable ]
KerenzikovUncommon : KerenzikovCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1.8f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.16f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1.8f, 60, 5
				];
			} : KerenzikovUIData;
		}
	];
	counterpart = "Items.AdvancedKerenzikovUncommon";
}

[ notQueryable ]
KerenzikovRare : KerenzikovCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.30f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.19f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.0f, 70, 5
				];
			} : KerenzikovUIData;
		}
	];
	counterpart = "Items.AdvancedKerenzikovUncommon";
}

[ notQueryable ]
KerenzikovEpic : KerenzikovCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2.5f, 80, 5
				];
			} : KerenzikovUIData;
		}
	];
	counterpart = "Items.AdvancedKerenzikovUncommon";
}

[ notQueryable ]
KerenzikovLegendary : KerenzikovCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasKerenzikov";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.KerenzikovCooldownDuration";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.HasKerenzikovSlide";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 3.5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovTimeScale";
					modifierType = "Additive";
					value = 0.1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovPlayerTimeScale";
					modifierType = "Additive";
					value = 0.23f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.CanAimWhileDodging";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3.5f, 90, 5
				];
			} : KerenzikovUIData;
		}
	];
	counterpart = "Items.AdvancedKerenzikovUncommon";
}

[ notQueryable ]
SynapticAcceleratorCommon : NervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40846";
	localizedDescription = "LocKey#40847";
	iconPath = "cw_nervoussystem_synapticaccelerator";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffCommon";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 2f, 50f
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	CName cyberwareType = "SynapticAccelerator";
	buyPrice += 
	[
		"Price.SynapticAccelerator"
	];
	sellPrice += 
	[
		"Price.SynapticAccelerator"
	];
	counterpart = "Items.AdvancedSynapticAcceleratorUncommon";
}

[ notQueryable ]
SynapticAcceleratorUncommon : SynapticAcceleratorCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffUncommon";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 2.5f, 50f
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	counterpart = "Items.AdvancedSynapticAcceleratorUncommon";
}

[ notQueryable ]
SynapticAcceleratorRare : SynapticAcceleratorCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffRare";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 3f, 50f
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	counterpart = "Items.AdvancedSynapticAcceleratorUncommon";
}

[ notQueryable ]
SynapticAcceleratorEpic : SynapticAcceleratorCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 16;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffEpic";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 3.5f, 50f
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	counterpart = "Items.AdvancedSynapticAcceleratorUncommon";
}

[ notQueryable ]
SynapticAcceleratorLegendary : SynapticAcceleratorCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 20;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					prereqRecord = "Perks.CanEnableSynapticAccelerator";
					statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffLegendary";
					detectionStep = 50f;
					maxStacks = 1;
					dontRemoveStacks = true;
				} : DetectionMeterEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50f, 4f, 50f
				];
				intValues = 
				[
					60
				];
			} : SynapticAcceleratorUIData;
		}
	];
	counterpart = "Items.AdvancedSynapticAcceleratorUncommon";
}

[ notQueryable ]
ReflexRecorderCommon : NervousSystemModule
{
	string friendlyName = "SynapticAccelerator";
	displayName = "LocKey#40849";
	localizedDescription = "LocKey#40850";
	iconPath = "cw_nervoussystem_reflexrecorder";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommon";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					50, 2, 60
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
	CName cyberwareType = "ReflexRecorder";
	buyPrice += 
	[
		"Price.ReflexRecorder"
	];
	sellPrice += 
	[
		"Price.ReflexRecorder"
	];
	counterpart = "Items.AdvancedReflexRecorderCommon";
}

[ notQueryable ]
ReflexRecorderUncommon : ReflexRecorderCommon
{
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 8;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffUncommon";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					60, 2.5, 60
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
	counterpart = "Items.AdvancedReflexRecorderCommon";
}

[ notQueryable ]
ReflexRecorderRare : ReflexRecorderCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -10f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffRare";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					70, 3, 50
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
	counterpart = "Items.AdvancedReflexRecorderCommon";
}

[ notQueryable ]
ReflexRecorderLegendary : ReflexRecorderCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationOnHealthDropCooldownDuration";
					modifierType = "Additive";
					value = -20f;
				} : ConstantStatModifier
			];
			effectors = 
			[
				{
					statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffLegendary";
				} : ReflexRecorderEffector
			];
			UIData = 
			{
				floatValues = 
				[
					90, 4, 40
				];
				intValues = 
				[
					25
				];
			} : ReflexRecorderUIData;
		}
	];
	counterpart = "Items.AdvancedReflexRecorderCommon";
}

[ notQueryable ]
NeoFiberCommon : NervousSystemModule
{
	string friendlyName = "NeoFiber";
	displayName = "LocKey#40852";
	localizedDescription = "LocKey#40853";
	iconPath = "cw_nervoussystem_neofibre";
	quality = "Quality.Common";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 1f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	CName cyberwareType = "NeoFiber";
	buyPrice += 
	[
		"Price.NeoFiber"
	];
	sellPrice += 
	[
		"Price.NeoFiber"
	];
	deprecated = true;
}

[ notQueryable ]
NeoFiberUncommon : NeoFiberCommon
{
	quality = "Quality.Uncommon";
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 2f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	deprecated = false;
	counterpart = "Items.AdvancedNeoFiberRare";
}

[ notQueryable ]
NeoFiberRare : NeoFiberCommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 12;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 3f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					3f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	deprecated = false;
	counterpart = "Items.AdvancedNeoFiberRare";
}

[ notQueryable ]
NeoFiberEpic : NeoFiberCommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 15;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 4f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					4f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	deprecated = false;
	counterpart = "Items.AdvancedNeoFiberRare";
}

[ notQueryable ]
NeoFiberLegendary : NeoFiberCommon
{
	quality = "Quality.Legendary";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.MitigationChance";
					modifierType = "Additive";
					value = 5f;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.MitigationStrength";
					modifierType = "Additive";
					value = 10f;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					5f, 10f
				];
			} : NeoFiberUIData;
		}, 
		{
			UIData = 
			{
				localizedDescription = "LocKey#89438";
			};
		} : GameplayLogicPackage
	];
	deprecated = false;
	counterpart = "Items.AdvancedNeoFiberRare";
}

[ notQueryable ]
NervousSystemDischarge : NervousSystemModule
{
	string friendlyName = "JointLock";
	displayName = "LocKey#40861";
	localizedDescription = "LocKey#40862";
	iconPath = "cw_nervoussystem_nervoussystemdischarge";
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.HasDodgeAir";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				iconPath = "ability_silenced";
				localizedDescription = "LocKey#40860";
			};
		} : GameplayLogicPackage
	];
	buyPrice += 
	[
		"Price.NervousSystemDischarge"
	];
	sellPrice += 
	[
		"Price.NervousSystemDischarge"
	];
	deprecated = true;
}

[ notQueryable ]
ImprovedReactionUncommon : NervousSystemModule
{
	string friendlyName = "Endoskeleton";
	displayName = "LocKey#40855";
	localizedDescription = "LocKey#40856";
	iconPath = "cw_nervoussystem_improvedreaction";
	quality = "Quality.Uncommon";
	equipPrereqs = 
	[
		{
			valueToCheck = 10;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 0.5;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 0.5;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					0.5f
				];
			} : ImprovedReactionUIData;
		}
	];
	CName cyberwareType = "ImprovedReaction";
	buyPrice += 
	[
		"Price.ImprovedReaction"
	];
	sellPrice += 
	[
		"Price.ImprovedReaction"
	];
	deprecated = true;
}

[ notQueryable ]
ImprovedReactionRare : ImprovedReactionUncommon
{
	quality = "Quality.Rare";
	equipPrereqs = 
	[
		{
			valueToCheck = 14;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 1;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					1f
				];
			} : ImprovedReactionUIData;
		}
	];
}

[ notQueryable ]
ImprovedReactionEpic : ImprovedReactionUncommon
{
	quality = "Quality.Epic";
	equipPrereqs = 
	[
		{
			valueToCheck = 18;
		} : ReflexesPrereq
	];
	fk< GameplayLogicPackage >[] OnEquip = 
	[
		{
			stats = 
			[
				{
					statType = "BaseStats.TimeDilationSandevistanDuration";
					modifierType = "Additive";
					value = 2;
				} : ConstantStatModifier, 
				{
					statType = "BaseStats.TimeDilationKerenzikovDuration";
					modifierType = "Additive";
					value = 2;
				} : ConstantStatModifier
			];
			UIData = 
			{
				floatValues = 
				[
					2f
				];
			} : ImprovedReactionUIData;
		}
	];
}

[ notQueryable ]
NeoFiberUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#79835";
}

[ notQueryable ]
ImprovedReactionUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40854";
}

[ notQueryable ]
ReflexRecorderUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40848";
}

[ notQueryable ]
IconicReflexRecorderUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#94445";
}

[ notQueryable ]
SynapticAcceleratorUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40845";
}

[ notQueryable ]
KerenzikovUIData : GameplayLogicPackageUIData
{
	iconPath = "ability_silenced";
	localizedDescription = "LocKey#40842";
}

[ notQueryable ]
CyberRotorsUIData : GameplayLogicPackageUIData
{
	iconPath = "";
	localizedDescription = "LocKey#40857";
}

[ notQueryable ]
SynapticAcceleratorEffector : ApplyStatusEffectEffector
{
	prereqRecord = "Perks.CanEnableSynapticAccelerator";
	effectorClassName = "ApplyStatusEffectEffector";
	statusEffect = "BaseStatusEffect.SynapticAcceleratorPlayerBuffCommon";
}

[ notQueryable ]
ReflexRecorderEffector : ApplyStatusEffectEffector
{
	prereqRecord = "Perks.CanActivateReflexRecorder";
	effectorClassName = "ApplyStatusEffectEffector";
	statusEffect = "BaseStatusEffect.ReflexRecorderPlayerBuffCommon";
}

