package RPGActionRewards
using RTDB

Experience : ConstantStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	value = 100;
}

TargetLevelBonus : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	refObject = "Target";
	refStat = "BaseStats.PowerLevel";
	opSymbol = "*";
	value = 3f;
}

TargetHealthBonus : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	refObject = "Target";
	refStat = "BaseStats.Health";
	opSymbol = "*";
	value = 0.01f;
}

TargetItemLevelBonus : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	refObject = "Target";
	refStat = "BaseStats.ItemLevel";
	opSymbol = "*";
	value = 2f;
}

QuickHackReduction : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "AdditiveMultiplier";
	refObject = "Target";
	refStat = "BaseStats.WasQuickHacked";
	opSymbol = "*";
	value = -0.9f;
}

PunchingBagBrawlingBonus : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	refObject = "Player";
	refStat = "BaseStats.Brawling";
	opSymbol = "*";
	value = 5f;
}

ColdBloodStacksBonus : CombinedStatModifier
{
	statType = "BaseStats.Quantity";
	modifierType = "Additive";
	refObject = "Player";
	refStat = "BaseStats.ColdBloodBuffBonus";
	opSymbol = "*";
	value = 15f;
}

NeutralizeTrashEnemy : RewardBase
{
	string name = "NeutralizeTrashEnemy";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 3;
				} : Experience, 
				"RPGActionRewards.TargetHealthBonus"
			];
			type = "Proficiencies.Level";
		}
	];
}

NeutralizeEasyEnemy : RewardBase
{
	string name = "NeutralizeEasyEnemy";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 8;
				} : Experience, 
				"RPGActionRewards.TargetHealthBonus"
			];
			type = "Proficiencies.Level";
		}
	];
}

NeutralizeNormalEnemy : RewardBase
{
	string name = "NeutralizeNormalEnemy";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 9;
				} : Experience, 
				"RPGActionRewards.TargetHealthBonus"
			];
			type = "Proficiencies.Level";
		}
	];
}

NeutralizeHardEnemy : RewardBase
{
	string name = "NeutralizeHardEnemy";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 10;
				} : Experience, 
				"RPGActionRewards.TargetHealthBonus"
			];
			type = "Proficiencies.Level";
		}
	];
}

NeutralizeImpossibleEnemy : RewardBase
{
	string name = "NeutralizeRedEnemy";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 15;
				} : Experience, 
				"RPGActionRewards.TargetHealthBonus"
			];
			type = "Proficiencies.Level";
		}
	];
}

TakedownBonusLevelXP : RewardBase
{
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 4;
				} : Experience, 
				{
					value = 0.5;
				} : TargetLevelBonus
			];
			type = "Proficiencies.Level";
		}
	];
}

ProficiencyReward : RewardBase
{
	string name = "Proficiency Reward";
}

Gunslinger : ProficiencyReward
{
	string name = "Gunslinger";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Gunslinger";
		}
	];
}

Assault : ProficiencyReward
{
	string name = "Assault";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Assault";
		}
	];
}

Kenjutsu : ProficiencyReward
{
	string name = "Kenjutsu";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Kenjutsu";
		}
	];
}

Demolition : ProficiencyReward
{
	string name = "Demolition";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Demolition";
		}
	];
}

Brawling : ProficiencyReward
{
	string name = "Brawling";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Brawling";
		}
	];
}

BrawlingPunchingBag : ProficiencyReward
{
	string name = "Brawling";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 45;
				} : Experience, 
				"RPGActionRewards.PunchingBagBrawlingBonus"
			];
			type = "Proficiencies.Brawling";
		}
	];
}

ColdBlood : ProficiencyReward
{
	string name = "Cold Blood";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 85;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus", "RPGActionRewards.ColdBloodStacksBonus"
			];
			type = "Proficiencies.ColdBlood";
		}
	];
}

Stealth : ProficiencyReward
{
	string name = "Stealth";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Stealth";
		}
	];
}

TakedownAndDisposeStealth : ProficiencyReward
{
	string name = "Stealth";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 200;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus", "RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Stealth";
		}
	];
}

CombatHacking : ProficiencyReward
{
	string name = "Combat Hacking";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus", "RPGActionRewards.QuickHackReduction"
			];
			type = "Proficiencies.CombatHacking";
		}
	];
}

Athletics : ProficiencyReward
{
	string name = "Athletics";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Athletics";
		}
	];
}

AthleticsStaminaUsage : RewardBase
{
	string name = "Athletics";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 75;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Athletics";
		}
	];
}

Hacking : ProficiencyReward
{
	string name = "Netrunning";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 75;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus", "RPGActionRewards.QuickHackReduction"
			];
			type = "Proficiencies.Hacking";
		}
	];
}

Engineering : ProficiencyReward
{
	string name = "Engineering";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 100;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Engineering";
		}
	];
}

Crafting : RewardBase
{
	string name = "Crafting";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 130;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Crafting";
		}
	];
}

Upgrading : RewardBase
{
	string name = "Crafting";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 70;
				} : Experience, 
				"RPGActionRewards.TargetItemLevelBonus"
			];
			type = "Proficiencies.Crafting";
		}
	];
}

Disassemble : RewardBase
{
	string name = "Crafting";
	fk< XPPoints >[] experience = 
	[
		{
			quantityModifiers = 
			[
				{
					value = 8;
				} : Experience, 
				"RPGActionRewards.TargetLevelBonus"
			];
			type = "Proficiencies.Crafting";
		}
	];
}

ExtractParts : RewardBase
{
	string name = "ExtractParts";
	fk< InventoryItem >[] items = 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 5;
		}
	];
}

ExtractPartsActivator : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 2;
		}
	];
}

ExtractPartsTerminal : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 2;
		}, 
		{
			item = "Items.UncommonMaterial1";
			quantity = 1;
		}
	];
}

ExtractPartsVendingMachine : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 2;
		}, 
		{
			item = "Items.UncommonMaterial1";
			quantity = 1;
		}
	];
}

ExtractPartsSecurityTurret : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 4;
		}, 
		{
			item = "Items.UncommonMaterial1";
			quantity = 2;
		}
	];
}

ExtractPartsSecurityAlarm : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 4;
		}, 
		{
			item = "Items.UncommonMaterial1";
			quantity = 1;
		}
	];
}

ExtractPartsDoor : ExtractParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.CommonMaterial1";
			quantity = 1;
		}
	];
}

ProgramParts : RewardBase
{
	string name = "ProgramParts";
	fk< InventoryItem >[] items = [];
}

ProgramPartsAccessPoint : ProgramParts
{
	fk< InventoryItem >[] items += 
	[
		{
			item = "Items.UncommonMaterial1";
			quantity = 1;
		}, 
		{
			item = "Items.CommonMaterial1";
			quantity = 1;
		}
	];
}

