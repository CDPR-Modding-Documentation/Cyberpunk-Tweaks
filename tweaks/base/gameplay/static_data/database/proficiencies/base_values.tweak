package Proficiencies
using RTDB, BaseStats

Level : Proficiency
{
	CName enumName = "Level";
	string enumComment = "General level proficiency";
	int minLevel = 1;
	[ EP1 ]
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "player_primary_level_to_xp";
	loc_name_key = "LocKey#22291";
	loc_desc_key = "LocKey#22292";
	string displayName = "Level";
}

StreetCred : Proficiency
{
	CName enumName = "StreetCred";
	string enumComment = "Reputation gained through game";
	int minLevel = 1;
	int maxLevel = 50;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "player_primary_level_to_xp";
	loc_name_key = "LocKey#22294";
	loc_desc_key = "LocKey#22296";
	string displayName = "Street Cred";
}

StrengthSkill : NewSkillsProficiency
{
	CName enumName = "StrengthSkill";
	int minLevel = 1;
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp_new";
	string displayName = "StrengthSkill";
	loc_name_key = "LocKey#92105";
	loc_desc_key = "LocKey#22333";
	iconPath = "combat_hacking_icon";
	perkAreas = [];
	passiveBonuses = 
	[
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.CarryCapacity"
				];
				intValues = 
				[
					50
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					10
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91035";
				intValues = 
				[
					20
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.CarryCapacity"
				];
				intValues = 
				[
					100
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					15
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Strength_40", "", "", "", "", "Proficiencies.Strength_45", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91232";
				intValues = 
				[
					25
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91233";
				intValues = 
				[
					50, 10
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91833";
				intValues = 
				[
					30, 30, 50
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus
	];
}

ReflexesSkill : NewSkillsProficiency
{
	CName enumName = "ReflexesSkill";
	int minLevel = 1;
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp_new";
	string displayName = "ReflexesSkill";
	loc_name_key = "LocKey#92106";
	loc_desc_key = "LocKey#22333";
	iconPath = "combat_hacking_icon";
	perkAreas = [];
	passiveBonuses = 
	[
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.MaxSpeed"
				];
				intValues = 
				[
					5
				];
			} : GenericMultStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91034";
				intValues = 
				[
					5
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Reflexes_20", "", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.MaxSpeed"
				];
				intValues = 
				[
					5
				];
			} : GenericMultStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91034";
				intValues = 
				[
					10
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Reflexes_40", "", "", "", "", "Proficiencies.Reflexes_45", "", "", "", "", "Proficiencies.Reflexes_50", "", "", "", "", "Proficiencies.Reflexes_55", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91846";
				intValues = 
				[
					40
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus
	];
}

TechnicalAbilitySkill : NewSkillsProficiency
{
	CName enumName = "TechnicalAbilitySkill";
	int minLevel = 1;
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp_new";
	string displayName = "TechnicalAbilitySkill";
	loc_name_key = "LocKey#92108";
	loc_desc_key = "LocKey#22333";
	iconPath = "combat_hacking_icon";
	perkAreas = [];
	passiveBonuses = 
	[
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					15
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Humanity"
				];
				intValues = 
				[
					5
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91037";
				intValues = 
				[
					10
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					25
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Humanity"
				];
				intValues = 
				[
					10
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.TechAbility_40", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91038";
				intValues = 
				[
					15
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#89358";
				floatValues = 
				[
					30
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91554";
				intValues = 
				[
					10, 40
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91918";
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus
	];
	float amountOfCapacityGivenForRipperdocUI = 15f;
}

IntelligenceSkill : NewSkillsProficiency
{
	CName enumName = "IntelligenceSkill";
	int minLevel = 1;
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp_new";
	string displayName = "IntelligenceSkill";
	loc_name_key = "LocKey#92107";
	loc_desc_key = "LocKey#22333";
	iconPath = "combat_hacking_icon";
	perkAreas = [];
	passiveBonuses = 
	[
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					{
						localizedName = "LocKey#51253";
					} : MemoryRegenRate
				];
				intValues = 
				[
					5
				];
			} : GenericMultStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Memory"
				];
				intValues = 
				[
					1
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Intelligence_20", "", "", "", "", {
			uiData = 
			{
				stats = 
				[
					{
						localizedName = "LocKey#51253";
					} : MemoryRegenRate
				];
				intValues = 
				[
					5
				];
			} : GenericMultStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Memory"
				];
				intValues = 
				[
					1
				];
			} : GenericAddStatUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91735";
				intValues = 
				[
					20
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.Intelligence_45", "", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91736";
				intValues = 
				[
					40
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#91737";
				intValues = 
				[
					10
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", {
			uiData = 
			{
				loc_name_key = "LocKey#92484";
				intValues = 
				[
					10
				];
			} : PassiveProficiencyBonusUIData;
		} : PassiveProficiencyBonus
	];
}

CoolSkill : NewSkillsProficiency
{
	CName enumName = "CoolSkill";
	int minLevel = 1;
	int maxLevel = 60;
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp_new";
	string displayName = "CoolSkill";
	loc_name_key = "LocKey#92109";
	loc_desc_key = "LocKey#22333";
	iconPath = "combat_hacking_icon";
	perkAreas = [];
	passiveBonuses = 
	[
		"", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Visibility"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.Cool_10", "", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Cool_20", "", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.Visibility"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.Cool_30", "", "", "", "", "Proficiencies.AddOnePerkPoint", "", "", "", "", "Proficiencies.Cool_40", "", "", "", "", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.ThrowRecovery"
				];
				intValues = 
				[
					30
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		"", "", "", "", "Proficiencies.Cool_50", "", "", "", "", "Proficiencies.Cool_55", "", "", "", "", "Proficiencies.Cool_60"
	];
}

Espionage : NewSkillsProficiency
{
	CName enumName = "Espionage";
	string enumComment = "Espionage perk points gained";
	curveSetName = "player_level_up_curve";
	curveName = "proficiency_level_to_xp";
	int minLevel = 1;
	int maxLevel = 16;
	loc_name_key = "Espionage";
	loc_desc_key = "Espionage perk points";
	string displayName = "Espionage";
}

Gunslinger : Proficiency
{
	CName enumName = "Gunslinger";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Gunslinger";
	loc_name_key = "LocKey#22311";
	loc_desc_key = "LocKey#22313";
	fk< Stat > tiedAttribute = "BaseStats.Reflexes";
	iconPath = "handguns_icon";
	perkAreas = 
	[
		"Perks.Gunslinger_Area_01", "Perks.Gunslinger_Area_02", "Perks.Gunslinger_Area_03", "Perks.Gunslinger_Area_04", "Perks.Gunslinger_Area_05", "Perks.Gunslinger_Area_06", "Perks.Gunslinger_Area_07", "Perks.Gunslinger_Area_08", "Perks.Gunslinger_Area_09", "Perks.Gunslinger_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.AimInTime"
				];
				intValues = 
				[
					20
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					2
				];
			} : GunslingerPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					20
				];
			} : GunslingerPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					10
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : GunslingerWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.GunslingerTrait01";
}

Assault : Proficiency
{
	CName enumName = "Assault";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Assault";
	loc_name_key = "LocKey#22315";
	loc_desc_key = "LocKey#22317";
	fk< Stat > tiedAttribute = "BaseStats.Reflexes";
	iconPath = "rifles_icon";
	perkAreas = 
	[
		"Perks.Assault_Area_01", "Perks.Assault_Area_02", "Perks.Assault_Area_03", "Perks.Assault_Area_04", "Perks.Assault_Area_05", "Perks.Assault_Area_06", "Perks.Assault_Area_07", "Perks.Assault_Area_08", "Perks.Assault_Area_09", "Perks.Assault_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.AimInTime"
				];
				intValues = 
				[
					20
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					2
				];
			} : AssaultPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					10
				];
			} : AssaultPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					10
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : AssaultWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.AssaultTrait01";
}

Kenjutsu : Proficiency
{
	CName enumName = "Kenjutsu";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Kenjutsu";
	loc_name_key = "LocKey#22318";
	loc_desc_key = "LocKey#22319";
	fk< Stat > tiedAttribute = "BaseStats.Reflexes";
	iconPath = "blades_icon";
	perkAreas = 
	[
		"Perks.Kenjutsu_Area_01", "Perks.Kenjutsu_Area_02", "Perks.Kenjutsu_Area_03", "Perks.Kenjutsu_Area_04", "Perks.Kenjutsu_Area_05", "Perks.Kenjutsu_Area_06", "Perks.Kenjutsu_Area_07", "Perks.Kenjutsu_Area_08"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.AttackSpeed"
				];
				intValues = 
				[
					10
				];
			} : KenjutsuWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.StaminaCostReduction"
				];
				intValues = 
				[
					10
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					2
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					15
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					2
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.AttackSpeed"
				];
				intValues = 
				[
					10
				];
			} : KenjutsuWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.StaminaCostReduction"
				];
				intValues = 
				[
					10
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.AttackSpeed"
				];
				intValues = 
				[
					10
				];
			} : KenjutsuWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.BlockFactor"
				];
				intValues = 
				[
					25
				];
			} : KenjutsuWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				loc_name_key = "LocKey#49582";
				stats = 
				[
					"BaseStats.Stamina"
				];
				intValues = 
				[
					5
				];
			} : KenjutsuPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					3
				];
			} : KenjutsuPlayerBonusPercentageUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.KenjutsuTrait01";
}

Demolition : Proficiency
{
	CName enumName = "Demolition";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Demolition";
	loc_name_key = "LocKey#22320";
	loc_desc_key = "LocKey#22321";
	fk< Stat > tiedAttribute = "BaseStats.Strength";
	iconPath = "shotguns_icon";
	perkAreas = 
	[
		"Perks.Demolition_Area_01", "Perks.Demolition_Area_02", "Perks.Demolition_Area_03", "Perks.Demolition_Area_04", "Perks.Demolition_Area_05", "Perks.Demolition_Area_06", "Perks.Demolition_Area_07", "Perks.Demolition_Area_08", "Perks.Demolition_Area_09", "Perks.Demolition_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.AimInTime"
				];
				intValues = 
				[
					20
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					2
				];
			} : DemolitionPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					15
				];
			} : DemolitionPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					10
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					25
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Spread"
				];
				intValues = 
				[
					10
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Recoil"
				];
				intValues = 
				[
					15
				];
			} : DemolitionWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.DemolitionTrait01";
}

Athletics : Proficiency
{
	CName enumName = "Athletics";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Athletics";
	loc_name_key = "LocKey#22299";
	loc_desc_key = "LocKey#22300";
	fk< Stat > tiedAttribute = "BaseStats.Strength";
	iconPath = "athletics_icon";
	perkAreas = 
	[
		"Perks.Athletics_Area_01", "Perks.Athletics_Area_02", "Perks.Athletics_Area_03", "Perks.Athletics_Area_04", "Perks.Athletics_Area_05", "Perks.Athletics_Area_06", "Perks.Athletics_Area_07", "Perks.Athletics_Area_08", "Perks.Athletics_Area_09", "Perks.Athletics_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.CarryCapacity"
				];
				intValues = 
				[
					20
				];
			} : AthleticsPlayerNoPercentageBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Stamina"
				];
				intValues = 
				[
					5
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.StaminaRegenRate"
				];
				intValues = 
				[
					10
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CarryCapacity"
				];
				intValues = 
				[
					40
				];
			} : AthleticsPlayerNoPercentageBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					5
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					5
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CarryCapacity"
				];
				intValues = 
				[
					100
				];
			} : AthleticsPlayerNoPercentageBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					3
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.HealthOutOfCombatRegenRate"
				];
				intValues = 
				[
					10
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					5
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					3
				];
			} : AthleticsPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.AthleticsTrait01";
}

Brawling : Proficiency
{
	CName enumName = "Brawling";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Brawling";
	loc_name_key = "LocKey#22306";
	loc_desc_key = "LocKey#22308";
	fk< Stat > tiedAttribute = "BaseStats.Strength";
	iconPath = "melee_icon";
	perkAreas = 
	[
		"Perks.Brawling_Area_01", "Perks.Brawling_Area_02", "Perks.Brawling_Area_03", "Perks.Brawling_Area_04", "Perks.Brawling_Area_05", "Perks.Brawling_Area_06", "Perks.Brawling_Area_07", "Perks.Brawling_Area_08"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.BlockFactor"
				];
				intValues = 
				[
					10
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.AttackSpeed"
				];
				intValues = 
				[
					5
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.StaminaCostReduction"
				];
				intValues = 
				[
					10
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					15
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					2
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					2
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.BlockFactor"
				];
				intValues = 
				[
					10
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.AttackSpeed"
				];
				intValues = 
				[
					10
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Stamina"
				];
				intValues = 
				[
					5
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					5
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Stamina"
				];
				intValues = 
				[
					5
				];
			} : BrawlingWeaponBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.BrawlingTrait01";
}

ColdBlood : Proficiency
{
	CName enumName = "ColdBlood";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Cold Blood";
	loc_name_key = "LocKey#22302";
	loc_desc_key = "LocKey#22304";
	fk< Stat > tiedAttribute = "BaseStats.Cool";
	iconPath = "cold_blood_icon";
	perkAreas = 
	[
		"Perks.ColdBlood_Area_01", "Perks.ColdBlood_Area_02", "Perks.ColdBlood_Area_03", "Perks.ColdBlood_Area_04", "Perks.ColdBlood_Area_05", "Perks.ColdBlood_Area_06", "Perks.ColdBlood_Area_07", "Perks.ColdBlood_Area_08", "Perks.ColdBlood_Area_09", "Perks.ColdBlood_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					1
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					3
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Health"
				];
				intValues = 
				[
					10
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Stamina"
				];
				intValues = 
				[
					10
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.DummyResistanceStat"
				];
				intValues = 
				[
					5
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.DummyResistanceStat"
				];
				intValues = 
				[
					5
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					5
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					1
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.MaxSpeed"
				];
				intValues = 
				[
					3
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					7
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					5
				];
			} : ColdBloodPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.ColdBloodTrait01";
}

Stealth : Proficiency
{
	CName enumName = "Stealth";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Stealth";
	loc_name_key = "LocKey#22324";
	loc_desc_key = "LocKey#22325";
	fk< Stat > tiedAttribute = "BaseStats.Cool";
	iconPath = "";
	perkAreas = 
	[
		"Perks.Stealth_Area_01", "Perks.Stealth_Area_02", "Perks.Stealth_Area_03", "Perks.Stealth_Area_04", "Perks.Stealth_Area_05", "Perks.Stealth_Area_06", "Perks.Stealth_Area_07", "Perks.Stealth_Area_08", "Perks.Stealth_Area_09", "Perks.Stealth_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			uiData = 
			{
				stats = 
				[
					"BaseStats.MitigationChance"
				];
				intValues = 
				[
					3
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Visibility"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.HealthOutOfCombatRegenRate"
				];
				intValues = 
				[
					10
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.MaxSpeed"
				];
				intValues = 
				[
					3
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					3
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					2
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.MitigationChance"
				];
				intValues = 
				[
					1
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.MaxSpeed"
				];
				intValues = 
				[
					2
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Visibility"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.MitigationChance"
				];
				intValues = 
				[
					1
				];
			} : AssassinationPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Visibility"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.StealthTrait01";
}

Engineering : Proficiency
{
	CName enumName = "Engineering";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Engineering";
	loc_name_key = "LocKey#22326";
	loc_desc_key = "LocKey#22327";
	fk< Stat > tiedAttribute = "BaseStats.TechnicalAbility";
	iconPath = "engineering_icon";
	perkAreas = 
	[
		"Perks.Engineering_Area_01", "Perks.Engineering_Area_02", "Perks.Engineering_Area_03", "Perks.Engineering_Area_04", "Perks.Engineering_Area_05", "Perks.Engineering_Area_06", "Perks.Engineering_Area_07", "Perks.Engineering_Area_08", "Perks.Engineering_Area_09", "Perks.Engineering_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					3
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.ChargeTime"
				];
				intValues = 
				[
					5
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.EffectiveDPS"
				];
				intValues = 
				[
					5
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					3
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					1
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					4
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.ThermalResistance"
				];
				intValues = 
				[
					5
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritChance"
				];
				intValues = 
				[
					1
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CritDamage"
				];
				intValues = 
				[
					10
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.Armor"
				];
				intValues = 
				[
					2
				];
			} : EngineeringPlayerBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.ChargeTime"
				];
				intValues = 
				[
					10
				];
			} : GenericStatDecreaseUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.EngineeringTrait01";
}

Crafting : Proficiency
{
	CName enumName = "Crafting";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Crafting";
	loc_name_key = "LocKey#22328";
	loc_desc_key = "LocKey#22329";
	fk< Stat > tiedAttribute = "BaseStats.TechnicalAbility";
	iconPath = "";
	perkAreas = 
	[
		"Perks.Crafting_Area_01", "Perks.Crafting_Area_02", "Perks.Crafting_Area_03", "Perks.Crafting_Area_04", "Perks.Crafting_Area_05", "Perks.Crafting_Area_06", "Perks.Crafting_Area_07", "Perks.Crafting_Area_08", "Perks.Crafting_Area_09", "Perks.Crafting_Area_10"
	];
	passiveBonuses = 
	[
		"", {
			effectorToTrigger = "Proficiencies.CraftingSkillUncommonRecipesBonus";
			uiData = "Proficiencies.CraftingUncommonRecipesBonusUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CraftingCostReduction"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerDecreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.CraftingSkillRareRecipesBonus";
			uiData = "Proficiencies.CraftingRareRecipesBonusUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.CraftingSkillEpicRecipesBonus";
			uiData = "Proficiencies.CraftingEpicRecipesBonusUIData";
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CraftingCostReduction"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerDecreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CraftingMaterialRetrieveChance"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerIncreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.CraftingSkillIconicRecipesBonus";
			uiData = "Proficiencies.CraftingIconicRecipesBonusUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CraftingMaterialRetrieveChance"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerIncreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.CraftingCostReduction"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerDecreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.UpgradingCostReduction"
				];
				intValues = 
				[
					15
				];
			} : CraftingPlayerDecreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			effectorToTrigger = "Proficiencies.AddPerkPoint";
			uiData = "Proficiencies.GenericSkillAddPerkPointUIData";
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.UpgradingMaterialRetrieveChance"
				];
				intValues = 
				[
					5
				];
			} : CraftingPlayerIncreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = 
			{
				stats = 
				[
					"BaseStats.UpgradingCostReduction"
				];
				intValues = 
				[
					15
				];
			} : CraftingPlayerDecreaseBonusUIData;
		} : PassiveProficiencyBonus, 
		{
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.CraftingTrait01";
}

Hacking : Proficiency
{
	CName enumName = "Hacking";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "Hacking";
	loc_name_key = "LocKey#22330";
	loc_desc_key = "LocKey#22331";
	fk< Stat > tiedAttribute = "BaseStats.Intelligence";
	iconPath = "hacking_icon";
	perkAreas = 
	[
		"Perks.Hacking_Area_01", "Perks.Hacking_Area_02", "Perks.Hacking_Area_03", "Perks.Hacking_Area_04", "Perks.Hacking_Area_05", "Perks.Hacking_Area_06", "Perks.Hacking_Area_07", "Perks.Hacking_Area_08", "Perks.Hacking_Area_09", "Perks.Hacking_Area_10"
	];
	passiveBonuses = 
	[
		"", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddMinigameTimer", "Proficiencies.AddMaterialsEarned", "Proficiencies.AddMinigameTimer", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddMinigameTimer", "Proficiencies.AddOneMemory", "Proficiencies.AddMaterialsEarned", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddMinigameTimer", "Proficiencies.AddMaterialsEarned", "Proficiencies.AddOneMemory", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddMinigameTimer", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddMaterialsEarned", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddBufferSize", {
			uiData = "Proficiencies.GenericMaxSkillBonusUIData";
		} : PassiveProficiencyBonus
	];
	fk< Trait > trait = "Traits.HackingTrait01";
}

CombatHacking : Proficiency
{
	CName enumName = "CombatHacking";
	CName curveSetName = "player_level_up_curve";
	CName curveName = "proficiency_level_to_xp";
	string displayName = "CombatHacking";
	loc_name_key = "LocKey#22332";
	loc_desc_key = "LocKey#22333";
	fk< Stat > tiedAttribute = "BaseStats.Intelligence";
	iconPath = "combat_hacking_icon";
	perkAreas = 
	[
		"Perks.CombatHacking_Area_01", "Perks.CombatHacking_Area_02", "Perks.CombatHacking_Area_03", "Perks.CombatHacking_Area_04", "Perks.CombatHacking_Area_05", "Perks.CombatHacking_Area_06", "Perks.CombatHacking_Area_07", "Perks.CombatHacking_Area_08", "Perks.CombatHacking_Area_09", "Perks.CombatHacking_Area_10"
	];
	passiveBonuses = 
	[
		"", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddQuickHacksDurationBonus", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddOneMemory", "Proficiencies.AddQuickHacksCooldownReduction", "Proficiencies.AddQuickHacksDurationBonus", "Proficiencies.AddQuickHacksCooldownReduction", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddOneMemory", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddQuickHacksCooldownReduction", "Proficiencies.AddQuickHacksDurationBonus", "Proficiencies.AddOnePerkPoint", "Proficiencies.AddOneMemory", "Proficiencies.AddQuickHacksCooldownReduction", "Proficiencies.AddQuickHacksDurationBonus", "Proficiencies.AddQuickHacksCooldownReduction", "Proficiencies.AddOnePerkPoint", "Proficiencies.GenericMaxSkillBonus"
	];
	trait = "Traits.CombatHackingTrait01";
}

