package Effectors
using RTDB, Prereqs

SetFactEffector : Effector
{
	CName effectorClassName = "SetFactEffector";
	CName fact = "";
	int value = 0;
}

ToggleFactEffector : Effector
{
	CName effectorClassName = "ToggleFactEffector";
	CName fact = "";
	int valueOn = 1;
	int valueOff = 0;
}

ApplyStatusEffectByChanceEffector : ApplyStatusEffectEffector
{
	CName effectorClassName = "ApplyStatusEffectByChanceEffector";
	float effectorChance = 1;
}

RemoveAllStatusEffectsEffector : Effector
{
	CName effectorClassName = "RemoveAllStatusEffectsEffector";
}

RemoveStatusEffectsEffector : Effector
{
	CName effectorClassName = "RemoveStatusEffectsEffector";
	string[] statusEffects = [];
}

AddDevelopmentPointEffector : Effector
{
	CName effectorClassName = "AddDevelopmentPointEffector";
	int amountOfPoints = 0;
	string pointsType = "";
}

ResetDevelopmentPointsEffector : Effector
{
	CName effectorClassName = "ResetDevelopmentPointsEffector";
	string pointsType = "";
}

BuyAttributeEffector : Effector
{
	CName effectorClassName = "BuyAttributeEffector";
	string attributeType = "";
}

Crack : TriggerHackingMinigameEffector
{
}

SimpleTriggerAttackEffect : TriggerAttackEffector
{
	CName effectorClassName = "SimpleTriggerAttackEffect";
}

TriggerAttackOnOwnerEffect : TriggerAttackEffector
{
	CName effectorClassName = "TriggerAttackOnOwnerEffect";
	CName attackPositionSlotName = "Chest";
}

TriggerAttackOnTargetEffect : TriggerAttackEffector
{
	CName effectorClassName = "TriggerAttackOnTargetEffect";
	bool isRandom = false;
	float applicationChance = 1f;
}

PlayVFXEffector : Effector
{
	CName effectorClassName = "PlayVFXEffector";
	CName vfxName = "";
	bool startOnUninitialize = false;
}

StopVFXEffector : Effector
{
	CName effectorClassName = "StopVFXEffector";
	CName vfxName = "";
}

StopAndPlayVFXEffector : Effector
{
	CName effectorClassName = "StopAndPlayVFXEffector";
	CName vfxToStart = "";
	CName vfxToStop = "";
}

ChangeAppearanceEffector : Effector
{
	CName effectorClassName = "ChangeAppearanceEffector";
	CName appearanceName = "";
	bool resetAppearance = true;
	CName overrideMaterialName = "";
}

ApplyShaderEffector : Effector
{
	CName effectorClassName = "ApplyShaderEffector";
	CName overrideMaterialName = "";
	CName overrideMaterialTag = "";
	bool applyToOwner = true;
	bool applyToWeapon = false;
}

ModifyDamageEffector : Effector
{
	CName effectorClassName = "ModifyDamageEffector";
	string operationType = "";
	float value = 0f;
}

SampleMulti : Effector
{
	prereqRecord = 
	{
		valueToCheck = 10.0f;
		statType = "Accuracy";
		comparisonType = "GreaterOrEqual";
	} : StatPrereq;
	CName effectorClassName = "StopAndPlayVFXEffector";
	CName vfxToStart = "hacking_glitch_medium";
	CName vfxToStop = "hacking_glitch_medium";
}

PlaySFXEffector : Effector
{
	CName effectorClassName = "PlaySFXEffector";
	CName activationSFXName = "";
	CName deactivationSFXName = "";
	bool startOnUninitialize = false;
	bool unique = false;
}

StopSFXEffector : Effector
{
	CName effectorClassName = "StopSFXEffector";
	CName sfxName = "";
}

StopAndPlaySFXEffector : Effector
{
	CName effectorClassName = "StopAndPlaySFXEffector";
	CName sfxToStart = "";
	CName sfxToStop = "";
}

SelfDestructEffect : TriggerAttackEffector
{
	fk< IPrereq > prereqRecord = 
	{
		duration = 1.5f;
	} : Prereqs.DurationPrereq;
	CName effectorClassName = "TriggerAttackOnOwnerEffect";
	attackRecord = "NPCAttacks.SelfDestructionBomb";
}

StopSelfDestructEffect : StopVFXEffector
{
	fk< IPrereq > prereqRecord = 
	{
		duration = 1.5f;
	} : Prereqs.DurationPrereq;
	CName effectorClassName = "StopVFXEffector";
	CName vfxName = "status_electrocuted";
}

