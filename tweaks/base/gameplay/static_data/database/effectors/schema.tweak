package RTDB
using Prereqs

EffectorTimeDilationDriver
{
	string enumName = "";
	string enumComment = "";
}

Effector
{
	fk< IPrereq > prereqRecord = "Prereqs.AlwaysTruePrereq";
	CName effectorClassName = "";
	bool removeAfterActionCall = false;
	fk< StatModifierGroup >[] statModifierGroups = [];
	fk< StatPoolUpdate >[] statPoolUpdates = [];
}

ContinuousEffector : Effector
{
	float delayTime = 0;
	fk< EffectorTimeDilationDriver > timeDilationDriver = "Effectors.TDD_World";
}

ContinuousAttackEffector : ContinuousEffector
{
	fk< Attack > attackRecord = "";
}

StatPoolUpdate
{
	fk< StatPool > statPoolType = "";
	float statPoolValue = 0;
}

ApplyStatusEffectEffector : Effector
{
	CName effectorClassName = "ApplyStatusEffectEffector";
	fk< StatusEffect > statusEffect = "";
	CName applicationTarget = "";
	bool removeWithEffector = true;
	bool inverted = false;
	float count = 1f;
}

ApplyStatGroupEffector : Effector
{
	CName effectorClassName = "ApplyStatGroupEffector";
	fk< StatModifierGroup > statGroup = "";
	CName applicationTarget = "";
}

ApplyEffectorEffector : Effector
{
	CName effectorClassName = "ApplyEffectorEffector";
	fk< Effector > effectorToApply = "";
	CName applicationTarget = "";
}

AddStatusEffectToAttackEffector : Effector
{
	CName effectorClassName = "AddStatusEffectToAttackEffector";
	fk< StatusEffect > statusEffect = "";
	bool isRandom = true;
	float applicationChance = 1f;
	float stacks = 1f;
}

ModifyStatPoolModifierEffector : Effector
{
	CName effectorClassName = "ModifyStatPoolModifierEffector";
	fk< PoolValueModifier > poolModifier = "";
	string statPoolType = "";
	string modificationType = "";
}

TriggerHackingMinigameEffector : Effector
{
	prereqRecord = "Prereqs.AlwaysTruePrereq";
	CName effectorClassName = "TriggerHackingMinigameEffector";
	fk< RewardBase > reward = "";
	string journalEntry = "";
}

TriggerAttackEffector : Effector
{
	CName effectorClassName = "";
	fk< Attack > attackRecord = "";
}

ApplyLightPresetEffector : Effector
{
	CName effectorClassName = "ApplyLightPresetEffector";
	fk< LightPreset > lightPreset = "";
}

ForceDismembermentEffector : Effector
{
	CName effectorClassName = "ForceDismembermentEffector";
	float dismembermentChance = 1.0f;
	string bodyPart = "LEFT_ARM";
	string woundType = "CLEAN";
	bool shouldKillNPC = false;
	bool isCritical = false;
	bool skipDeathAnim = false;
}

UncontrolledMovementEffector : Effector
{
	CName effectorClassName = "UncontrolledMovementEffector";
	CName debugSourceName = "Default_Effector";
	float ragdollNoGroundThreshold = 0.0f;
	bool ragdollOnCollision = true;
}

SpreadEffector : Effector
{
	effectorClassName = "SpreadEffector";
	fk< ObjectAction > objectAction = "";
	CName effectTag = "spread";
	bool spreadToAllTargetsInTheArea = false;
}

SpreadInitEffector : Effector
{
	effectorClassName = "SpreadInitEffector";
	fk< ObjectAction > objectAction = "";
	int spreadCount = -1;
	int spreadDistance = -1;
	int bonusJumps = 0;
}

AddItemsEffector : Effector
{
	effectorClassName = "AddItemsEffector";
	fk< InventoryItem >[] itemsToAdd = [];
}

BroadcastStimEffector : ContinuousEffector
{
	effectorClassName = "BroadcastStimEffector";
	fk< StimType > type = "";
	float radius = 0.f;
	float delayTime = 1.f;
}

