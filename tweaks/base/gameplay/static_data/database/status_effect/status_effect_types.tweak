package BaseStatusEffectTypes
using RTDB

Misc : StatusEffectType
{
	enumName = "Misc";
	enumComment = "";
}

Quickhack : StatusEffectType
{
	enumName = "Quickhack";
	enumComment = "For quickhack that don't have their own enum. Treat it like 'all the rest quickhacks'";
}

Burning : StatusEffectType
{
	enumName = "Burning";
	enumComment = "";
}

Overload : StatusEffectType
{
	enumName = "Overload";
}

Overheat : StatusEffectType
{
	enumName = "Overheat";
}

SuicideHack : StatusEffectType
{
	enumName = "SuicideHack";
}

BlackwallHack : StatusEffectType
{
	enumName = "BlackwallHack";
}

Berserk : StatusEffectType
{
	enumName = "Berserk";
	enumComment = "";
}

StrongArmsActive : StatusEffectType
{
	enumName = "StrongArmsActive";
	enumComment = "";
}

Blind : StatusEffectType
{
	enumName = "Blind";
	enumComment = "";
}

Bleeding : StatusEffectType
{
	enumName = "Bleeding";
	enumComment = "";
}

Crippled : StatusEffectType
{
	enumName = "Crippled";
	enumComment = "";
}

Deafened : StatusEffectType
{
	enumName = "Deafened";
	enumComment = "";
}

Wounded : StatusEffectType
{
	enumName = "Wounded";
	enumComment = "";
}

Stunned : StatusEffectType
{
	enumName = "Stunned";
	enumComment = "";
}

CommsNoise : StatusEffectType
{
	enumName = "CommsNoise";
	enumComment = "";
}

CommsCall : StatusEffectType
{
	enumName = "CommsCall";
	enumComment = "";
}

Madness : StatusEffectType
{
	enumName = "Madness";
	enumComment = "";
}

SystemCollapse : StatusEffectType
{
	enumName = "SystemCollapse";
	enumComment = "";
}

BrainMelt : StatusEffectType
{
	enumName = "BrainMelt";
	enumComment = "";
}

Exhausted : StatusEffectType
{
	enumName = "Exhausted";
	enumComment = "";
}

Regeneration : StatusEffectType
{
	enumName = "Regeneration";
	enumComment = "";
}

Jam : StatusEffectType
{
	enumName = "Jam";
	enumComment = "";
}

QuickHackStaggerWeapon : StatusEffectType
{
	enumName = "QuickHackStaggerWeapon";
	enumComment = "";
}

QuickHackStaggerLocomotion : StatusEffectType
{
	enumName = "QuickHackStaggerLocomotion";
	enumComment = "";
}

QuickHackFreezeLocomotion : StatusEffectType
{
	enumName = "QuickHackFreezeLocomotion";
	enumComment = "";
}

QuickHackStaggerCyberware : StatusEffectType
{
	enumName = "QuickHackStaggerCyberware";
	enumComment = "";
}

ForceShoot : StatusEffectType
{
	enumName = "ForceShoot";
	enumComment = "";
}

WeakspotOverload : StatusEffectType
{
	enumName = "WeakspotOverload";
	enumComment = "";
}

PassiveBuff : StatusEffectType
{
	enumName = "PassiveBuff";
	enumComment = "";
}

PassiveDebuff : StatusEffectType
{
	enumName = "PassiveDebuff";
}

Stagger : StatusEffectType
{
	enumName = "Stagger";
	enumComment = "";
}

Knockdown : StatusEffectType
{
	enumName = "Knockdown";
	enumComment = "";
}

VehicleKnockdown : StatusEffectType
{
	enumName = "VehicleKnockdown";
	enumComment = "";
}

Poisoned : StatusEffectType
{
	enumName = "Poisoned";
	enumComment = "";
}

Sleep : StatusEffectType
{
	enumName = "Sleep";
	enumComment = "";
}

Grapple : StatusEffectType
{
	enumName = "Grapple";
	enumComment = "";
}

DamageBurst : StatusEffectType
{
	enumName = "DamageBurst";
	enumComment = "";
}

Defeated : StatusEffectType
{
	enumName = "Defeated";
	enumComment = "";
}

DefeatedWithRecover : StatusEffectType
{
	enumName = "DefeatedWithRecover";
	enumComment = "";
}

Kill : StatusEffectType
{
	enumName = "Kill";
	enumComment = "";
}

SoftKill : StatusEffectType
{
	enumName = "SoftKill";
	enumComment = "Lowers HP to 1 to trigger second heart";
}

Unconscious : StatusEffectType
{
	enumName = "Unconscious";
	enumComment = "";
}

JamCommuniations : StatusEffectType
{
	enumName = "JamCommuniations";
}

MuteAudioStims : StatusEffectType
{
	enumName = "MuteAudioStims";
}

Berserker : StatusEffectType
{
	enumName = "Berserker";
	enumComment = "";
}

Pain : StatusEffectType
{
	enumName = "Pain";
	enumComment = "";
}

Sandevistan : StatusEffectType
{
	enumName = "Sandevistan";
	enumComment = "";
}

NetwatcherHackStage1 : StatusEffectType
{
	enumName = "NetwatcherHackStage1";
	enumComment = "";
}

NetwatcherHackStage2 : StatusEffectType
{
	enumName = "NetwatcherHackStage2";
	enumComment = "";
}

NetwatcherHackStage3 : StatusEffectType
{
	enumName = "NetwatcherHackStage3";
	enumComment = "";
}

BlockCoverVisibilityReduction : StatusEffectType
{
	enumName = "BlockCoverVisibilityReduction";
	enumComment = "Player behind cover has reduced visibility (both by being behind cover or leaning/peeking - this debuff is applied when he is detected, shoots weapon or does any other combat action and has a cooldown of X seconds so player doesnt exploit the feature";
}

CPOShocked : StatusEffectType
{
	enumName = "CPOShocked";
	enumComment = "";
}

EMP : StatusEffectType
{
	enumName = "EMP";
	enumComment = "";
}

PlayerCooldown : StatusEffectType
{
	enumName = "PlayerCooldown";
	enumComment = "Used for disabling player abilities for some period of time";
}

SetFriendly : StatusEffectType
{
	enumName = "SetFriendly";
	enumComment = "Setting an NPC as friendly to the player";
}

AndroidTurnOn : StatusEffectType
{
	enumName = "AndroidTurnOn";
	enumComment = "Exiting android turn off state";
}

AndroidTurnOff : StatusEffectType
{
	enumName = "AndroidTurnOff";
	enumComment = "Turning off android";
}

MagnetDeviceNPC : StatusEffectType
{
	enumName = "MagnetDeviceNPC";
	enumComment = "Disarm using magnet device";
}

MechWeaponsDown : StatusEffectType
{
	enumName = "MechWeaponsDown";
	enumComment = "";
}

UncontrolledMovement : StatusEffectType
{
	enumName = "UncontrolledMovement";
	enumComment = "Used for cases where the NPC is moving in an uncontrollable way (eg. being pushed).";
}

Electrocuted : StatusEffectType
{
	enumName = "Electrocuted";
}

Cloaked : StatusEffectType
{
	enumName = "Cloaked";
}

MeleeInvulnerability : StatusEffectType
{
	enumName = "MeleeInvulnerability";
	enumComment = "Used to temproraly evade melee attacks";
}

Housing : StatusEffectType
{
	enumName = "Housing";
	enumComment = "Buffs for player after resting at home";
}

BlockTargetingPlayer : StatusEffectType
{
	enumName = "BlockTargetingPlayer";
	enumComment = "Blocks NPCs from setting player as combat target but doesn't prevent entering combat mode";
}

