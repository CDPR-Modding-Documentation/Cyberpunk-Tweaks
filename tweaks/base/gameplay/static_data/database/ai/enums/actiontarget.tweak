package AIActionTarget
using RTDB

TopThreat : AIActionTarget
{
	CName enumName = "TopThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

VisibleTopThreat : AIActionTarget
{
	CName enumName = "VisibleTopThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

TopFriendly : AIActionTarget
{
	CName enumName = "TopFriendly";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
	targetSlot = "Chest";
}

NearestThreat : AIActionTarget
{
	CName enumName = "NearestThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

VisibleNearestThreat : AIActionTarget
{
	CName enumName = "VisibleNearestThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

FurthestThreat : AIActionTarget
{
	CName enumName = "FurthestThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

VisibleFurthestThreat : AIActionTarget
{
	CName enumName = "VisibleFurthestThreat";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

NearestSquadmate : AIActionTarget
{
	CName enumName = "NearestSquadmate";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
	targetSlot = "Chest";
}

FurthestSquadmate : AIActionTarget
{
	CName enumName = "FurthestSquadmate";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
	targetSlot = "Chest";
}

NearestNavigableSquadmate : AIActionTarget
{
	CName enumName = "NearestNavigableSquadmate";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
	targetSlot = "Chest";
}

FurthestNavigableSquadmate : AIActionTarget
{
	CName enumName = "FurthestNavigableSquadmate";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
	targetSlot = "Chest";
}

NetrunnerProxy : AIActionTarget
{
	CName enumName = "NetrunnerProxy";
	behaviorArgumentName = "NetrunnerProxy";
	bool isObject = true;
	targetSlot = "Chest";
}

CurrentNetrunnerProxy : AIActionTarget
{
	CName enumName = "CurrentNetrunnerProxy";
	behaviorArgumentName = "NetrunnerProxy";
	bool isObject = true;
	targetSlot = "Chest";
}

SquadOfficer : AIActionTarget
{
	CName enumName = "SquadOfficer";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
}

HostileOfficer : AIActionTarget
{
	CName enumName = "HostileOfficer";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

Owner : AIActionTarget
{
	CName enumName = "Owner";
	behaviorArgumentName = "Owner";
	bool isObject = true;
}

CombatTarget : AIActionTarget
{
	CName enumName = "CombatTarget";
	behaviorArgumentName = "CombatTarget";
	bool isObject = true;
	trackingMode = "TargetTracking.SharedBeliefPosition";
	targetSlot = "Chest";
}

FriendlyTarget : AIActionTarget
{
	CName enumName = "FriendlyTarget";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
}

CurrentCover : AIActionTarget
{
	CName enumName = "CurrentCover";
	behaviorArgumentName = "CoverID";
	bool isCoverID = true;
}

SelectedCover : AIActionTarget
{
	CName enumName = "SelectedCover";
	behaviorArgumentName = "CoverID";
	bool isCoverID = true;
}

DesiredCover : AIActionTarget
{
	CName enumName = "DesiredCover";
	behaviorArgumentName = "DesiredCoverID";
	bool isCoverID = true;
}

CommandCover : AIActionTarget
{
	CName enumName = "CommandCover";
	behaviorArgumentName = "CommandCoverID";
	bool isCoverID = true;
}

ConsideredCover : AIActionTarget
{
	CName enumName = "ConsideredCover";
	behaviorArgumentName = "ConsideredCoverID";
	bool isCoverID = true;
}

StimTarget : AIActionTarget
{
	CName enumName = "StimTarget";
	behaviorArgumentName = "StimTarget";
	targetSlot = "pla_default_tgt";
	bool isObject = true;
}

TargetItem : AIActionTarget
{
	CName enumName = "TargetItem";
	behaviorArgumentName = "TargetItem";
	bool isObject = true;
}

TargetDevice : AIActionTarget
{
	CName enumName = "TargetDevice";
	behaviorArgumentName = "TargetDevice";
	bool isObject = true;
}

StimSource : AIActionTarget
{
	CName enumName = "StimSource";
	behaviorArgumentName = "StimSource";
	bool isPosition = true;
}

CustomWorldPosition : AIActionTarget
{
	CName enumName = "CustomWorldPosition";
	behaviorArgumentName = "CustomWorldPosition";
	bool isPosition = true;
}

In_LastKnownPosition : AIActionTarget
{
	CName enumName = "In_LastKnownPosition";
	behaviorArgumentName = "In_LastKnownPosition";
	bool isPosition = true;
}

Out_LastChasePosition : AIActionTarget
{
	CName enumName = "Out_LastChasePosition";
	behaviorArgumentName = "Out_LastChasePosition";
	bool isPosition = true;
}

Out_SearchPosition : AIActionTarget
{
	CName enumName = "Out_SearchPosition";
	behaviorArgumentName = "Out_SearchPosition";
	bool isPosition = true;
}

AssignedVehicle : AIActionTarget
{
	CName enumName = "AssignedVehicle";
	behaviorArgumentName = "AssignedVehicle";
	bool isObject = true;
}

MountedVehicle : AIActionTarget
{
	CName enumName = "MountedVehicle";
	behaviorArgumentName = "MountedVehicle";
	bool isObject = true;
}

MovementDestination : AIActionTarget
{
	CName enumName = "MovementDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

TeleportPosition : AIActionTarget
{
	CName enumName = "TeleportPosition";
	behaviorArgumentName = "TeleportPosition";
	bool isPosition = true;
}

RingFrontDestination : AIActionTarget
{
	CName enumName = "RingFrontDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingFrontLeftDestination : AIActionTarget
{
	CName enumName = "RingFrontLeftDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingLeftDestination : AIActionTarget
{
	CName enumName = "RingLeftDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingBackLeftDestination : AIActionTarget
{
	CName enumName = "RingBackLeftDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingBackDestination : AIActionTarget
{
	CName enumName = "RingBackDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingBackRightDestination : AIActionTarget
{
	CName enumName = "RingBackRightDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingRightDestination : AIActionTarget
{
	CName enumName = "RingRightDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

RingFrontRightDestination : AIActionTarget
{
	CName enumName = "RingFrontRightDestination";
	behaviorArgumentName = "MovementDestination";
	bool isPosition = true;
}

CommandMovementDestination : AIActionTarget
{
	CName enumName = "CommandMovementDestination";
	behaviorArgumentName = "CommandMovementDestination";
	bool isPosition = true;
}

NearestDefeatedSquadmate : AIActionTarget
{
	CName enumName = "NearestDefeatedSquadmate";
	behaviorArgumentName = "FriendlyTarget";
	bool isObject = true;
}

Player : AIActionTarget
{
	CName enumName = "Player";
	behaviorArgumentName = "Player";
	bool isObject = true;
}

ObjectOfInterest : AIActionTarget
{
	CName enumName = "ObjectOfInterest";
	behaviorArgumentName = "ObjectOfInterest";
	isObject = true;
	isPosition = false;
}

PointOfInterest : AIActionTarget
{
	CName enumName = "PointOfInterest";
	behaviorArgumentName = "PointOfInterest";
	isObject = false;
	isPosition = true;
}

SpawnPosition : AIActionTarget
{
	CName enumName = "SpawnPosition";
	behaviorArgumentName = "SpawnPosition";
	isObject = false;
	isPosition = true;
}

