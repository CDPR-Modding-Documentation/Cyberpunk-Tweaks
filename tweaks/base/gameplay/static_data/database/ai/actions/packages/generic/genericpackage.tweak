package GenericArchetype
using RTDB, SpecialActions, CombatDecorator, DashAndDodgeActions, ItemHandling, StatusEffectActions, MovementActions, MeleeActions, CoverActions, ShootActions, ReactionsActions

Success : AIAction
{
	loop = 
	{
		duration = 0.1f;
	};
}

Failure : AIAction
{
	completeWithFailure = true;
}

ImmediateSuccess : AIAction
{
	loop = 
	{
		duration = 0.f;
	};
}

WaitHalfASecond : AIAction
{
	loop = 
	{
		duration = 0.5f;
	};
}

Wait0dot2Second : AIAction
{
	loop = 
	{
		duration = 0.2f;
	};
}

Wait0dot7Second : AIAction
{
	loop = 
	{
		duration = 0.7f;
	};
}

WaitASecond : AIAction
{
	loop = 
	{
		duration = 1.f;
	};
}

WaitAMoment : AIAction
{
	loop = 
	{
		duration = 2.f;
	};
}

Idle : AIAction
{
	loop = 
	{
	};
}

EnterIdle : AIActionSmartComposite
{
	nodes = 
	[
		"GenericArchetype.ImmediateSuccess"
	];
}

EnterAlerted : AIActionSmartComposite
{
	nodes = 
	[
		"GenericArchetype.ImmediateSuccess"
	];
}

EnterCombat : AIActionSmartComposite
{
	nodes = 
	[
		"GenericArchetype.ImmediateSuccess"
	];
}

RangedCombatDecorator : CombatDecorator.RangedCombatDecorator
{
}

CoverBehaviorDecorator : CombatDecorator.CoverBehaviorDecorator
{
}

GoToCoverDecorator : CombatDecorator.GoToCoverDecorator
{
}

InsideCoverDecorator : CombatDecorator.InsideCoverDecorator
{
}

MeleeCombatDecorator : CombatDecorator.MeleeCombatDecorator
{
}

MeleeBlockState : CombatDecorator.MeleeBlockState
{
}

MeleeParryState : CombatDecorator.MeleeParryState
{
}

CoverPresetDecoratorSelector : CombatDecorator.CoverPresetDecoratorSelector
{
}

CoverDecisionDefault : CoverActions.CoverDecisionDefault
{
}

CoverDecisionNoBlind : CoverActions.CoverDecisionNoBlind
{
}

CoverGetOutDefault : CoverActions.CoverGetOutDefault
{
}

SimpleCoverChargedShootDefault : CoverActions.SimpleCoverChargedShootDefault
{
}

SimpleHighCoverShoot : CoverActions.SimpleHighCoverShoot
{
}

SimpleCoverShootDefault : CoverActions.SimpleCoverShootDefault
{
}

SimpleSniperHighCoverShootTech : CoverActions.SimpleSniperHighCoverShootTech
{
}

SimpleSniperCoverShootTech : CoverActions.SimpleSniperCoverShootTech
{
}

SimpleSniperHighCoverShoot : CoverActions.SimpleSniperHighCoverShoot
{
}

SimpleSniperCoverShootDefault : CoverActions.SimpleSniperCoverShootDefault
{
}

HighCoverChargedShoot : CoverActions.HighCoverChargedShoot
{
}

CoverChargedShootDefault : CoverActions.CoverChargedShootDefault
{
}

HighCoverShoot : CoverActions.HighCoverShoot
{
}

CoverShootDefault : CoverActions.CoverShootDefault
{
}

CoverGetBackDefault : CoverActions.CoverGetBackDefault
{
}

SniperHighCoverShootTech : CoverActions.SniperHighCoverShootTech
{
}

SniperCoverShootTech : CoverActions.SniperCoverShootTech
{
}

SniperHighCoverShoot : CoverActions.SniperHighCoverShoot
{
}

SniperCoverShootDefault : CoverActions.SniperCoverShootDefault
{
}

CommandForceSniperHighCoverShootTech : CoverActions.CommandForceSniperHighCoverShootTech
{
}

CommandForceSniperCoverShootTech : CoverActions.CommandForceSniperCoverShootTech
{
}

CommandForceSniperHighCoverShoot : CoverActions.CommandForceSniperHighCoverShoot
{
}

CommandForceSniperCoverShootDefault : CoverActions.CommandForceSniperCoverShootDefault
{
}

CommandForceHighCoverChargedShoot : CoverActions.CommandForceHighCoverChargedShoot
{
}

CommandForceCoverChargedShootDefault : CoverActions.CommandForceCoverChargedShootDefault
{
}

CommandForceHighCoverShoot : CoverActions.CommandForceHighCoverShoot
{
}

CommandForceCoverShootDefault : CoverActions.CommandForceCoverShootDefault
{
}

WeaponHandlingComposite : ItemHandling.WeaponHandlingComposite
{
}

CommandEquipPrimaryWeaponComposite : ItemHandling.CommandEquipPrimaryWeaponComposite
{
}

CommandWeaponHandlingCompositeDecorator : ItemHandling.CommandWeaponHandlingCompositeDecorator
{
}

SimpleReloadSelector : ItemHandling.SimpleReloadSelector
{
}

SimpleCoverReloadSelector : ItemHandling.SimpleCoverReloadSelector
{
}

ReloadSelector : ItemHandling.ReloadSelector
{
}

CoverReloadSelector : ItemHandling.CoverReloadSelector
{
}

SandevistanDashReloadSelector : ItemHandling.SandevistanDashReloadSelector
{
}

ReloadAssaultRifle : ItemHandling.ReloadAssaultRifle
{
}

ReloadHandgun : ItemHandling.ReloadHandgun
{
}

ReloadLightMachineGun : ItemHandling.ReloadLightMachineGun
{
}

ReloadHeavyMachineGun : ItemHandling.ReloadHeavyMachineGun
{
}

ReloadPrecisionRifle : ItemHandling.ReloadPrecisionRifle
{
}

ReloadRevolver : ItemHandling.ReloadRevolver
{
}

ReloadShotgun : ItemHandling.ReloadShotgun
{
}

ReloadShotgunDual : ItemHandling.ReloadShotgunDual
{
}

ReloadSniperRifle : ItemHandling.ReloadSniperRifle
{
}

ReloadSubmachineGun : ItemHandling.ReloadSubmachineGun
{
}

ReloadDefault : ItemHandling.ReloadDefault
{
}

CoverReloadAssaultRifle : ItemHandling.CoverReloadAssaultRifle
{
}

CoverReloadHandgun : ItemHandling.CoverReloadHandgun
{
}

CoverReloadRevolver : ItemHandling.CoverReloadRevolver
{
}

CoverReloadSubmachineGun : ItemHandling.CoverReloadSubmachineGun
{
}

CoverReloadLightMachineGun : ItemHandling.CoverReloadLightMachineGun
{
}

CoverReloadHeavyMachineGun : ItemHandling.CoverReloadHeavyMachineGun
{
}

CoverReloadPrecisionRifle : ItemHandling.CoverReloadPrecisionRifle
{
}

CoverReloadSniperRifle : ItemHandling.CoverReloadSniperRifle
{
}

CoverReloadShotgun : ItemHandling.CoverReloadShotgun
{
}

CoverReloadShotgunDual : ItemHandling.CoverReloadShotgunDual
{
}

CoverReloadDefault : ItemHandling.CoverReloadDefault
{
}

MovementPolicyCompositeDefault : MovementActions.MovementPolicyCompositeDefault
{
}

StrafeMovementPolicyComposite : MovementActions.StrafeMovementPolicyComposite
{
}

RingSelector : MovementActions.RingSelector
{
}

SimpleRingSelector : MovementActions.SimpleRingSelector
{
}

SyncTicket : ReactionsActions.SyncTicket
{
}

ShootSelector : ShootActions.ShootSelector
{
}

CommandForceSimpleShoot : ShootActions.CommandForceSimpleShoot
{
}

CommandForceShootSelector : ShootActions.CommandForceShootSelector
{
}

ShootDefault : ShootActions.ShootDefault
{
}

SimpleShoot : ShootActions.SimpleShoot
{
}

Shoot : ShootActions.Shoot
{
}

WoundedShootLeg : ShootActions.WoundedShootLeg
{
}

SniperShoot : ShootActions.SniperShoot
{
}

CrouchSniperShoot : ShootActions.CrouchSniperShoot
{
}

SniperShootTech : ShootActions.SniperShootTech
{
}

CrouchSniperShootTech : ShootActions.CrouchSniperShootTech
{
}

SniperShootWhileMoving : ShootActions.SniperShootWhileMoving
{
}

SniperShootTechWhileMoving : ShootActions.SniperShootTechWhileMoving
{
}

CrouchPreciseShoot : ShootActions.CrouchPreciseShoot
{
}

ChargedShoot : ShootActions.ChargedShoot
{
}

SandevistanDashShotgunShoot : ShootActions.SandevistanDashShotgunShoot
{
}

SandevistanDashSemiAutoShoot : ShootActions.SandevistanDashSemiAutoShoot
{
}

SandevistanDashShootDefault : ShootActions.SandevistanDashShootDefault
{
}

SimpleWoundedShootLeg : ShootActions.SimpleWoundedShootLeg
{
}

CommandForceSimpleWoundedShootLeg : ShootActions.CommandForceSimpleWoundedShootLeg
{
}

CommandForceSandevistanDashShotgunShoot : ShootActions.CommandForceSandevistanDashShotgunShoot
{
}

CommandForceSandevistanDashSemiAutoShoot : ShootActions.CommandForceSandevistanDashSemiAutoShoot
{
}

CommandForceSandevistanDashShootDefault : ShootActions.CommandForceSandevistanDashShootDefault
{
}

CommandForceChargedShoot : ShootActions.CommandForceChargedShoot
{
}

CommandForceShoot : ShootActions.CommandForceShoot
{
}

CommandForceCrouchPreciseShoot : ShootActions.CommandForceCrouchPreciseShoot
{
}

CommandForceSniperShoot : ShootActions.CommandForceSniperShoot
{
}

CommandForceSniperShootTech : ShootActions.CommandForceSniperShootTech
{
}

CommandForceCrouchSniperShoot : ShootActions.CommandForceCrouchSniperShoot
{
}

CommandForceCrouchSniperShootTech : ShootActions.CommandForceCrouchSniperShootTech
{
}

CommandForceWoundedShootLeg : ShootActions.CommandForceWoundedShootLeg
{
}

SE_Pain : StatusEffectActions.SE_Pain
{
}

SE_PainWorkspot : StatusEffectActions.SE_PainWorkspot
{
}

SE_Stun : StatusEffectActions.SE_Stun
{
}

SE_DefeatedStartup : StatusEffectActions.SE_DefeatedStartup
{
}

SE_DefeatedLoop : StatusEffectActions.SE_DefeatedLoop
{
}

SE_DefeatedRecover : StatusEffectActions.SE_DefeatedRecover
{
}

SE_DefeatedWithRecover_startup : StatusEffectActions.SE_DefeatedWithRecover_startup
{
}

SE_DefeatedWithRecover_loop : StatusEffectActions.SE_DefeatedWithRecover_loop
{
}

SE_DefeatedWithRecover_recover : StatusEffectActions.SE_DefeatedWithRecover_recover
{
}

SE_WeaponJammed : StatusEffectActions.SE_WeaponJammed
{
}

SE_Blind : StatusEffectActions.SE_Blind
{
}

SE_Madness : StatusEffectActions.SE_Madness
{
}

SE_SetFriendly : StatusEffectActions.SE_SetFriendly
{
}

SE_EMP : StatusEffectActions.SE_EMP
{
}

SE_EMPResidual : StatusEffectActions.SE_EMPResidual
{
}

ThrowWeapon : SpecialActions.ThrowWeapon
{
}

EnableBerserker : SpecialActions.EnableBerserker
{
}

NotDodgeAfterHitReactionMonitorCondition : DashAndDodgeActions.NotDodgeAfterHitReactionMonitorConditionDefinition
{
}

DodgeAfterHitReactionCondition : DashAndDodgeActions.DodgeAfterHitReactionConditionDefinition
{
}

DodgeBulletSelectorCondition : DashAndDodgeActions.DodgeBulletSelectorConditionDefinition
{
}

DodgeMeleeSelectorCondition : DashAndDodgeActions.DodgeMeleeSelectorConditionDefinition
{
}

CombatTauntsCondition : MeleeActions.CombatTauntsConditionDefinition
{
}

HitReactionTauntCondition : MeleeActions.HitReactionTauntConditionDefinition
{
}

WoundedArmHandgunCondition : StatusEffectActions.WoundedArmHandgunConditionDefinition
{
}

WoundedArmKnifeCondition : StatusEffectActions.WoundedArmKnifeConditionDefinition
{
}

MeleeParryCondition : MeleeActions.MeleeParryCondition
{
}

MeleeBlockCondition : MeleeActions.MeleeBlockCondition
{
}

MeleeBaseCondition : MeleeActions.MeleeBaseConditionDefinition
{
}

MeleePushAttack01Condition : MeleeActions.MeleePushAttack01ConditionDefinition
{
}

MeleeCloseAttackLightLeft01Condition : MeleeActions.MeleeCloseAttackLightLeft01ConditionDefinition
{
}

MeleeCloseAttackLightRight01Condition : MeleeActions.MeleeCloseAttackLightRight01ConditionDefinition
{
}

MeleeCloseAttackLightBack01Condition : MeleeActions.MeleeCloseAttackLightBack01ConditionDefinition
{
}

MeleeCloseAttackLight01Condition : MeleeActions.MeleeCloseAttackLight01ConditionDefinition
{
}

MeleeCloseAttackLight02Condition : MeleeActions.MeleeCloseAttackLight02ConditionDefinition
{
}

MeleeAttackLight01Condition : MeleeActions.MeleeAttackLight01ConditionDefinition
{
}

MeleeAttackLight02Condition : MeleeActions.MeleeAttackLight02ConditionDefinition
{
}

MeleeAttackLight03Condition : MeleeActions.MeleeAttackLight03ConditionDefinition
{
}

MeleeStrongSingle01Condition : MeleeActions.MeleeStrongSingle01ConditionDefinition
{
}

MeleeStrongSingle02Condition : MeleeActions.MeleeStrongSingle02ConditionDefinition
{
}

MeleeChargeSingle01Condition : MeleeActions.MeleeChargeSandevistan01ConditionDefinition
{
}

MeleeChargeSingle02Condition : MeleeActions.MeleeChargeSandevistan02ConditionDefinition
{
}

MeleeChargeSingle03Condition : MeleeActions.MeleeChargeSandevistan03ConditionDefinition
{
}

MeleeChargeJump01Condition : MeleeActions.MeleeChargeJump01ConditionDefinition
{
}

MeleeChargeJump02Condition : MeleeActions.MeleeChargeJump02ConditionDefinition
{
}

MeleeWoundedAttackLeftHand01Condition : MeleeActions.MeleeWoundedAttackLeftHandConditionDefinition
{
}

MeleeWoundedAttackLeftHand02Condition : MeleeActions.MeleeWoundedAttackLeftHandConditionDefinition
{
}

MeleeWoundedAttackLeftHand03Condition : MeleeActions.MeleeWoundedAttackLeftHandConditionDefinition
{
}

MeleeWoundedAttackRightHand01Condition : MeleeActions.MeleeWoundedAttackRightHandConditionDefinition
{
}

MeleeWoundedAttackRightHand02Condition : MeleeActions.MeleeWoundedAttackRightHandConditionDefinition
{
}

MeleeWoundedAttackRightHand03Condition : MeleeActions.MeleeWoundedAttackRightHandConditionDefinition
{
}

SingleMeleeAttackCharge01Taunt : MeleeActions.SingleMeleeAttackCharge01TauntDefinition
{
}

SingleMeleeAttackCharge02Taunt : SingleMeleeAttackCharge02TauntDefinition
{
}

