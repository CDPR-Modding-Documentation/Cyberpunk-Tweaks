package HybridHMG
using RTDB, CoverActions

DefaultNodeMap : AINodeMap
{
	map = 
	[
		{
			node = "GenericArchetype.CoverDecisionDefault";
			isOverriddenBy = "Gang.CoverDecisionDefault";
		}, 
		{
			node = "GenericArchetype.CoverDecisionNoBlind";
			isOverriddenBy = "Gang.CoverDecisionNoBlind";
		}
	];
}

Map : ActionMap
{
	map = 
	[
		{
			itemType = "ItemType.Wea_Fists";
			map = "Gang_Fists.Map";
		}, 
		{
			itemType = "ItemType.Cyb_StrongArms";
			map = "Gang_Fists.Map";
		}, 
		{
			itemType = "ItemType.Wea_HeavyMachineGun";
			map = "Gang_HMGHybrid.Map";
		}, 
		{
			itemType = "ItemType.Wea_LightMachineGun";
			map = "Gang_HMGHybrid.Map";
		}
	];
	defaultMap = "Gang.DefaultNodeMap";
}

SetCoverExposureAnim_NoBlind : CoverActions.SetCoverExposureAnim_NoBlind
{
	exposureMethodPriority = 
	[
		"AIExposureMethodType.StepOut", "AIExposureMethodType.Lean"
	];
}

SetCoverExposureAnim_All : CoverActions.SetCoverExposureAnim_All
{
	exposureMethodPriority = 
	[
		"AIExposureMethodType.StepOut", "AIExposureMethodType.Lean", "AIExposureMethodType.BlindFire"
	];
}

CoverDecisionDefault : CoverActions.CoverDecisionDefault
{
	subActions = 
	[
		"Gang.SetCoverExposureAnim_All"
	];
	animData = 
	{
		animVariationSubAction = "Gang.SetCoverExposureAnim_All";
	};
}

CoverDecisionNoBlind : CoverActions.CoverDecisionNoBlind
{
	subActions = 
	[
		"Gang.SetCoverExposureAnim_NoBlind"
	];
	animData = 
	{
		animVariationSubAction = "Gang.SetCoverExposureAnim_NoBlind";
	};
}

