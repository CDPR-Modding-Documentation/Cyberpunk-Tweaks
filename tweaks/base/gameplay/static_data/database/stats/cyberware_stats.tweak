package BaseStats
using RTDB

TimeDilationStat : Stat
{
	flags = 
	[
		"EquipOnPlayer"
	];
}

TimeDilationSandevistanDuration : TimeDilationStat
{
	enumComment = "This is both the duration of the sandevistan buff (which also defines the duration of the statemachine), as well as the basis of the statpool ";
	enumName = "TimeDilationSandevistanDuration";
	improvementRelation = "ImprovementRelation.Direct";
}

TimeDilationSandevistanTimeScale : TimeDilationStat
{
	enumName = "TimeDilationSandevistanTimeScale";
	improvementRelation = "ImprovementRelation.Inverse";
	multiplyBy100InText = true;
}

TimeDilationSandevistanEnterCost : TimeDilationStat
{
	enumName = "TimeDilationSandevistanEnterCost";
	improvementRelation = "ImprovementRelation.Inverse";
}

TimeDilationSandevistanCooldownBase : TimeDilationStat
{
	enumName = "TimeDilationSandevistanCooldownBase";
	improvementRelation = "ImprovementRelation.Direct";
}

TimeDilationSandevistanCooldownReduction : TimeDilationStat
{
	enumName = "TimeDilationSandevistanCooldownReduction";
	improvementRelation = "ImprovementRelation.Direct";
}

SandevistanKillRechargeValue : Stat
{
	enumName = "SandevistanKillRechargeValue";
	enumComment = "The value in percent from 0 to 100 of how much sandevistan duration is recovered on kill while during sandevistan";
	improvementRelation = "ImprovementRelation.Direct";
	flags = 
	[
		"EquipOnPlayer"
	];
}

TimeDilationKerenzikovDuration : TimeDilationStat
{
	enumName = "TimeDilationKerenzikovDuration";
	improvementRelation = "ImprovementRelation.Direct";
}

TimeDilationKerenzikovTimeScale : TimeDilationStat
{
	enumName = "TimeDilationKerenzikovTimeScale";
	improvementRelation = "ImprovementRelation.Inverse";
}

TimeDilationKerenzikovPlayerTimeScale : TimeDilationStat
{
	enumName = "TimeDilationKerenzikovPlayerTimeScale";
	improvementRelation = "ImprovementRelation.Inverse";
}

TimeDilationGenericDuration : TimeDilationStat
{
	enumName = "TimeDilationGenericDuration";
	improvementRelation = "ImprovementRelation.Direct";
}

TimeDilationGenericTimeScale : TimeDilationStat
{
	enumName = "TimeDilationGenericTimeScale";
	improvementRelation = "ImprovementRelation.Inverse";
}

KerenzikovCooldownDuration : Stat
{
	enumName = "KerenzikovCooldownDuration";
}

SecondHeartCooldownDuration : Stat
{
	enumName = "SecondHeartCooldownDuration";
}

QuickhackShield : StatFlag
{
	enumName = "QuickhackShield";
}

BlackWallStack : Stat
{
	enumName = "BlackWallStack";
}

KiroshiPierceScanAngle : Stat
{
	enumName = "KiroshiPierceScanAngle";
	enumComment = "The value in degrees for the angle of the wallhack of one of the kiroshi optics cyberwares";
	improvementRelation = "ImprovementRelation.Direct";
}

KiroshiPierceScanRange : Stat
{
	enumName = "KiroshiPierceScanRange";
	enumComment = "The value in meters for the range of the wallhack of one of the kiroshi optics cyberwares";
	improvementRelation = "ImprovementRelation.Direct";
}

CyberwareRechargeSpeedBonus : Stat
{
	enumName = "CyberwareRechargeSpeedBonus";
	enumComment = "Dictates the increase in recharge speed for cyberwares with charges";
	improvementRelation = "ImprovementRelation.Direct";
}

KiroshiMaxZoomLevel : Stat
{
	enumName = "KiroshiMaxZoomLevel";
	enumComment = "Limits how far you can zoom in with kiroshi optics cyberwares";
	improvementRelation = "ImprovementRelation.Direct";
}

BerserkStat : Stat
{
	flags = 
	[
		"EquipOnPlayer"
	];
}

BerserkDurationBase : BerserkStat
{
	enumName = "BerserkDurationBase";
	improvementRelation = "ImprovementRelation.Direct";
}

BerserkCooldownBase : BerserkStat
{
	enumName = "BerserkCooldownBase";
}

BerserkCooldownReduction : BerserkStat
{
	enumName = "BerserkCooldownReduction";
	bool shouldFlipNegativeValue = true;
}

BerserkArmorBonus : BerserkStat
{
	enumName = "BerserkArmorBonus";
}

BerserkResistancesBonus : BerserkStat
{
	enumName = "BerserkResistancesBonus";
}

BerserkMeleeDamageBonus : BerserkStat
{
	enumName = "BerserkMeleeDamageBonus";
}

BerserkRecoilReduction : BerserkStat
{
	enumName = "BerserkRecoilReduction";
}

BerserkSwayReduction : BerserkStat
{
	enumName = "BerserkSwayReduction";
}

BerserkShockwaveDamage : BerserkStat
{
	enumName = "BerserkShockwaveDamage";
}

BerserkHealthRegenBonus : BerserkStat
{
	enumName = "BerserkHealthRegenBonus";
}

BerserkShockwaveRangeBonus : BerserkStat
{
	enumName = "BerserkShockwaveRangeBonus";
}

BerserkKillCount : BerserkStat
{
	enumName = "BerserkKillCount";
}

AutomaticReplenishment : Stat
{
	enumName = "AutomaticReplenishment";
}

HackingPenetration : Stat
{
	enumName = "HackingPenetration";
	improvementRelation = "ImprovementRelation.Direct";
}

HolographicSkinDuration : Stat
{
	enumName = "HolographicSkinDuration";
}

HolographicSkinCooldownDuration : Stat
{
	enumName = "HolographicSkinCooldownDuration";
}

MemoryTrackerCooldownDuration : Stat
{
	enumName = "MemoryTrackerCooldownDuration";
}

TimeDilationOnDodgesDuration : TimeDilationStat
{
	enumName = "TimeDilationOnDodgesDuration";
}

TimeDilationOnDodgesCooldownDuration : TimeDilationStat
{
	enumName = "TimeDilationOnDodgesCooldownDuration";
}

TimeDilationOnDodgesTimeScale : TimeDilationStat
{
	enumName = "TimeDilationOnDodgesTimeScale";
}

TimeDilationOnHealthDropDuration : TimeDilationStat
{
	enumName = "TimeDilationOnHealthDropDuration";
}

TimeDilationOnHealthDropCooldownDuration : TimeDilationStat
{
	enumName = "TimeDilationOnHealthDropCooldownDuration";
}

TimeDilationOnHealthDropTimeScale : TimeDilationStat
{
	enumName = "TimeDilationOnHealthDropTimeScale";
}

TimeDilationWhenEnteringCombatDuration : TimeDilationStat
{
	enumName = "TimeDilationWhenEnteringCombatDuration";
}

TimeDilationWhenEnteringCombatCooldownDuration : TimeDilationStat
{
	enumName = "TimeDilationWhenEnteringCombatCooldownDuration";
}

TimeDilationWhenEnteringCombatTimeScale : TimeDilationStat
{
	enumName = "TimeDilationWhenEnteringCombatTimeScale";
}

Humanity : Stat
{
	enumName = "Humanity";
	localizedName = "LocKey#88306";
	localizedDescription = "LocKey#88307";
	min = 0;
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

Tech_Central_Perk_2_2_Humanity : Stat
{
	enumName = "Tech_Central_Perk_2_2_Humanity";
	min = 0;
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

Tech_Master_Perk_3_Humanity : Stat
{
	enumName = "Tech_Master_Perk_3_Humanity";
	min = 0;
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

Tech_Central_Milestone_2_Discount : Stat
{
	enumName = "Tech_Central_Milestone_2_Discount";
	enumComment = "Helper stat for the cyberware tinkerer (all things cyber) perk";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

CapacityBoosterHumanity : Stat
{
	enumName = "CapacityBoosterHumanity";
	min = 0;
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

AllocationStat : Stat
{
	min = 0;
	max = 10000;
	flags = 
	[
		"EquipOnPlayer"
	];
}

StrengthAvailable : AllocationStat
{
	enumName = "StrengthAvailable";
	localizedName = "LocKey#80931";
}

StrengthAllocated : AllocationStat
{
	enumName = "StrengthAllocated";
	localizedName = "LocKey#80911";
}

ReflexesAvailable : AllocationStat
{
	enumName = "ReflexesAvailable";
	localizedName = "LocKey#80929";
}

ReflexesAllocated : AllocationStat
{
	enumName = "ReflexesAllocated";
	localizedName = "LocKey#80913";
}

IntelligenceAvailable : AllocationStat
{
	enumName = "IntelligenceAvailable";
	localizedName = "LocKey#80928";
}

IntelligenceAllocated : AllocationStat
{
	enumName = "IntelligenceAllocated";
	localizedName = "LocKey#80914";
}

TechnicalAbilityAvailable : AllocationStat
{
	enumName = "TechnicalAbilityAvailable";
	localizedName = "LocKey#80930";
}

TechnicalAbilityAllocated : AllocationStat
{
	enumName = "TechnicalAbilityAllocated";
	localizedName = "LocKey#80915";
}

CoolAvailable : AllocationStat
{
	enumName = "CoolAvailable";
	localizedName = "LocKey#80927";
}

CoolAllocated : AllocationStat
{
	enumName = "CoolAllocated";
	localizedName = "LocKey#80912";
}

HumanityAvailable : AllocationStat
{
	enumName = "HumanityAvailable";
	localizedName = "LocKey#88305";
}

HumanityAllocated : AllocationStat
{
	enumName = "HumanityAllocated";
	localizedName = "LocKey#88304";
}

HumanityOverallocationPossible : AllocationStat
{
	enumName = "HumanityOverallocationPossible";
	enumComment = "Helper stat to show how much overallocation is possible in total";
}

HumanityOverallocated : AllocationStat
{
	enumName = "HumanityOverallocated";
	enumComment = "Helper stat to show how much overallocation has been done so far";
}

HumanityTotalMaxValue : AllocationStat
{
	enumName = "HumanityTotalMaxValue";
	enumComment = "Helper stat to show the total max value possible together with overallocation included";
}

CyberwareTinkererStat : Stat
{
	enumName = "CyberwareTinkererStat";
}

AttunementHelper : Stat
{
	enumName = "AttunementHelper";
	enumComment = "Used purely to help display attunement information on the UI.";
}

AttunementHelper2 : Stat
{
	enumName = "AttunementHelper2";
}

AttunementHelper3 : Stat
{
	enumName = "AttunementHelper3";
}

AttunementHelper4 : Stat
{
	enumName = "AttunementHelper4";
}

AttunementHelper5 : Stat
{
	enumName = "AttunementHelper5";
}

AccumulatedDoT : Stat
{
	enumName = "AccumulatedDoT";
	enumComment = "A stat holding all accumulated DoT damage on a Player. Used in Blood Depleter CW";
	flags = 
	[
		"EquipOnPlayer"
	];
	min = 0;
	max = 9999;
}

AccumulatedDoTDecayEnabled : StatFlag
{
	enumName = "AccumulatedDoTDecayEnabled";
}

AccumulatedDoTDecayDelayOnChange : StatFlag
{
	enumName = "AccumulatedDoTDecayDelayOnChange";
}

AccumulatedDoTDecayStartThreshold : RegenStat
{
	enumName = "AccumulatedDoTDecayStartThreshold";
}

AccumulatedDoTDecayEndThrehold : RegenStat
{
	enumName = "AccumulatedDoTDecayEndThrehold";
}

AccumulatedDoTDecayRate : RegenStat
{
	enumName = "AccumulatedDoTDecayRate";
	min = 0;
	max = 999;
}

AccumulatedDoTDecayStartDelay : RegenStat
{
	enumName = "AccumulatedDoTDecayStartDelay";
}

AntiVirusCooldownReduction : Stat
{
	enumName = "AntiVirusCooldownReduction";
	enumComment = "Reduces the cooldown of the Self-Ice CW";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

RamManagerCooldownReduction : Stat
{
	enumName = "RamManagerCooldownReduction";
	enumComment = "Reduces the cooldown of the Camillo Ram Manager CW";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

JenkinsHelper : Stat
{
	enumName = "JenkinsHelper";
	enumComment = "A stat used for the JenkinsHelper statpool";
	flags = 
	[
		"EquipOnPlayer"
	];
}

JenkinsHelperEmptyStat : Stat
{
	enumName = "JenkinsHelperEmptyStat";
	enumComment = "A stat used for constant regen modifiers";
}

JenkinsHelperRegenEnabled : StatFlag
{
	enumName = "JenkinsHelperRegenEnabled";
}

JenkinsHelperDecayEnabled : StatFlag
{
	enumName = "JenkinsHelperDecayEnabled";
}

JenkinsHelperRegenPerSecond : RegenStat
{
	enumName = "JenkinsHelperRegenPerSecond";
}

JenkinsHelperDecayPerSecond : RegenStat
{
	enumName = "JenkinsHelperDecayPerSecond";
}

BerserkDynamicHealthBonusOnActivation : Stat
{
	enumName = "BerserkDynamicHealthBonusOnActivation";
	flags = 
	[
		"EquipOnPlayer"
	];
}

BerserkStaticHealthBonusOnActivation : Stat
{
	enumName = "BerserkStaticHealthBonusOnActivation";
	flags = 
	[
		"EquipOnPlayer"
	];
}

BerserkHealthBonusPerKillCount : Stat
{
	enumName = "BerserkHealthBonusPerKillCount";
	flags = 
	[
		"EquipOnPlayer"
	];
}

ElectroshockMechanismProcChance : Stat
{
	enumName = "ElectroshockMechanismProcChance";
	enumComment = "A stat used to supply the chance for the shock-n-awe cyberware to trigger";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

PainEditorDamageReduction : Stat
{
	enumName = "PainEditorDamageReduction";
	enumComment = "A stat used to supply the value for the pain editor cyberware's damage reduction";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

MicroGeneratorExplosionDamage : Stat
{
	enumName = "MicroGeneratorExplosionDamage";
	enumComment = "Damage dealt by the new MicroGenerator cyberware";
	flags = 
	[
		"EquipOnPlayer"
	];
	improvementRelation = "ImprovementRelation.Direct";
}

TimeBankCharges : Stat
{
	enumName = "TimeBankCharges";
	enumComment = "A stat holding number of charges for Time Bank cyberware. Used in Time Bank CW";
	flags = 
	[
		"EquipOnPlayer"
	];
	min = 0;
	max = 100;
}

TimeBankRegenEnabled : StatFlag
{
	enumName = "TimeBankRegenEnabled";
}

TimeBankRegenDelayOnChange : StatFlag
{
	enumName = "TimeBankRegenDelayOnChange";
}

TimeBankRegenStartThreshold : RegenStat
{
	enumName = "TimeBankRegenStartThreshold";
}

TimeBankRegenEndThrehold : RegenStat
{
	enumName = "TimeBankRegenEndThrehold";
}

TimeBankRegenRate : RegenStat
{
	enumName = "TimeBankRegenRate";
	min = 0;
	max = 1;
}

TimeBankRegenStartDelay : RegenStat
{
	enumName = "TimeBankRegenStartDelay";
}

OpticalCamoCoolAttunementDuration : Stat
{
	enumName = "CoolOpticalDuration";
}

OpticalCamoDurationMultiplier : Stat
{
	enumName = "OpticalCamoDurationMultiplier";
}

HealthModifierHelper : Health
{
	enumName = "HealthModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Health"
	];
}

CarryCapacityModifierHelper : CarryCapacity
{
	enumName = "CarryCapacityModifierHelper";
	flags = [];
	themes = 
	[
		"Utility"
	];
}

HealthGeneralRegenRateAddModifierHelper : HealthGeneralRegenRateAdd
{
	enumName = "HealthGeneralRegenRateAddModifierHelper";
	flags = [];
}

HealthGeneralRegenRateMultModifierHelper : HealthGeneralRegenRateMult
{
	enumName = "HealthGeneralRegenRateMultModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Healing"
	];
}

HealingItemsEffectPercentBonusModifierHelper : HealingItemsEffectPercentBonus
{
	enumName = "HealingItemsEffectPercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Healing", "Consumables"
	];
}

StealthHitDamageBonusModifierHelper : StealthHitDamageBonus
{
	enumName = "StealthHitDamageBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Stealth"
	];
}

ExplosionResistanceModifierHelper : ExplosionResistance
{
	enumName = "ExplosionResistanceModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "CloseRange"
	];
}

MeleeResistanceModifierHelper : MeleeResistance
{
	enumName = "MeleeResistanceModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "CloseRange"
	];
}

BossResistanceModifierHelper : BossResistance
{
	enumName = "BossResistanceModifierHelper";
	flags = [];
}

QuickhackResistanceModifierHelper : QuickhackResistance
{
	enumName = "QuickhackResistanceModifierHelper";
	flags = [];
}

MechResistanceModifierHelper : MechResistance
{
	enumName = "MechResistanceModifierHelper";
	flags = [];
}

QuickhacksCooldownReductionModifierHelper : QuickhacksCooldownReduction
{
	enumName = "QuickhacksCooldownReductionModifierHelper";
	flags = [];
}

BonusQuickHackDamageModifierHelper : BonusQuickHackDamage
{
	enumName = "BonusQuickHackDamageModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "QuickHacks"
	];
}

DurationBonusQuickhackModifierHelper : DurationBonusQuickhack
{
	enumName = "DurationBonusQuickhackModifierHelper";
	flags = [];
}

BonusDamageAgainstBossesModifierHelper : BonusDamageAgainstBosses
{
	enumName = "BonusDamageAgainstBossesModifierHelper";
	flags = [];
}

CritChanceModifierHelper : CritChance
{
	enumName = "CritChanceModifierHelper";
	flags = [];
}

CritDamageModifierHelper : CritDamage
{
	enumName = "CritDamageModifierHelper";
	flags = [];
}

MitigationChanceModifierHelper : MitigationChance
{
	enumName = "MitigationChanceModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive"
	];
}

MitigationStrengthModifierHelper : MitigationStrength
{
	enumName = "MitigationStrengthModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive"
	];
}

MaxSpeedModifierHelper : MaxSpeed
{
	enumName = "MaxSpeedModifierHelper";
	flags = [];
}

BonusRicochetDamageModifierHelper : BonusRicochetDamage
{
	enumName = "BonusRicochetDamageModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Ranged"
	];
}

BleedingApplicationRateModifierHelper : BleedingApplicationRate
{
	enumName = "BleedingApplicationRateModifierHelper";
	flags = [];
}

PoisonedApplicationRateModifierHelper : PoisonedApplicationRate
{
	enumName = "PoisonedApplicationRateModifierHelper";
	flags = [];
}

ElectrocutedApplicationRateModifierHelper : ElectrocutedApplicationRate
{
	enumName = "ElectrocutedApplicationRateModifierHelper";
	flags = [];
}

BurningApplicationRateModifierHelper : BurningApplicationRate
{
	enumName = "BurningApplicationRateModifierHelper";
	flags = [];
}

ElectricDamageModifierHelper : ElectricDamage
{
	enumName = "ElectricDamageModifierHelper";
	flags = [];
}

ThermalDamageModifierHelper : ThermalDamage
{
	enumName = "ThermalDamageModifierHelper";
	flags = [];
}

PhysicalDamageModifierHelper : PhysicalDamage
{
	enumName = "PhysicalDamageModifierHelper";
	flags = [];
}

ChemicalDamageModifierHelper : ChemicalDamage
{
	enumName = "ChemicalDamageModifierHelper";
	flags = [];
}

ThermalResistanceModifierHelper : ThermalResistance
{
	enumName = "ThermalResistanceModifierHelper";
	flags = [];
}

ElectricResistanceModifierHelper : ElectricResistance
{
	enumName = "ElectricResistanceModifierHelper";
	flags = [];
}

ChemicalResistanceModifierHelper : ChemicalResistance
{
	enumName = "ChemicalResistanceModifierHelper";
	flags = [];
}

HeadshotDamageMultiplierModifierHelper : HeadshotDamageMultiplier
{
	enumName = "HeadshotDamageMultiplierModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Ranged"
	];
}

HealthRegainOnKillModifierHelper : HealthRegainOnKill
{
	enumName = "HealthRegainOnKillModifierHelper";
	flags = [];
}

ItemArmorModifierHelper : ItemArmor
{
	enumName = "ItemArmorModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Armor"
	];
}

MeleeDamagePercentBonusModifierHelper : MeleeDamagePercentBonus
{
	enumName = "MeleeDamagePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Melee"
	];
}

GrenadeDamagePercentBonusModifierHelper : GrenadeDamagePercentBonus
{
	enumName = "GrenadeDamagePercentBonusModifierHelper";
	flags = [];
}

HealingItemsChargesRegenMultModifierHelper : HealingItemsChargesRegenMult
{
	enumName = "HealingItemsChargesRegenMultModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Healing", "Consumables"
	];
}

RecoilPercentBonusModifierHelper : RecoilPercentBonus
{
	enumName = "RecoilPercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Ranged"
	];
}

DamageOverTimeResistanceModifierHelper : RecoilPercentBonus
{
	enumName = "DamageOverTimeResistanceModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive"
	];
}

RamOnKillModifierHelper : RamOnKill
{
	enumName = "RamOnKillModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "QuickHacks"
	];
}

GrenadesChargesRegenMultModifierHelper : GrenadesChargesRegenMult
{
	enumName = "GrenadesChargesRegenMultModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Consumables"
	];
}

ADSSpeedPercentBonusModifierHelper : ADSSpeedPercentBonus
{
	enumName = "ADSSpeedPercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Ranged", "Utility"
	];
}

VisibilityReductionModifierHelper : VisibilityReduction
{
	enumName = "VisibilityReductionModifierHelper";
	flags = [];
	themes = 
	[
		"Stealth", "Utility"
	];
}

CritChanceBonusModifierHelper : CritChanceBonus
{
	enumName = "CritChanceBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

CritDamageBonusModifierHelper : CritDamageBonus
{
	enumName = "CritDamageBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

BonusPercentDamageToEnemiesBelowHalfHealthModifierHelper : BonusPercentDamageToEnemiesBelowHalfHealth
{
	enumName = "BonusPercentDamageToEnemiesBelowHalfHealthModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

BonusPercentDamageToEnemiesAtFullHealthModifierHelper : BonusPercentDamageToEnemiesAtFullHealth
{
	enumName = "BonusPercentDamageToEnemiesAtFullHealthModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Stealth"
	];
}

PercentDamageReductionFromPoisonedEnemiesModifierHelper : PercentDamageReductionFromPoisonedEnemies
{
	enumName = "PercentDamageReductionFromPoisonedEnemiesModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Utility"
	];
}

DodgeStaminaCostReductionModifierHelper : DodgeStaminaCostReduction
{
	enumName = "DodgeStaminaCostReductionModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Utility"
	];
}

ChemicalDamagePercentBonusModifierHelper : ChemicalDamagePercentBonus
{
	enumName = "ChemicalDamagePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

ThermalDamagePercentBonusModifierHelper : ThermalDamagePercentBonus
{
	enumName = "ThermalDamagePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

ElectricDamagePercentBonusModifierHelper : ElectricDamagePercentBonus
{
	enumName = "ElectricDamagePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

HealOnKillingBleedingTargetModifierHelper : HealOnKillingBleedingTarget
{
	enumName = "HealOnKillingBleedingTargetModifierHelper";
	flags = [];
	themes = 
	[
		"Defensive", "Healing", "Utility"
	];
}

BonusCritChanceVsElectrocutedEnemiesModifierHelper : BonusCritChanceVsElectrocutedEnemies
{
	enumName = "BonusCritChanceVsElectrocutedEnemiesModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Utility"
	];
}

BonusPercentDamageVsBurningEnemiesModifierHelper : BonusPercentDamageVsBurningEnemies
{
	enumName = "BonusPercentDamageVsBurningEnemiesModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Utility"
	];
}

ExplosionDamagePercentBonusModifierHelper : ExplosionDamagePercentBonus
{
	enumName = "ExplosionDamagePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Consumables"
	];
}

DamageOverTimePercentBonusModifierHelper : DamageOverTimePercentBonus
{
	enumName = "DamageOverTimePercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive"
	];
}

ReloadSpeedPercentBonusModifierHelper : ReloadSpeedPercentBonus
{
	enumName = "ReloadSpeedPercentBonusModifierHelper";
	flags = [];
	themes = 
	[
		"Offensive", "Ranged"
	];
}

SecondaryModifiersAdditiveMultiplier : Stat
{
	enumName = "SecondaryModifiersAdditiveMultiplier";
	enumComment = "Boosts all secondary modifiers on all CW";
}

Airdropped : StatFlag
{
	enumName = "Airdropped";
	enumComment = "Used to mark iconic cyberwares in treasure loot from airdrops";
}

IconicCWFromTreasureChestLooted : StatFlag
{
	enumName = "IconicCWFromTreasureChestLooted";
	enumComment = "Used to mark iconic OS cyberwares in loot from treasure chests";
}

