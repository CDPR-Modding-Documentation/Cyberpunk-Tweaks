package DeviceAction
using RTDB, QuickHack, Prereqs

ActionEngineering : ObjectAction
{
	actionName = "ActionEngineering";
	rewards = 
	[
		"RPGActionRewards.Engineering"
	];
	objectActionUI = "Interactions.ActionEngineering";
}

ActionHacking : ObjectAction
{
	actionName = "ActionHacking";
	objectActionUI = "Interactions.ActionHacking";
}

ActionDemolition : ObjectAction
{
	actionName = "ActionDemolition";
	rewards = 
	[
		"RPGActionRewards.Athletics"
	];
	objectActionUI = "Interactions.ActionDemolition";
}

DisposeBody : ObjectAction
{
	actionName = "DisposeBody";
	rewards = 
	[
		"RPGActionRewards.Stealth"
	];
}

TakedownAndDisposeBody : ObjectAction
{
	actionName = "TakedownAndDisposeBody";
	rewards = 
	[
		"RPGActionRewards.TakedownAndDisposeStealth"
	];
}

NonlethalTakedownAndDisposeBody : ObjectAction
{
	actionName = "NonlethalTakedownAndDisposeBody";
	rewards = 
	[
		"RPGActionRewards.TakedownAndDisposeStealth"
	];
}

DeviceQuickHack : QuickHack
{
	actionName = "DeviceQuickHack";
	interactionLayer = "any";
	targetActivePrereqs += 
	[
		"Prereqs.NetworkBreachedActive"
	];
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 1;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
	objectActionType = "ObjectActionType.DeviceQuickHack";
	activationTime += 
	[
		{
			statType = "BaseStats.QuickHackUpload";
			modifierType = "Additive";
			value = 0.5f;
		} : ConstantStatModifier
	];
	rewards = 
	[
		"RPGActionRewards.CombatHacking"
	];
	hackCategory = "HackCategories.DeviceHack";
}

MalfunctionClassHack : DeviceQuickHack
{
	actionName = "MalfunctionClassHack";
	gameplayCategory = "ActionCategories.Malfunction";
	fk< InteractionBase > objectActionUI = "Interactions.MalfunctionHack";
}

BroadcastClassHack : DeviceQuickHack
{
	actionName = "BroadcastClassHack";
	gameplayCategory = "ActionCategories.Broadcast";
}

EndMalfunction : ObjectAction
{
	actionName = "EndMalfunction";
	gameplayCategory = "ActionCategories.Malfunction";
	fk< InteractionBase > objectActionUI = "Interactions.MalfunctionHack";
}

ToggleStateClassHack : DeviceQuickHack
{
	actionName = "ToggleStateClassHack";
	gameplayCategory = "ActionCategories.ToggleState";
	fk< InteractionBase > objectActionUI = "Interactions.ToggleStateHack";
}

OverloadClassHack : DeviceQuickHack
{
	actionName = "OverloadClassHack";
	gameplayCategory = "ActionCategories.OverLoad";
	fk< InteractionBase > objectActionUI = "Interactions.OverloadHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 6;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

TakeControlClassHack : DeviceQuickHack
{
	actionName = "TakeControlClassHack";
	gameplayCategory = "ActionCategories.TakeControl";
	fk< InteractionBase > objectActionUI = "Interactions.TakeControlHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 10;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

TakeControlCameraClassHack : DeviceQuickHack
{
	actionName = "TakeControlCameraClassHack";
	gameplayCategory = "ActionCategories.TakeControl";
	fk< InteractionBase > objectActionUI = "Interactions.TakeControlCameraHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 2;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

OverrideAttitudeClassHack : DeviceQuickHack
{
	actionName = "OverrideAttitudeClassHack";
	gameplayCategory = "ActionCategories.OverrideAttitude";
	fk< InteractionBase > objectActionUI = "Interactions.OverrideAttitudeHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 2;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

TurretOverrideAttitudeClassHack : OverrideAttitudeClassHack
{
	actionName = "TurretOverrideAttitudeClassHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 8;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

DataExtractionClassHack : DeviceQuickHack
{
	actionName = "DataExtractionClassHack";
	gameplayCategory = "ActionCategories.DataExtraction";
	fk< InteractionBase > objectActionUI = "Interactions.DataExtractionHack";
}

SuicideClassHack : BroadcastClassHack
{
	actionName = "SuicideClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.SuicideHack";
}

BlindClassHack : BroadcastClassHack
{
	actionName = "BlindClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.BlindHack";
}

DeafClassHack : BroadcastClassHack
{
	actionName = "DeafClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.HackVolume";
}

ExplodeClassHack : DeviceQuickHack
{
	actionName = "ExplodeClassHack";
	gameplayCategory = "ActionCategories.OverLoad";
	fk< InteractionBase > objectActionUI = "Interactions.Explode";
}

JamWeaponClassHack : BroadcastClassHack
{
	actionName = "JamWeaponClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.JamWeaponAction";
}

GrenadeClassHack : BroadcastClassHack
{
	actionName = "GrenadeClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.GrenadeHack";
}

HeartAttackClassHack : DeviceQuickHack
{
	actionName = "HeartAttackClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.HeartattackHack";
}

OverrideAuthorizationClassHack : DeviceQuickHack
{
	actionName = "OverrideAuthorizationClassHack";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackAuthorization";
	gameplayCategory = "ActionCategories.DataExtraction";
}

ToggleTakeOverControl : ObjectAction
{
	actionName = "ToggleTakeOverControl";
	fk< InteractionBase > objectActionUI = "Interactions.TakeControl";
	gameplayCategory = "ActionCategories.TakeControl";
}

QuickHackToggleON : ToggleStateClassHack
{
	actionName = "QuickHackToggleON";
	fk< InteractionBase > objectActionUI = "Interactions.ToggleOnHack";
}

ChangeMusicAction : ObjectAction
{
	actionName = "ChangeMusicAction";
	fk< InteractionBase > objectActionUI = "Interactions.ChangeMusicHack";
}

QuickHackDistraction : ObjectAction
{
	actionName = "QuickHackDistraction";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackDistraction";
}

GlitchScreen : ObjectAction
{
	actionName = "GlitchScreen";
	fk< InteractionBase > objectActionUI = "Interactions.GlitchScreen";
}

GlitchScreenSuicide : SuicideClassHack
{
	actionName = "GlitchScreenSuicide";
	fk< InteractionBase > objectActionUI = "Interactions.BroadcastSuicideHack";
}

GlitchScreenJamWeapon : JamWeaponClassHack
{
	actionName = "GlitchScreenJamWeapon";
	fk< InteractionBase > objectActionUI = "Interactions.BroadcastJamWeaponAction";
}

GlitchScreenBlind : BlindClassHack
{
	actionName = "GlitchScreenBlind";
	fk< InteractionBase > objectActionUI = "Interactions.BroadcastBlindHack";
}

GlitchScreenHeartAttack : HeartAttackClassHack
{
	actionName = "GlitchScreenHeartAttack";
	fk< InteractionBase > objectActionUI = "Interactions.BroadcastHeartattackHack";
}

GlitchScreenGrenade : GrenadeClassHack
{
	actionName = "GlitchScreenGrenade";
	fk< InteractionBase > objectActionUI = "Interactions.BroadcastGrenadeHack";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 7;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

SetDeviceAttitude : OverrideAttitudeClassHack
{
	actionName = "SetDeviceAttitude";
	fk< InteractionBase > objectActionUI = "Interactions.SetDeviceAttitude";
}

SetDeviceTagKillMode : OverrideAttitudeClassHack
{
	actionName = "SetDeviceTagKillMode";
	fk< InteractionBase > objectActionUI = "Interactions.SetDeviceSupprotMode";
	costs = 
	[
		{
			costMods += 
			[
				{
					value = 4;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
}

ForceIgnoreTargets : OverrideAttitudeClassHack
{
	actionName = "ForceIgnoreTargets";
	fk< InteractionBase > objectActionUI = "Interactions.ForceIgnoreTargets";
}

CameraTagSeenEnemies : OverrideAttitudeClassHack
{
	actionName = "CameraTagSeenEnemies";
	fk< InteractionBase > objectActionUI = "Interactions.CameraTagSeenEnemies";
}

ForceCarAlarm : MalfunctionClassHack
{
	actionName = "ForceCarAlarm";
	fk< InteractionBase > objectActionUI = "Interactions.TurnOnCarAlarm";
}

ActivateDevice : ObjectAction
{
	actionName = "ActivateDevice";
	fk< InteractionBase > objectActionUI = "Interactions.Activate";
}

QuickHackToggleOpen : ToggleStateClassHack
{
	actionName = "QuickHackToggleOpen";
	fk< InteractionBase > objectActionUI = "Interactions.HackOpen";
}

QuickHackCallElevator : ToggleStateClassHack
{
	actionName = "QuickHackCallElevator";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackCallElevator";
}

QuickHackAuthorization : OverrideAuthorizationClassHack
{
	actionName = "QuickHackAuthorization";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackAuthorization";
}

DetonateC4 : ObjectAction
{
	actionName = "DetonateC4";
	fk< InteractionBase > objectActionUI = "Interactions.DetonateC4";
}

QuickHackDistractExplosive : MalfunctionClassHack
{
	actionName = "QuickHackDistractExplosive";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackDistractExplosive";
}

QuickHackExplodeExplosive : OverloadClassHack
{
	actionName = "QuickHackExplodeExplosive";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackExplodeExplosive";
}

ToggleTiltBlinders : ObjectAction
{
	actionName = "ToggleTiltBlinders";
	fk< InteractionBase > objectActionUI = "Interactions.TiltBlindersOpen";
}

ToggleAlarm : ObjectAction
{
	actionName = "ToggleAlarm";
	fk< InteractionBase > objectActionUI = "Interactions.StartAlarm";
}

ToggleActivation : ObjectAction
{
	actionName = "ToggleActivation";
	fk< InteractionBase > objectActionUI = "Interactions.Activate";
}

FactQuickHack : DataExtractionClassHack
{
	actionName = "FactQuickHack";
	fk< InteractionBase > objectActionUI = "Interactions.DownloadData";
}

InstallKeylogger : DataExtractionClassHack
{
	actionName = "InstallKeylogger";
	fk< InteractionBase > objectActionUI = "Interactions.InstallKeylogger";
}

ToggleBlockade : ObjectAction
{
	actionName = "ToggleBlockade";
	fk< InteractionBase > objectActionUI = "Interactions.RaiseBlockade";
}

CustomDeviceAction : ObjectAction
{
	actionName = "CustomDeviceAction";
	fk< InteractionBase > objectActionUI = "Interactions.QuickHackDistraction";
}

ToggleON : ObjectAction
{
	actionName = "ToggleON";
	fk< InteractionBase > objectActionUI = "Interactions.On";
}

TogglePower : ObjectAction
{
	actionName = "TogglePower";
	fk< InteractionBase > objectActionUI = "Interactions.Power";
}

PlayDeafeningMusic : MalfunctionClassHack
{
	actionName = "PlayDeafeningMusic";
	fk< InteractionBase > objectActionUI = "Interactions.HackVolume";
}

ChestPressWeightHack : OverloadClassHack
{
	actionName = "ChestPressWeightHack";
	fk< InteractionBase > objectActionUI = "Interactions.ChestPressWeightHack";
}

QuickHackToggleBlockade : ToggleStateClassHack
{
	actionName = "QuickHackToggleBlockade";
	fk< InteractionBase > objectActionUI = "Interactions.RaiseBlockade";
}

ToggleGlassTintHack : ObjectAction
{
	actionName = "ToggleGlassTintHack";
	fk< InteractionBase > objectActionUI = "Interactions.TintGlass";
}

QuickHackToggleActivate : ToggleStateClassHack
{
	actionName = "QuickHackToggleActivate";
	fk< InteractionBase > objectActionUI = "Interactions.ToggleActivate";
}

OverloadDevice : OverloadClassHack
{
	actionName = "OverloadDevice";
	fk< InteractionBase > objectActionUI = "Interactions.OverloadHack";
}

RemoteBreach : DeviceQuickHack
{
	actionName = "RemoteBreach";
	fk< IPrereq >[] instigatorPrereqs += 
	[
		{
			statusEffect = "BaseStatusEffect.RemoteBreachCooldown";
		} : StatusEffectAbsentPrereq
	];
	gameplayCategory = "ActionCategories.TakeControl";
	fk< InteractionBase > objectActionUI = "Interactions.RemoteBreach";
	costs = [];
	targetActivePrereqs = 
	[
		"Prereqs.NetworkNotBreachedActive", "Prereqs.ConnectedToBackdoorActive"
	];
	activationTime = [];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.RemoteBreachCooldown";
			recipient = "ObjectActionReference.Instigator";
		}
	];
	rewards = [];
}

PingDevice : DeviceQuickHack
{
	actionName = "Ping";
	gameplayCategory = "ActionCategories.Ping";
	fk< InteractionBase > objectActionUI = "Interactions.PingHack";
	targetActivePrereqs = 
	[
		"Prereqs.ConnectedToBackdoorActive"
	];
	activationTime += 
	[
		{
			statType = "BaseStats.QuickHackUpload";
			modifierType = "Additive";
			value = 0.5f;
		} : ConstantStatModifier
	];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.HackingTutorialStage01PingUsed";
			recipient = "ObjectActionReference.Instigator";
		}, 
		{
			statusEffect = "BaseStatusEffect.Ping";
			recipient = "ObjectActionReference.Target";
		}
	];
}

PingDeviceLvl2Hack : DeviceQuickHack
{
	actionName = "Ping";
	priority = 2.f;
	gameplayCategory = "ActionCategories.Ping";
	fk< InteractionBase > objectActionUI = "Interactions.PingHack";
	targetActivePrereqs = 
	[
		"Prereqs.ConnectedToBackdoorActive"
	];
	activationTime += 
	[
		{
			statType = "BaseStats.QuickHackUpload";
			modifierType = "Additive";
			value = 0.5f;
		} : ConstantStatModifier
	];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.HackingTutorialStage01PingUsed";
			recipient = "ObjectActionReference.Instigator";
		}, 
		{
			statusEffect = "BaseStatusEffect.Ping";
			recipient = "ObjectActionReference.Target";
		}
	];
}

PingDeviceLvl3Hack : DeviceQuickHack
{
	actionName = "Ping";
	priority = 3.f;
	gameplayCategory = "ActionCategories.Ping";
	fk< InteractionBase > objectActionUI = "Interactions.PingHack";
	targetActivePrereqs = 
	[
		"Prereqs.ConnectedToBackdoorActive"
	];
	activationTime += 
	[
		{
			statType = "BaseStats.QuickHackUpload";
			modifierType = "Additive";
			value = 0.5f;
		} : ConstantStatModifier
	];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.HackingTutorialStage01PingUsed";
			recipient = "ObjectActionReference.Instigator";
		}, 
		{
			statusEffect = "BaseStatusEffect.Ping";
			recipient = "ObjectActionReference.Target";
		}
	];
}

PingDeviceLvl4Hack : DeviceQuickHack
{
	actionName = "Ping";
	priority = 4.f;
	gameplayCategory = "ActionCategories.Ping";
	fk< InteractionBase > objectActionUI = "Interactions.PingHack";
	targetActivePrereqs = 
	[
		"Prereqs.ConnectedToBackdoorActive"
	];
	activationTime += 
	[
		{
			statType = "BaseStats.QuickHackUpload";
			modifierType = "Additive";
			value = 0.5f;
		} : ConstantStatModifier
	];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.HackingTutorialStage01PingUsed";
			recipient = "ObjectActionReference.Instigator";
		}, 
		{
			statusEffect = "BaseStatusEffect.PingLevel4";
			recipient = "ObjectActionReference.Target";
		}
	];
}

PingDeviceTutorial : DeviceQuickHack
{
	actionName = "Ping";
	priority = 99.f;
	costs += 
	[
		{
			costMods += 
			[
				{
					value = 2;
				} : QuickHack.MemoryMod
			];
		} : QuickHack.DeviceMemoryCost
	];
	gameplayCategory = "ActionCategories.Ping";
	fk< InteractionBase > objectActionUI = "Interactions.PingHack";
	targetActivePrereqs = 
	[
		"Prereqs.ConnectedToBackdoorActive"
	];
	fk< StatModifier >[] activationTime = [];
	fk< ObjectActionEffect >[] startEffects += 
	[
		{
			statusEffect = "BaseStatusEffect.HackingTutorialStage01PingUsed";
			recipient = "ObjectActionReference.Instigator";
		}, 
		{
			statusEffect = "BaseStatusEffect.Ping";
			recipient = "ObjectActionReference.Target";
		}
	];
}

