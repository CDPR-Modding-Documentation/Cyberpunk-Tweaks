package Prereqs
using RTDB

FactValuePrereq : IPrereq
{
	prereqClassName = "FactValuePrereq";
	CName fact = "";
	int value = 0;
	CName comparisonType = "";
}

SampleStatPoolPrereq : StatPoolPrereq
{
	float valueToCheck = 0f;
	CName statPoolType = "";
	CName comparisonType = "";
}

SampleStatPrereq : StatPrereq
{
	float valueToCheck = 0;
	CName statType = "";
	CName comparisonType = "";
}

SampleStatusEffectPrereq : StatusEffectPrereq
{
	fk< StatusEffect > statusEffect = "";
}

CharacterDataPrereq : IPrereq
{
	prereqClassName = "CharacterDataPrereq";
	string characterRecord = "";
}

StatusEffectAbsentPrereq : StatusEffectPrereq
{
	prereqClassName = "StatusEffectAbsentPrereq";
}

ICEBreakerAbsentActionPrereq : ObjectActionPrereq
{
	failureConditionPrereq = 
	[
		{
			statusEffect = "MinigameAction.ICEBrokenMinigameMinor";
		} : StatusEffectAbsentPrereq, 
		{
			statusEffect = "MinigameAction.ICEBrokenMinigameMedium";
		} : StatusEffectAbsentPrereq, 
		{
			statusEffect = "MinigameAction.ICEBrokenMinigameMajor";
		} : StatusEffectAbsentPrereq
	];
	failureExplanation = "LocKey#46578";
}

SampleStatusEffectRemovePrereq : StatusEffectPrereq
{
	fk< StatusEffect > statusEffect = "";
}

SampleHitTriggeredPrereq : IPrereq
{
	prereqClassName = "HitTriggeredPrereq";
	bool isSynchronous = false;
	string callbackType = "HitTriggered";
	string pipelineStage = "Process";
}

SampleTargetKilledPrereq : IPrereq
{
	prereqClassName = "TargetKilledPrereq";
}

SampleHitFlagPrereq : IPrereq
{
	prereqClassName = "HitFlagPrereq";
	bool isSynchronous = false;
	string callbackType = "HitTriggered";
	string pipelineStage = "PostProcess";
	string hitFlag = "";
}

SampleAmmoStatePrereq : IPrereq
{
	prereqClassName = "AmmoStateHitTriggeredPrereq";
	string ammoState = "";
}

SampleHitStatusEffectPresentPrereq : IPrereq
{
	prereqClassName = "HitStatusEffectPresentPrereq";
	string statusEffect = "Burning";
	fk< CheckType > checkType = "CheckType.Type";
}

HitIsMovingPrereq : IPrereq
{
	prereqClassName = "HitIsMovingPrereq";
	bool isMoving = true;
	string object = "";
}

HitAttackTypePrereq : IPrereq
{
	prereqClassName = "GenericHitPrereq";
	string pipelineStage = "PreProcess";
	string attackType = "Melee";
	bool isSynchronous = true;
}

HitAttackSubtypePrereq : IPrereq
{
	prereqClassName = "HitAttackSubtypePrereq";
	string pipelineStage = "PreProcess";
	string attackSubtype = "";
	bool isSynchronous = true;
}

DismembermentTriggeredPrereq : IPrereq
{
	prereqClassName = "DismembermentTriggeredPrereq";
}

WoundedTriggeredPrereq : IPrereq
{
	prereqClassName = "WoundedTriggeredPrereq";
}

ColdBloodStatusPrereq : StatusEffectPrereq
{
	statusEffect = "BaseStatusEffect.ColdBlood";
}

ColdBloodWeaponPrereq : MultiPrereq
{
	nestedPrereqs = 
	[
		"Prereqs.ColdBloodStatusPrereq", "Prereqs.AnyWeaponHeldPrereq"
	];
}

ColdBloodRangedPrereq : MultiPrereq
{
	nestedPrereqs = 
	[
		"Prereqs.ColdBloodStatusPrereq", "Prereqs.RangedWeaponHeldPrereq"
	];
}

ColdBloodMeleePrereq : MultiPrereq
{
	nestedPrereqs = 
	[
		"Prereqs.ColdBloodStatusPrereq", "Prereqs.MeleeWeaponHeldPrereq"
	];
}

ColdBloodDoTReceived : MultiPrereq
{
	nestedPrereqs = 
	[
		"Prereqs.ColdBloodStatusPrereq", "Prereqs.HitAttackTypePrereq"
	];
}

ItemQualityPrereq : ItemCreationPrereq
{
	valueToCheck = 0;
	statType = "Quality";
	comparisonType = "GreaterOrEqual";
}

ItemIconicPrereq : ItemCreationPrereq
{
	valueToCheck = 0;
	statType = "IsItemIconic";
	comparisonType = "Greater";
}

ItemQualityEqualPrereq : ItemQualityPrereq
{
	comparisonType = "Equal";
}

ReflexesPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "Reflexes";
	comparisonType = "GreaterOrEqual";
}

BodyPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "Strength";
	comparisonType = "GreaterOrEqual";
}

IntelligencePrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "Intelligence";
	comparisonType = "GreaterOrEqual";
}

CoolPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "Cool";
	comparisonType = "GreaterOrEqual";
}

TechnicalAbilityPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "TechnicalAbility";
	comparisonType = "GreaterOrEqual";
}

PuppetMortalPrereq : IPrereq
{
	prereqClassName = "PuppetMortalPrereq";
	bool invert = false;
}

ReflexesAllocationPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "ReflexesAvailable";
	comparisonType = "GreaterOrEqual";
}

BodyAllocationPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "StrengthAvailable";
	comparisonType = "GreaterOrEqual";
}

IntelligenceAllocationPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "IntelligenceAvailable";
	comparisonType = "GreaterOrEqual";
}

CoolAllocationPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "CoolAvailable";
	comparisonType = "GreaterOrEqual";
}

TechnicalAbilityAllocationPrereq : StatPrereq
{
	valueToCheck = 0;
	statType = "TechnicalAbilityAvailable";
	comparisonType = "GreaterOrEqual";
}

AnyTakedown : MultiPrereq
{
	aggregationType = "OR";
	nestedPrereqs = 
	[
		{
			stateName = "Lethal";
			isInState = true;
		} : Prereqs.BodyDisposalPSMPrereq, 
		{
			stateName = "NonLethal";
			isInState = true;
		} : Prereqs.BodyDisposalPSMPrereq, 
		{
			stateName = "Takedown";
			isInState = true;
		} : Prereqs.TakedownPSMPrereq
	];
}

AnyTakedownOrKill : AnyTakedown
{
	nestedPrereqs += 
	[
		"Perks.IsTargetKilled", {
			conditions = 
			[
				{
					hitFlag = "FinisherTriggered";
				} : HitFlagHitPrereqCondition
			];
		} : PostProcessHitTriggered
	];
}

