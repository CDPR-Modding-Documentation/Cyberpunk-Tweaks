package RTDB

IPrereq
{
	CName prereqClassName = "";
}

MultiPrereq : IPrereq
{
	CName prereqClassName = "gameMultiPrereq";
	CName aggregationType = "AND";
	fk< IPrereq >[] nestedPrereqs = [];
}

StatPrereq : IPrereq
{
	CName prereqClassName = "StatPrereq";
	float valueToCheck = 0;
	CName statType = "Invalid";
	CName comparisonType = "";
	fk< StatModifier >[] statModifiers = [];
}

ItemCreationPrereq : StatPrereq
{
	prereqClassName = "ItemCreationPrereq";
}

StatPoolPrereq : IPrereq
{
	CName prereqClassName = "StatPoolPrereq";
	float valueToCheck = 0;
	CName statPoolType = "Invalid";
	CName comparisonType = "";
	bool skipOnApply = false;
	bool listenConstantly = false;
	bool comparePercentage = true;
	fk< ObjectToCheck > objectToCheck = "";
}

ObjectToCheck
{
}

PlayerObjectToCheck : ObjectToCheck
{
}

ItemObjectToCheck : ObjectToCheck
{
	fk< Item > item = "";
}

StatusEffectPrereq : IPrereq
{
	CName prereqClassName = "StatusEffectPrereq";
	fk< StatusEffect > statusEffect = "";
	bool invert = false;
	fk< CheckType > checkType = "";
	CName tagToCheck = "";
}

NPCTypePrereq : IPrereq
{
	CName prereqClassName = "NPCTypePrereq";
	fk< NPCType >[] allowedTypes = [];
	bool invert = false;
}

VisualTagsPrereq : IPrereq
{
	CName prereqClassName = "VisualTagsPrereq";
	CName[] allowedTags = [];
	bool invert = false;
}

GameplayTagsPrereq : IPrereq
{
	CName prereqClassName = "GameplayTagsPrereq";
	CName[] allowedTags = [];
	bool invert = false;
}

ActionTargetPrereq : IPrereq
{
	CName prereqClassName = "ActionTargetPrereq";
	fk< AIActionTarget > target = "";
	bool invert = false;
}

ActionTargetInDistancePrereq : IPrereq
{
	CName prereqClassName = "ActionTargetInDistancePrereq";
	fk< AIActionTarget > target = "";
	float distance = -1.f;
	bool invert = false;
}

TemporalPrereq : IPrereq
{
	CName prereqClassName = "TemporalPrereq";
	float duration = 0;
}

HitPrereq : IPrereq
{
	CName prereqClassName = "";
	string pipelineStage = "Process";
	string callbackType = "HitReceived";
	bool isSynchronous = true;
	fk< HitPrereqCondition >[] conditions = [];
}

HitPrereqCondition
{
	fk< HitPrereqConditionType > type = "";
	bool invert = false;
	bool onlyOncePerShot = false;
}

HitPrereqConditionType
{
	CName enumName = "";
	CName enumComment = "";
}

PerkPrereq : IPrereq
{
	prereqClassName = "PerkPrereq";
	string perk = "";
}

Prereq
{
	string name = "";
	string devNotes = "";
	bool andValues = false;
	fk< PrereqCheck >[] checks = [];
}

PrereqCheck
{
	string prereqType = "";
	string comparisonType = "";
	float valueToCompare = 0;
	string contextObject = "";
}

